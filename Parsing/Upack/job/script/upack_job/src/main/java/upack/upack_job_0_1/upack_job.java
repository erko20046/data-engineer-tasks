// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package upack.upack_job_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.getEnv;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: upack_job Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class upack_job implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(address_in != null){
				
					this.setProperty("address_in", address_in.toString());
				
			}
			
			if(address_mon != null){
				
					this.setProperty("address_mon", address_mon.toString());
				
			}
			
			if(address_out != null){
				
					this.setProperty("address_out", address_out.toString());
				
			}
			
			if(dbname_in != null){
				
					this.setProperty("dbname_in", dbname_in.toString());
				
			}
			
			if(dbname_mon != null){
				
					this.setProperty("dbname_mon", dbname_mon.toString());
				
			}
			
			if(dbname_out != null){
				
					this.setProperty("dbname_out", dbname_out.toString());
				
			}
			
			if(password_in != null){
				
					this.setProperty("password_in", password_in.toString());
				
			}
			
			if(password_mon != null){
				
					this.setProperty("password_mon", password_mon.toString());
				
			}
			
			if(password_out != null){
				
					this.setProperty("password_out", password_out.toString());
				
			}
			
			if(port_in != null){
				
					this.setProperty("port_in", port_in.toString());
				
			}
			
			if(port_mon != null){
				
					this.setProperty("port_mon", port_mon.toString());
				
			}
			
			if(port_out != null){
				
					this.setProperty("port_out", port_out.toString());
				
			}
			
			if(schema_in != null){
				
					this.setProperty("schema_in", schema_in.toString());
				
			}
			
			if(schema_mon != null){
				
					this.setProperty("schema_mon", schema_mon.toString());
				
			}
			
			if(schema_out != null){
				
					this.setProperty("schema_out", schema_out.toString());
				
			}
			
			if(user_in != null){
				
					this.setProperty("user_in", user_in.toString());
				
			}
			
			if(user_mon != null){
				
					this.setProperty("user_mon", user_mon.toString());
				
			}
			
			if(user_out != null){
				
					this.setProperty("user_out", user_out.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String address_in;
public String getAddress_in(){
	return this.address_in;
}
public String address_mon;
public String getAddress_mon(){
	return this.address_mon;
}
public String address_out;
public String getAddress_out(){
	return this.address_out;
}
public String dbname_in;
public String getDbname_in(){
	return this.dbname_in;
}
public String dbname_mon;
public String getDbname_mon(){
	return this.dbname_mon;
}
public String dbname_out;
public String getDbname_out(){
	return this.dbname_out;
}
public String password_in;
public String getPassword_in(){
	return this.password_in;
}
public String password_mon;
public String getPassword_mon(){
	return this.password_mon;
}
public String password_out;
public String getPassword_out(){
	return this.password_out;
}
public String port_in;
public String getPort_in(){
	return this.port_in;
}
public String port_mon;
public String getPort_mon(){
	return this.port_mon;
}
public String port_out;
public String getPort_out(){
	return this.port_out;
}
public String schema_in;
public String getSchema_in(){
	return this.schema_in;
}
public String schema_mon;
public String getSchema_mon(){
	return this.schema_mon;
}
public String schema_out;
public String getSchema_out(){
	return this.schema_out;
}
public String user_in;
public String getUser_in(){
	return this.user_in;
}
public String user_mon;
public String getUser_mon(){
	return this.user_mon;
}
public String user_out;
public String getUser_out(){
	return this.user_out;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "upack_job";
	private final String projectName = "UPACK";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				upack_job.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(upack_job.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError2", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_2Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError3", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_3Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tDBInput_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRollback_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRollback_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRollback_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRollback_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRollback_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRollback_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBCommit_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBCommit_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_43_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_35_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_36_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row42_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row35_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_34_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_22_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_24_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_27_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_30_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_33_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRollback_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRollback_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRollback_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		



String[] z = getEnv.helloExample("parsing_marketplace_db");
context.address_in = z[0];
context.dbname_in = z[1];
context.port_in = z[2];
context.user_in = z[3];
context.password_in= z[4];
context.schema_in = z[5];
//System.out.println(context.schema_in);


String[] w = getEnv.helloExample("monitoring_db");
context.address_mon = w[0];
context.dbname_mon = w[1];
context.port_mon = w[2];
context.user_mon = w[3];
context.password_mon= w[4];
context.schema_mon = w[5];
//System.out.println(context.schema_mon);

String[] s = getEnv.helloExample("product_catalog_db");
context.address_out = s[0];
context.dbname_out = s[1];
context.port_out = s[2];
context.user_out = s[3];
context.password_out = s[4];
context.schema_out = s[5];
//System.out.println(context.schema_out);

 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		


	
            String dbProperties_tDBConnection_1 = "";
            String url_tDBConnection_1 = "jdbc:postgresql://"+context.address_in+":"+context.port_in+"/"+context.dbname_in;
            
            if(dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
                url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
            }
	String dbUser_tDBConnection_1 = context.user_in;
	
	
		
	final String decryptedPassword_tDBConnection_1 = context.password_in; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
globalMap.put("tDBConnection_1_ERROR_MESSAGE",e_tDBConnection_1.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tDBConnection_1",context.schema_in);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tDBConnection_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";

	
		int tos_count_tDBConnection_2 = 0;
		


	
            String dbProperties_tDBConnection_2 = "";
            String url_tDBConnection_2 = "jdbc:postgresql://"+context.address_out+":"+context.port_out+"/"+context.dbname_out;
            
            if(dbProperties_tDBConnection_2 != null && !"".equals(dbProperties_tDBConnection_2.trim())) {
                url_tDBConnection_2 = url_tDBConnection_2 + "?" + dbProperties_tDBConnection_2;
            }
	String dbUser_tDBConnection_2 = context.user_out;
	
	
		
	final String decryptedPassword_tDBConnection_2 = context.password_out; 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_2 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_2 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_2.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_2 = drivers_tDBConnection_2.nextElement();
        if (redShiftDriverNames_tDBConnection_2.contains(d_tDBConnection_2.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_2);
                java.sql.DriverManager.registerDriver(d_tDBConnection_2);
            } catch (java.lang.Exception e_tDBConnection_2) {
globalMap.put("tDBConnection_2_ERROR_MESSAGE",e_tDBConnection_2.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_2 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tDBConnection_2",context.schema_out);

 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBConnection_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_3", false);
		start_Hash.put("tDBConnection_3", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_3";

	
		int tos_count_tDBConnection_3 = 0;
		


	
            String dbProperties_tDBConnection_3 = "";
            String url_tDBConnection_3 = "jdbc:postgresql://"+context.address_mon+":"+context.port_mon+"/"+context.dbname_mon;
            
            if(dbProperties_tDBConnection_3 != null && !"".equals(dbProperties_tDBConnection_3.trim())) {
                url_tDBConnection_3 = url_tDBConnection_3 + "?" + dbProperties_tDBConnection_3;
            }
	String dbUser_tDBConnection_3 = context.user_mon;
	
	
		
	final String decryptedPassword_tDBConnection_3 = context.password_mon; 
		String dbPwd_tDBConnection_3 = decryptedPassword_tDBConnection_3;
	
	
	java.sql.Connection conn_tDBConnection_3 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_3 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_3 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_3.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_3 = drivers_tDBConnection_3.nextElement();
        if (redShiftDriverNames_tDBConnection_3.contains(d_tDBConnection_3.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_3);
                java.sql.DriverManager.registerDriver(d_tDBConnection_3);
            } catch (java.lang.Exception e_tDBConnection_3) {
globalMap.put("tDBConnection_3_ERROR_MESSAGE",e_tDBConnection_3.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_3 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_3 = java.lang.Class.forName(driverClass_tDBConnection_3);
			globalMap.put("driverClass_tDBConnection_3", driverClass_tDBConnection_3);
		
			conn_tDBConnection_3 = java.sql.DriverManager.getConnection(url_tDBConnection_3,dbUser_tDBConnection_3,dbPwd_tDBConnection_3);

		globalMap.put("conn_tDBConnection_3", conn_tDBConnection_3);
	if (null != conn_tDBConnection_3) {
		
			conn_tDBConnection_3.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tDBConnection_3",context.schema_mon);

 



/**
 * [tDBConnection_3 begin ] stop
 */
	
	/**
	 * [tDBConnection_3 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";

	

 


	tos_count_tDBConnection_3++;

/**
 * [tDBConnection_3 main ] stop
 */
	
	/**
	 * [tDBConnection_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";

	

 



/**
 * [tDBConnection_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";

	

 



/**
 * [tDBConnection_3 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_3 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";

	

 

ok_Hash.put("tDBConnection_3", true);
end_Hash.put("tDBConnection_3", System.currentTimeMillis());




/**
 * [tDBConnection_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_3 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";

	

 



/**
 * [tDBConnection_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public Boolean b;

				public Boolean getB () {
					return this.b;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.b = null;
           				} else {
           			    	this.b = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.b = null;
           				} else {
           			    	this.b = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Boolean
				
						if(this.b == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.b);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Boolean
				
						if(this.b == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.b);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("b="+String.valueOf(b));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row19Struct row19 = new row19Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n	CASE\n           WHEN (select parsed FROM "+context.schema_mon+".parser_monitoring where name = 'upack')\n               THEN true\n           ELSE false\n    END b;";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row19.b = null;
							} else {
	                         		
            row19.b = rs_tDBInput_1.getBoolean(1);
            if(rs_tDBInput_1.wasNull()){
                    row19.b = null;
            }
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					

    if(row19.b == null || !row19.b) throw new Exception("Parsing status is not true!");
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tDBInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class update_categoriesStruct implements routines.system.IPersistableRow<update_categoriesStruct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public Boolean is_active;

				public Boolean getIs_active () {
					return this.is_active;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final update_categoriesStruct other = (update_categoriesStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(update_categoriesStruct other) {

		other.id = this.id;
	            other.is_active = this.is_active;
	            
	}

	public void copyKeysDataTo(update_categoriesStruct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",is_active="+String.valueOf(is_active));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_categoriesStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public Boolean is_active;

				public Boolean getIs_active () {
					return this.is_active;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",is_active="+String.valueOf(is_active));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
update_categoriesStruct update_categories = new update_categoriesStruct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_categories");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("upack_categories");
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("upack_categories");
}

        int updateKeyCount_tDBOutput_3 = 1;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_3 == 2 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_3 = 10000;
   int batchSizeCounter_tDBOutput_3=0;

int count_tDBOutput_3=0;
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"is_active\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_categoriesStruct update_categories_tmp = new update_categoriesStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
    
	
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				conn_tDBInput_6 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "select\n	id, false as is_active\nfrom "+context.schema_out+".upack_categories";
		    

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								row5.id = null;
							} else {
		                          
            row5.id = rs_tDBInput_6.getInt(1);
            if(rs_tDBInput_6.wasNull()){
                    row5.id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								row5.is_active = null;
							} else {
	                         		
            row5.is_active = rs_tDBInput_6.getBoolean(2);
            if(rs_tDBInput_6.wasNull()){
                    row5.is_active = null;
            }
		                    }
					


 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

update_categories = null;


// # Output table : 'update_categories'
update_categories_tmp.id = row5.id ;
update_categories_tmp.is_active = row5.is_active ;
update_categories = update_categories_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "update_categories"
if(update_categories != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_categories"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(update_categories.is_active == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_3.setBoolean(1, update_categories.is_active);
}

                    if(update_categories.id == null) {
pstmt_tDBOutput_3.setNull(2 + count_tDBOutput_3, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(2 + count_tDBOutput_3, update_categories.id);
}


    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    		if (ne_tDBOutput_3 != null) {
				    			throw(sqle_tDBOutput_3);
				    		}else{
				            	throw(e_tDBOutput_3);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "update_categories"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);
 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



	    try {
				int countSum_tDBOutput_3 = 0;
				if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {
						
					for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				}
		    	
		    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
	    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
	    	String errormessage_tDBOutput_3;
			if (ne_tDBOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
				errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
			}else{
				errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
			}
	    	
	    		if (ne_tDBOutput_3 != null) {
	    			throw(sqle_tDBOutput_3);
	    		}else{
	            	throw(e_tDBOutput_3);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_categories");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tDBInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class insert_categories_1Struct implements routines.system.IPersistableRow<insert_categories_1Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer level;

				public Integer getLevel () {
					return this.level;
				}
				
			    public String category_url;

				public String getCategory_url () {
					return this.category_url;
				}
				
			    public Boolean is_active;

				public Boolean getIs_active () {
					return this.is_active;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.level = readInteger(dis);
					
					this.category_url = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.level = readInteger(dis);
					
					this.category_url = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.level,dos);
					
					// String
				
						writeString(this.category_url,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.level,dos);
					
					// String
				
						writeString(this.category_url,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",level="+String.valueOf(level));
		sb.append(",category_url="+category_url);
		sb.append(",is_active="+String.valueOf(is_active));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_categories_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class updateCategories_1Struct implements routines.system.IPersistableRow<updateCategories_1Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer level;

				public Integer getLevel () {
					return this.level;
				}
				
			    public String category_url;

				public String getCategory_url () {
					return this.category_url;
				}
				
			    public Boolean is_active;

				public Boolean getIs_active () {
					return this.is_active;
				}
				
			    public java.util.Date relevance;

				public java.util.Date getRelevance () {
					return this.relevance;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
					
						result = prime * result + ((this.level == null) ? 0 : this.level.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final updateCategories_1Struct other = (updateCategories_1Struct) obj;
		
						if (this.name == null) {
							if (other.name != null)
								return false;
						
						} else if (!this.name.equals(other.name))
						
							return false;
					
						if (this.level == null) {
							if (other.level != null)
								return false;
						
						} else if (!this.level.equals(other.level))
						
							return false;
					

		return true;
    }

	public void copyDataTo(updateCategories_1Struct other) {

		other.name = this.name;
	            other.level = this.level;
	            other.category_url = this.category_url;
	            other.is_active = this.is_active;
	            other.relevance = this.relevance;
	            
	}

	public void copyKeysDataTo(updateCategories_1Struct other) {

		other.name = this.name;
	            	other.level = this.level;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.level = readInteger(dis);
					
					this.category_url = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.level = readInteger(dis);
					
					this.category_url = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.level,dos);
					
					// String
				
						writeString(this.category_url,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.level,dos);
					
					// String
				
						writeString(this.category_url,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",level="+String.valueOf(level));
		sb.append(",category_url="+category_url);
		sb.append(",is_active="+String.valueOf(is_active));
		sb.append(",relevance="+String.valueOf(relevance));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(updateCategories_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.name, other.name);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.level, other.level);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String category_url;

				public String getCategory_url () {
					return this.category_url;
				}
				
			    public Boolean is_active;

				public Boolean getIs_active () {
					return this.is_active;
				}
				
			    public java.util.Date relevance;

				public java.util.Date getRelevance () {
					return this.relevance;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.category_url = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.category_url = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.category_url,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.category_url,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",category_url="+category_url);
		sb.append(",is_active="+String.valueOf(is_active));
		sb.append(",relevance="+String.valueOf(relevance));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_2Struct implements routines.system.IPersistableRow<after_tDBInput_2Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String category_url;

				public String getCategory_url () {
					return this.category_url;
				}
				
			    public Boolean is_active;

				public Boolean getIs_active () {
					return this.is_active;
				}
				
			    public java.util.Date relevance;

				public java.util.Date getRelevance () {
					return this.relevance;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.category_url = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.category_url = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.category_url,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.category_url,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",category_url="+category_url);
		sb.append(",is_active="+String.valueOf(is_active));
		sb.append(",relevance="+String.valueOf(relevance));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_3Process(globalMap);

		row1Struct row1 = new row1Struct();
insert_categories_1Struct insert_categories_1 = new insert_categories_1Struct();
updateCategories_1Struct updateCategories_1 = new updateCategories_1Struct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_categories_1");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("upack_categories");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("upack_categories");
}


int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"name\",\"level\",\"category_url\",\"is_active\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */




	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"updateCategories_1");
					}
				
		int tos_count_tDBOutput_5 = 0;
		





String dbschema_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_5 = null;
if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
	tableName_tDBOutput_5 = ("upack_categories");
} else {
	tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("upack_categories");
}

        int updateKeyCount_tDBOutput_5 = 2;
        if(updateKeyCount_tDBOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_5 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rowsToCommitCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;

boolean whetherReject_tDBOutput_5 = false;

java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;

	conn_tDBOutput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_5 = 10000;
   int batchSizeCounter_tDBOutput_5=0;

int count_tDBOutput_5=0;
	    String update_tDBOutput_5 = "UPDATE \"" + tableName_tDBOutput_5 + "\" SET \"category_url\" = ?,\"is_active\" = ?,\"relevance\" = ? WHERE \"name\" = ? AND \"level\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(update_tDBOutput_5);
	    resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
	    

 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_categories_1Struct insert_categories_1_tmp = new insert_categories_1Struct();
updateCategories_1Struct updateCategories_1_tmp = new updateCategories_1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "select distinct on (name)\n	name, \n	priority, \n	category_url,\n	true as is_active,\n	now() as relevance\nfrom "+context.schema_in+".upack_categories\n	where priority = 1 and name is not NULL;";
		    

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row1.name = null;
							} else {
	                         		
        	row1.name = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row1.priority = null;
							} else {
		                          
            row1.priority = rs_tDBInput_2.getInt(2);
            if(rs_tDBInput_2.wasNull()){
                    row1.priority = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row1.category_url = null;
							} else {
	                         		
        	row1.category_url = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row1.is_active = null;
							} else {
	                         		
            row1.is_active = rs_tDBInput_2.getBoolean(4);
            if(rs_tDBInput_2.wasNull()){
                    row1.is_active = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row1.relevance = null;
							} else {
										
			row1.relevance = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 5);
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row2HashKey.name = row1.name ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.name = '" + row2HashKey.name + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

updateCategories_1 = null;
insert_categories_1 = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'updateCategories_1'
updateCategories_1_tmp.name = row1.name ;
updateCategories_1_tmp.level = row1.priority ;
updateCategories_1_tmp.category_url = row1.category_url ;
updateCategories_1_tmp.is_active = row1.is_active ;
updateCategories_1_tmp.relevance = row1.relevance ;
updateCategories_1 = updateCategories_1_tmp;
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'insert_categories_1'
// # Filter conditions 
if( rejectedInnerJoin_tMap_1 ) {
insert_categories_1_tmp.name = row1.name ;
insert_categories_1_tmp.level = row1.priority ;
insert_categories_1_tmp.category_url = row1.category_url ;
insert_categories_1_tmp.is_active = row1.is_active ;
insert_categories_1 = insert_categories_1_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "insert_categories_1"
if(insert_categories_1 != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_categories_1"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;
                    if(insert_categories_1.name == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, insert_categories_1.name);
}

                    if(insert_categories_1.level == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(2, insert_categories_1.level);
}

                    if(insert_categories_1.category_url == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, insert_categories_1.category_url);
}

                    if(insert_categories_1.is_active == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_1.setBoolean(4, insert_categories_1.is_active);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    		if (ne_tDBOutput_1 != null) {
				    			throw(sqle_tDBOutput_1);
				    		}else{
				            	throw(e_tDBOutput_1);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "insert_categories_1"




// Start of branch "updateCategories_1"
if(updateCategories_1 != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"updateCategories_1"
						
						);
					}
					



        whetherReject_tDBOutput_5 = false;
                    if(updateCategories_1.category_url == null) {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(1, updateCategories_1.category_url);
}

                    if(updateCategories_1.is_active == null) {
pstmt_tDBOutput_5.setNull(2, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_5.setBoolean(2, updateCategories_1.is_active);
}

                    if(updateCategories_1.relevance != null) {
pstmt_tDBOutput_5.setTimestamp(3, new java.sql.Timestamp(updateCategories_1.relevance.getTime()));
} else {
pstmt_tDBOutput_5.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(updateCategories_1.name == null) {
pstmt_tDBOutput_5.setNull(4 + count_tDBOutput_5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(4 + count_tDBOutput_5, updateCategories_1.name);
}


                    if(updateCategories_1.level == null) {
pstmt_tDBOutput_5.setNull(5 + count_tDBOutput_5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_5.setInt(5 + count_tDBOutput_5, updateCategories_1.level);
}


    		pstmt_tDBOutput_5.addBatch();
    		nb_line_tDBOutput_5++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_5++;
    		  
    			if ((batchSize_tDBOutput_5 > 0) && (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
                try {
						int countSum_tDBOutput_5 = 0;
						    
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
				    	rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
				    		updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
            	    	batchSizeCounter_tDBOutput_5 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_5){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e_tDBOutput_5.getMessage());
				    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
				    	String errormessage_tDBOutput_5;
						if (ne_tDBOutput_5 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
							errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
						}else{
							errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
						}
				    	
				    		if (ne_tDBOutput_5 != null) {
				    			throw(sqle_tDBOutput_5);
				    		}else{
				            	throw(e_tDBOutput_5);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "updateCategories_1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    		if (ne_tDBOutput_1 != null) {
	    			throw(sqle_tDBOutput_1);
	    		}else{
	            	throw(e_tDBOutput_1);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_categories_1");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */




	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



	    try {
				int countSum_tDBOutput_5 = 0;
				if (pstmt_tDBOutput_5 != null && batchSizeCounter_tDBOutput_5 > 0) {
						
					for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
					rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
						
				}
		    	
		    		updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_5){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e_tDBOutput_5.getMessage());
	    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
	    	String errormessage_tDBOutput_5;
			if (ne_tDBOutput_5 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
				errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
			}else{
				errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
			}
	    	
	    		if (ne_tDBOutput_5 != null) {
	    			throw(sqle_tDBOutput_5);
	    		}else{
	            	throw(e_tDBOutput_5);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_5 != null) {
        		
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"updateCategories_1");
			  	}
			  	
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());




/**
 * [tDBOutput_5 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tDBInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */




	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfsubjectsStruct implements routines.system.IPersistableRow<copyOfsubjectsStruct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer prod_id;

				public Integer getProd_id () {
					return this.prod_id;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
					
						result = prime * result + ((this.priority == null) ? 0 : this.priority.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfsubjectsStruct other = (copyOfsubjectsStruct) obj;
		
						if (this.name == null) {
							if (other.name != null)
								return false;
						
						} else if (!this.name.equals(other.name))
						
							return false;
					
						if (this.priority == null) {
							if (other.priority != null)
								return false;
						
						} else if (!this.priority.equals(other.priority))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfsubjectsStruct other) {

		other.name = this.name;
	            other.prod_id = this.prod_id;
	            other.priority = this.priority;
	            
	}

	public void copyKeysDataTo(copyOfsubjectsStruct other) {

		other.name = this.name;
	            	other.priority = this.priority;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.prod_id = readInteger(dis);
					
						this.priority = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.prod_id = readInteger(dis);
					
						this.priority = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.prod_id,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.prod_id,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",prod_id="+String.valueOf(prod_id));
		sb.append(",priority="+String.valueOf(priority));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfsubjectsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.name, other.name);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.priority, other.priority);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.priority = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.priority = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",priority="+String.valueOf(priority));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_4Struct implements routines.system.IPersistableRow<after_tDBInput_4Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.priority = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.priority = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",priority="+String.valueOf(priority));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_5Process(globalMap);

		row3Struct row3 = new row3Struct();
copyOfsubjectsStruct copyOfsubjects = new copyOfsubjectsStruct();





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfsubjects");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("upack_categories");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("upack_categories");
}

        int updateKeyCount_tDBOutput_2 = 2;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_2 == 3 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_2 = 10000;
   int batchSizeCounter_tDBOutput_2=0;

int count_tDBOutput_2=0;
	    String update_tDBOutput_2 = "UPDATE \"" + tableName_tDBOutput_2 + "\" SET \"prod_id\" = ? WHERE \"name\" = ? AND \"priority\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfsubjectsStruct copyOfsubjects_tmp = new copyOfsubjectsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "select\n	name, priority\nfrom "+context.schema_in+".upack_categories\n	where priority = 1 and name is not NULL;" ;
		    

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row3.name = null;
							} else {
	                         		
        	row3.name = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row3.priority = null;
							} else {
		                          
            row3.priority = rs_tDBInput_4.getInt(2);
            if(rs_tDBInput_4.wasNull()){
                    row3.priority = null;
            }
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row4HashKey.name = row3.name ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row4.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_2 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.name = '" + row4HashKey.name + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

copyOfsubjects = null;

if(!rejectedInnerJoin_tMap_2 ) {

// # Output table : 'copyOfsubjects'
copyOfsubjects_tmp.name = row3.name ;
copyOfsubjects_tmp.prod_id = row4.id ;
copyOfsubjects_tmp.priority = row3.priority ;
copyOfsubjects = copyOfsubjects_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "copyOfsubjects"
if(copyOfsubjects != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfsubjects"
						
						);
					}
					



        whetherReject_tDBOutput_2 = false;
                    if(copyOfsubjects.prod_id == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(1, copyOfsubjects.prod_id);
}

                    if(copyOfsubjects.name == null) {
pstmt_tDBOutput_2.setNull(2 + count_tDBOutput_2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2 + count_tDBOutput_2, copyOfsubjects.name);
}


                    if(copyOfsubjects.priority == null) {
pstmt_tDBOutput_2.setNull(3 + count_tDBOutput_2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(3 + count_tDBOutput_2, copyOfsubjects.priority);
}


    		pstmt_tDBOutput_2.addBatch();
    		nb_line_tDBOutput_2++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_2++;
    		  
    			if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
						int countSum_tDBOutput_2 = 0;
						    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
				    	rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    		updatedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            	    	batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
				    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
				    	String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						}else{
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}
				    	
				    		if (ne_tDBOutput_2 != null) {
				    			throw(sqle_tDBOutput_2);
				    		}else{
				            	throw(e_tDBOutput_2);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "copyOfsubjects"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



	    try {
				int countSum_tDBOutput_2 = 0;
				if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
						
					for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
						
				}
		    	
		    		updatedCount_tDBOutput_2 += countSum_tDBOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
	    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
	    	String errormessage_tDBOutput_2;
			if (ne_tDBOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
				errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
			}else{
				errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
			}
	    	
	    		if (ne_tDBOutput_2 != null) {
	    			throw(sqle_tDBOutput_2);
	    		}else{
	            	throw(e_tDBOutput_2);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfsubjects");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tDBInput_34Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class insertStruct implements routines.system.IPersistableRow<insertStruct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer parent_id;

				public Integer getParent_id () {
					return this.parent_id;
				}
				
			    public Integer level;

				public Integer getLevel () {
					return this.level;
				}
				
			    public Boolean is_active;

				public Boolean getIs_active () {
					return this.is_active;
				}
				
			    public String category_url;

				public String getCategory_url () {
					return this.category_url;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.parent_id = readInteger(dis);
					
						this.level = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
					this.category_url = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.parent_id = readInteger(dis);
					
						this.level = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
					this.category_url = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.parent_id,dos);
					
					// Integer
				
						writeInteger(this.level,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
					// String
				
						writeString(this.category_url,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.parent_id,dos);
					
					// Integer
				
						writeInteger(this.level,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
					// String
				
						writeString(this.category_url,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",parent_id="+String.valueOf(parent_id));
		sb.append(",level="+String.valueOf(level));
		sb.append(",is_active="+String.valueOf(is_active));
		sb.append(",category_url="+category_url);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insertStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class updateStruct implements routines.system.IPersistableRow<updateStruct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer parent_id;

				public Integer getParent_id () {
					return this.parent_id;
				}
				
			    public Integer level;

				public Integer getLevel () {
					return this.level;
				}
				
			    public Boolean is_active;

				public Boolean getIs_active () {
					return this.is_active;
				}
				
			    public java.util.Date relevance;

				public java.util.Date getRelevance () {
					return this.relevance;
				}
				
			    public String category_url;

				public String getCategory_url () {
					return this.category_url;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
					
						result = prime * result + ((this.parent_id == null) ? 0 : this.parent_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final updateStruct other = (updateStruct) obj;
		
						if (this.name == null) {
							if (other.name != null)
								return false;
						
						} else if (!this.name.equals(other.name))
						
							return false;
					
						if (this.parent_id == null) {
							if (other.parent_id != null)
								return false;
						
						} else if (!this.parent_id.equals(other.parent_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(updateStruct other) {

		other.name = this.name;
	            other.parent_id = this.parent_id;
	            other.level = this.level;
	            other.is_active = this.is_active;
	            other.relevance = this.relevance;
	            other.category_url = this.category_url;
	            
	}

	public void copyKeysDataTo(updateStruct other) {

		other.name = this.name;
	            	other.parent_id = this.parent_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.parent_id = readInteger(dis);
					
						this.level = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
					this.relevance = readDate(dis);
					
					this.category_url = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.parent_id = readInteger(dis);
					
						this.level = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
					this.relevance = readDate(dis);
					
					this.category_url = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.parent_id,dos);
					
					// Integer
				
						writeInteger(this.level,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
					// String
				
						writeString(this.category_url,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.parent_id,dos);
					
					// Integer
				
						writeInteger(this.level,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
					// String
				
						writeString(this.category_url,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",parent_id="+String.valueOf(parent_id));
		sb.append(",level="+String.valueOf(level));
		sb.append(",is_active="+String.valueOf(is_active));
		sb.append(",relevance="+String.valueOf(relevance));
		sb.append(",category_url="+category_url);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(updateStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.name, other.name);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.parent_id, other.parent_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class malStruct implements routines.system.IPersistableRow<malStruct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer parent_id;

				public Integer getParent_id () {
					return this.parent_id;
				}
				
			    public Integer level;

				public Integer getLevel () {
					return this.level;
				}
				
			    public Boolean is_active;

				public Boolean getIs_active () {
					return this.is_active;
				}
				
			    public java.util.Date relevance;

				public java.util.Date getRelevance () {
					return this.relevance;
				}
				
			    public Integer category_id;

				public Integer getCategory_id () {
					return this.category_id;
				}
				
			    public String category_url;

				public String getCategory_url () {
					return this.category_url;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.parent_id = readInteger(dis);
					
						this.level = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
					this.relevance = readDate(dis);
					
						this.category_id = readInteger(dis);
					
					this.category_url = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.parent_id = readInteger(dis);
					
						this.level = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
					this.relevance = readDate(dis);
					
						this.category_id = readInteger(dis);
					
					this.category_url = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.parent_id,dos);
					
					// Integer
				
						writeInteger(this.level,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
					// Integer
				
						writeInteger(this.category_id,dos);
					
					// String
				
						writeString(this.category_url,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.parent_id,dos);
					
					// Integer
				
						writeInteger(this.level,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
					// Integer
				
						writeInteger(this.category_id,dos);
					
					// String
				
						writeString(this.category_url,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",parent_id="+String.valueOf(parent_id));
		sb.append(",level="+String.valueOf(level));
		sb.append(",is_active="+String.valueOf(is_active));
		sb.append(",relevance="+String.valueOf(relevance));
		sb.append(",category_id="+String.valueOf(category_id));
		sb.append(",category_url="+category_url);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(malStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public Integer category_id;

				public Integer getCategory_id () {
					return this.category_id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer parent_id;

				public Integer getParent_id () {
					return this.parent_id;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String category_url;

				public String getCategory_url () {
					return this.category_url;
				}
				
			    public Boolean is_active;

				public Boolean getIs_active () {
					return this.is_active;
				}
				
			    public java.util.Date relevance;

				public java.util.Date getRelevance () {
					return this.relevance;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
						this.category_id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.parent_id = readInteger(dis);
					
						this.priority = readInteger(dis);
					
					this.category_url = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
						this.category_id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.parent_id = readInteger(dis);
					
						this.priority = readInteger(dis);
					
					this.category_url = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.category_id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.parent_id,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.category_url,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.category_id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.parent_id,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.category_url,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("category_id="+String.valueOf(category_id));
		sb.append(",name="+name);
		sb.append(",parent_id="+String.valueOf(parent_id));
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",category_url="+category_url);
		sb.append(",is_active="+String.valueOf(is_active));
		sb.append(",relevance="+String.valueOf(relevance));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_34Struct implements routines.system.IPersistableRow<after_tDBInput_34Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public Integer category_id;

				public Integer getCategory_id () {
					return this.category_id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer parent_id;

				public Integer getParent_id () {
					return this.parent_id;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String category_url;

				public String getCategory_url () {
					return this.category_url;
				}
				
			    public Boolean is_active;

				public Boolean getIs_active () {
					return this.is_active;
				}
				
			    public java.util.Date relevance;

				public java.util.Date getRelevance () {
					return this.relevance;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
						this.category_id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.parent_id = readInteger(dis);
					
						this.priority = readInteger(dis);
					
					this.category_url = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
						this.category_id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.parent_id = readInteger(dis);
					
						this.priority = readInteger(dis);
					
					this.category_url = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.category_id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.parent_id,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.category_url,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.category_id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.parent_id,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.category_url,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("category_id="+String.valueOf(category_id));
		sb.append(",name="+name);
		sb.append(",parent_id="+String.valueOf(parent_id));
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",category_url="+category_url);
		sb.append(",is_active="+String.valueOf(is_active));
		sb.append(",relevance="+String.valueOf(relevance));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_34Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_34_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_35Process(globalMap);
		tDBInput_36Process(globalMap);

		row33Struct row33 = new row33Struct();
malStruct mal = new malStruct();
insertStruct insert = new insertStruct();
updateStruct update = new updateStruct();






	
	/**
	 * [tDBOutput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_22", false);
		start_Hash.put("tDBOutput_22", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_22";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert");
					}
				
		int tos_count_tDBOutput_22 = 0;
		





String dbschema_tDBOutput_22 = null;
	dbschema_tDBOutput_22 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_22 = null;
if(dbschema_tDBOutput_22 == null || dbschema_tDBOutput_22.trim().length() == 0) {
	tableName_tDBOutput_22 = ("upack_categories");
} else {
	tableName_tDBOutput_22 = dbschema_tDBOutput_22 + "\".\"" + ("upack_categories");
}


int nb_line_tDBOutput_22 = 0;
int nb_line_update_tDBOutput_22 = 0;
int nb_line_inserted_tDBOutput_22 = 0;
int nb_line_deleted_tDBOutput_22 = 0;
int nb_line_rejected_tDBOutput_22 = 0;

int deletedCount_tDBOutput_22=0;
int updatedCount_tDBOutput_22=0;
int insertedCount_tDBOutput_22=0;
int rowsToCommitCount_tDBOutput_22=0;
int rejectedCount_tDBOutput_22=0;

boolean whetherReject_tDBOutput_22 = false;

java.sql.Connection conn_tDBOutput_22 = null;
String dbUser_tDBOutput_22 = null;

	conn_tDBOutput_22 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_22 = 10000;
   int batchSizeCounter_tDBOutput_22=0;

int count_tDBOutput_22=0;
	    String insert_tDBOutput_22 = "INSERT INTO \"" + tableName_tDBOutput_22 + "\" (\"name\",\"parent_id\",\"level\",\"is_active\",\"category_url\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_22 = conn_tDBOutput_22.prepareStatement(insert_tDBOutput_22);
	    resourceMap.put("pstmt_tDBOutput_22", pstmt_tDBOutput_22);
	    

 



/**
 * [tDBOutput_22 begin ] stop
 */




	
	/**
	 * [tDBOutput_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_23", false);
		start_Hash.put("tDBOutput_23", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_23";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update");
					}
				
		int tos_count_tDBOutput_23 = 0;
		





String dbschema_tDBOutput_23 = null;
	dbschema_tDBOutput_23 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_23 = null;
if(dbschema_tDBOutput_23 == null || dbschema_tDBOutput_23.trim().length() == 0) {
	tableName_tDBOutput_23 = ("upack_categories");
} else {
	tableName_tDBOutput_23 = dbschema_tDBOutput_23 + "\".\"" + ("upack_categories");
}

        int updateKeyCount_tDBOutput_23 = 2;
        if(updateKeyCount_tDBOutput_23 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_23 == 6 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_23 = 0;
int nb_line_update_tDBOutput_23 = 0;
int nb_line_inserted_tDBOutput_23 = 0;
int nb_line_deleted_tDBOutput_23 = 0;
int nb_line_rejected_tDBOutput_23 = 0;

int deletedCount_tDBOutput_23=0;
int updatedCount_tDBOutput_23=0;
int insertedCount_tDBOutput_23=0;
int rowsToCommitCount_tDBOutput_23=0;
int rejectedCount_tDBOutput_23=0;

boolean whetherReject_tDBOutput_23 = false;

java.sql.Connection conn_tDBOutput_23 = null;
String dbUser_tDBOutput_23 = null;

	conn_tDBOutput_23 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_23 = 10000;
   int batchSizeCounter_tDBOutput_23=0;

int count_tDBOutput_23=0;
	    String update_tDBOutput_23 = "UPDATE \"" + tableName_tDBOutput_23 + "\" SET \"level\" = ?,\"is_active\" = ?,\"relevance\" = ?,\"category_url\" = ? WHERE \"name\" = ? AND \"parent_id\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_23 = conn_tDBOutput_23.prepareStatement(update_tDBOutput_23);
	    resourceMap.put("pstmt_tDBOutput_23", pstmt_tDBOutput_23);
	    

 



/**
 * [tDBOutput_23 begin ] stop
 */



	
	/**
	 * [tMap_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_21", false);
		start_Hash.put("tMap_21", System.currentTimeMillis());
		
	
	currentComponent="tMap_21";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"mal");
					}
				
		int tos_count_tMap_21 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct> tHash_Lookup_row35 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct>) 
					globalMap.get( "tHash_Lookup_row35" ))
					;					
					
	

row35Struct row35HashKey = new row35Struct();
row35Struct row35Default = new row35Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_21__Struct  {
}
Var__tMap_21__Struct Var__tMap_21 = new Var__tMap_21__Struct();
// ###############################

// ###############################
// # Outputs initialization
insertStruct insert_tmp = new insertStruct();
updateStruct update_tmp = new updateStruct();
// ###############################

        
        



        









 



/**
 * [tMap_21 begin ] stop
 */



	
	/**
	 * [tMap_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_20", false);
		start_Hash.put("tMap_20", System.currentTimeMillis());
		
	
	currentComponent="tMap_20";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tMap_20 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct> tHash_Lookup_row34 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct>) 
					globalMap.get( "tHash_Lookup_row34" ))
					;					
					
	

row34Struct row34HashKey = new row34Struct();
row34Struct row34Default = new row34Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_20__Struct  {
}
Var__tMap_20__Struct Var__tMap_20 = new Var__tMap_20__Struct();
// ###############################

// ###############################
// # Outputs initialization
malStruct mal_tmp = new malStruct();
// ###############################

        
        



        









 



/**
 * [tMap_20 begin ] stop
 */



	
	/**
	 * [tDBInput_34 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_34", false);
		start_Hash.put("tDBInput_34", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_34";

	
		int tos_count_tDBInput_34 = 0;
		
	
    
	
		    int nb_line_tDBInput_34 = 0;
		    java.sql.Connection conn_tDBInput_34 = null;
				conn_tDBInput_34 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_34 = conn_tDBInput_34.createStatement();

		    String dbquery_tDBInput_34 = "select\n	category_id,\n	name, \n	parent_id, \n	priority, \n	category_url,\n	true as is_active,\n	now() as relevance\nfrom "+context.schema_in+".upack_categories\n	where priority = 2 and name is not NULL;\n";
		    

            	globalMap.put("tDBInput_34_QUERY",dbquery_tDBInput_34);
		    java.sql.ResultSet rs_tDBInput_34 = null;

		    try {
		    	rs_tDBInput_34 = stmt_tDBInput_34.executeQuery(dbquery_tDBInput_34);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_34 = rs_tDBInput_34.getMetaData();
		    	int colQtyInRs_tDBInput_34 = rsmd_tDBInput_34.getColumnCount();

		    String tmpContent_tDBInput_34 = null;
		    
		    
		    while (rs_tDBInput_34.next()) {
		        nb_line_tDBInput_34++;
		        
							if(colQtyInRs_tDBInput_34 < 1) {
								row33.category_id = null;
							} else {
		                          
            row33.category_id = rs_tDBInput_34.getInt(1);
            if(rs_tDBInput_34.wasNull()){
                    row33.category_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_34 < 2) {
								row33.name = null;
							} else {
	                         		
        	row33.name = routines.system.JDBCUtil.getString(rs_tDBInput_34, 2, false);
		                    }
							if(colQtyInRs_tDBInput_34 < 3) {
								row33.parent_id = null;
							} else {
		                          
            row33.parent_id = rs_tDBInput_34.getInt(3);
            if(rs_tDBInput_34.wasNull()){
                    row33.parent_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_34 < 4) {
								row33.priority = null;
							} else {
		                          
            row33.priority = rs_tDBInput_34.getInt(4);
            if(rs_tDBInput_34.wasNull()){
                    row33.priority = null;
            }
		                    }
							if(colQtyInRs_tDBInput_34 < 5) {
								row33.category_url = null;
							} else {
	                         		
        	row33.category_url = routines.system.JDBCUtil.getString(rs_tDBInput_34, 5, false);
		                    }
							if(colQtyInRs_tDBInput_34 < 6) {
								row33.is_active = null;
							} else {
	                         		
            row33.is_active = rs_tDBInput_34.getBoolean(6);
            if(rs_tDBInput_34.wasNull()){
                    row33.is_active = null;
            }
		                    }
							if(colQtyInRs_tDBInput_34 < 7) {
								row33.relevance = null;
							} else {
										
			row33.relevance = routines.system.JDBCUtil.getDate(rs_tDBInput_34, 7);
		                    }
					


 



/**
 * [tDBInput_34 begin ] stop
 */
	
	/**
	 * [tDBInput_34 main ] start
	 */

	

	
	
	currentComponent="tDBInput_34";

	

 


	tos_count_tDBInput_34++;

/**
 * [tDBInput_34 main ] stop
 */
	
	/**
	 * [tDBInput_34 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_34";

	

 



/**
 * [tDBInput_34 process_data_begin ] stop
 */

	
	/**
	 * [tMap_20 main ] start
	 */

	

	
	
	currentComponent="tMap_20";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row33"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_20 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_20 = false;
		  boolean mainRowRejected_tMap_20 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row34" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow34 = false;
       		  	    	
       		  	    	
 							row34Struct row34ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_20) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_20 = false;
								
                        		    		    row34HashKey.category_id = row33.parent_id ;
                        		    		

								
		                        	row34HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row34.lookup( row34HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row34.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_20 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row34 != null && tHash_Lookup_row34.getCount(row34HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row34' and it contains more one result from keys :  row34.category_id = '" + row34HashKey.category_id + "'");
								} // G 071
							

							row34Struct row34 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row34Struct fromLookup_row34 = null;
							row34 = row34Default;
										 
							
								 
							
							
								if (tHash_Lookup_row34 !=null && tHash_Lookup_row34.hasNext()) { // G 099
								
							
								
								fromLookup_row34 = tHash_Lookup_row34.next();

							
							
								} // G 099
							
							

							if(fromLookup_row34 != null) {
								row34 = fromLookup_row34;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_20__Struct Var = Var__tMap_20;// ###############################
        // ###############################
        // # Output tables

mal = null;

if(!rejectedInnerJoin_tMap_20 ) {

// # Output table : 'mal'
mal_tmp.name = row33.name ;
mal_tmp.parent_id = row34.prod_id ;
mal_tmp.level = row33.priority ;
mal_tmp.is_active = row33.is_active ;
mal_tmp.relevance = row33.relevance ;
mal_tmp.category_id = row33.category_id ;
mal_tmp.category_url = row33.category_url ;
mal = mal_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_20 = false;










 


	tos_count_tMap_20++;

/**
 * [tMap_20 main ] stop
 */
	
	/**
	 * [tMap_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 process_data_begin ] stop
 */
// Start of branch "mal"
if(mal != null) { 



	
	/**
	 * [tMap_21 main ] start
	 */

	

	
	
	currentComponent="tMap_21";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"mal"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_21 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_21 = false;
		  boolean mainRowRejected_tMap_21 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row35" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow35 = false;
       		  	    	
       		  	    	
 							row35Struct row35ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_21) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_21 = false;
								
                        		    		    row35HashKey.name = mal.name ;
                        		    		
                        		    		    row35HashKey.parent_id = mal.parent_id ;
                        		    		

								
		                        	row35HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row35.lookup( row35HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row35.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_21 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row35 != null && tHash_Lookup_row35.getCount(row35HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row35' and it contains more one result from keys :  row35.name = '" + row35HashKey.name + "', row35.parent_id = '" + row35HashKey.parent_id + "'");
								} // G 071
							

							row35Struct row35 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row35Struct fromLookup_row35 = null;
							row35 = row35Default;
										 
							
								 
							
							
								if (tHash_Lookup_row35 !=null && tHash_Lookup_row35.hasNext()) { // G 099
								
							
								
								fromLookup_row35 = tHash_Lookup_row35.next();

							
							
								} // G 099
							
							

							if(fromLookup_row35 != null) {
								row35 = fromLookup_row35;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_21__Struct Var = Var__tMap_21;// ###############################
        // ###############################
        // # Output tables

update = null;
insert = null;

if(!rejectedInnerJoin_tMap_21 ) {

// # Output table : 'update'
update_tmp.name = mal.name ;
update_tmp.parent_id = mal.parent_id ;
update_tmp.level = mal.level ;
update_tmp.is_active = mal.is_active ;
update_tmp.relevance = mal.relevance ;
update_tmp.category_url = mal.category_url ;
update = update_tmp;
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'insert'
// # Filter conditions 
if( rejectedInnerJoin_tMap_21 ) {
insert_tmp.name = mal.name ;
insert_tmp.parent_id = mal.parent_id ;
insert_tmp.level = mal.level ;
insert_tmp.is_active = mal.is_active ;
insert_tmp.category_url = mal.category_url ;
insert = insert_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_21 = false;










 


	tos_count_tMap_21++;

/**
 * [tMap_21 main ] stop
 */
	
	/**
	 * [tMap_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_21";

	

 



/**
 * [tMap_21 process_data_begin ] stop
 */
// Start of branch "insert"
if(insert != null) { 



	
	/**
	 * [tDBOutput_22 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert"
						
						);
					}
					



        whetherReject_tDBOutput_22 = false;
                    if(insert.name == null) {
pstmt_tDBOutput_22.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_22.setString(1, insert.name);
}

                    if(insert.parent_id == null) {
pstmt_tDBOutput_22.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_22.setInt(2, insert.parent_id);
}

                    if(insert.level == null) {
pstmt_tDBOutput_22.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_22.setInt(3, insert.level);
}

                    if(insert.is_active == null) {
pstmt_tDBOutput_22.setNull(4, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_22.setBoolean(4, insert.is_active);
}

                    if(insert.category_url == null) {
pstmt_tDBOutput_22.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_22.setString(5, insert.category_url);
}

			
    		pstmt_tDBOutput_22.addBatch();
    		nb_line_tDBOutput_22++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_22++;
    		  
    			if ((batchSize_tDBOutput_22 > 0) && (batchSize_tDBOutput_22 <= batchSizeCounter_tDBOutput_22)) {
                try {
						int countSum_tDBOutput_22 = 0;
						    
						for(int countEach_tDBOutput_22: pstmt_tDBOutput_22.executeBatch()) {
							countSum_tDBOutput_22 += (countEach_tDBOutput_22 < 0 ? 0 : countEach_tDBOutput_22);
						}
				    	rowsToCommitCount_tDBOutput_22 += countSum_tDBOutput_22;
				    	
				    		insertedCount_tDBOutput_22 += countSum_tDBOutput_22;
				    	
            	    	batchSizeCounter_tDBOutput_22 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_22){
globalMap.put("tDBOutput_22_ERROR_MESSAGE",e_tDBOutput_22.getMessage());
				    	java.sql.SQLException ne_tDBOutput_22 = e_tDBOutput_22.getNextException(),sqle_tDBOutput_22=null;
				    	String errormessage_tDBOutput_22;
						if (ne_tDBOutput_22 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_22 = new java.sql.SQLException(e_tDBOutput_22.getMessage() + "\ncaused by: " + ne_tDBOutput_22.getMessage(), ne_tDBOutput_22.getSQLState(), ne_tDBOutput_22.getErrorCode(), ne_tDBOutput_22);
							errormessage_tDBOutput_22 = sqle_tDBOutput_22.getMessage();
						}else{
							errormessage_tDBOutput_22 = e_tDBOutput_22.getMessage();
						}
				    	
				    		if (ne_tDBOutput_22 != null) {
				    			throw(sqle_tDBOutput_22);
				    		}else{
				            	throw(e_tDBOutput_22);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_22++;

/**
 * [tDBOutput_22 main ] stop
 */
	
	/**
	 * [tDBOutput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_22";

	

 



/**
 * [tDBOutput_22 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_22";

	

 



/**
 * [tDBOutput_22 process_data_end ] stop
 */

} // End of branch "insert"




// Start of branch "update"
if(update != null) { 



	
	/**
	 * [tDBOutput_23 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_23";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update"
						
						);
					}
					



        whetherReject_tDBOutput_23 = false;
                    if(update.level == null) {
pstmt_tDBOutput_23.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_23.setInt(1, update.level);
}

                    if(update.is_active == null) {
pstmt_tDBOutput_23.setNull(2, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_23.setBoolean(2, update.is_active);
}

                    if(update.relevance != null) {
pstmt_tDBOutput_23.setTimestamp(3, new java.sql.Timestamp(update.relevance.getTime()));
} else {
pstmt_tDBOutput_23.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(update.category_url == null) {
pstmt_tDBOutput_23.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_23.setString(4, update.category_url);
}

                    if(update.name == null) {
pstmt_tDBOutput_23.setNull(5 + count_tDBOutput_23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_23.setString(5 + count_tDBOutput_23, update.name);
}


                    if(update.parent_id == null) {
pstmt_tDBOutput_23.setNull(6 + count_tDBOutput_23, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_23.setInt(6 + count_tDBOutput_23, update.parent_id);
}


    		pstmt_tDBOutput_23.addBatch();
    		nb_line_tDBOutput_23++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_23++;
    		  
    			if ((batchSize_tDBOutput_23 > 0) && (batchSize_tDBOutput_23 <= batchSizeCounter_tDBOutput_23)) {
                try {
						int countSum_tDBOutput_23 = 0;
						    
						for(int countEach_tDBOutput_23: pstmt_tDBOutput_23.executeBatch()) {
							countSum_tDBOutput_23 += (countEach_tDBOutput_23 < 0 ? 0 : countEach_tDBOutput_23);
						}
				    	rowsToCommitCount_tDBOutput_23 += countSum_tDBOutput_23;
				    	
				    		updatedCount_tDBOutput_23 += countSum_tDBOutput_23;
				    	
            	    	batchSizeCounter_tDBOutput_23 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_23){
globalMap.put("tDBOutput_23_ERROR_MESSAGE",e_tDBOutput_23.getMessage());
				    	java.sql.SQLException ne_tDBOutput_23 = e_tDBOutput_23.getNextException(),sqle_tDBOutput_23=null;
				    	String errormessage_tDBOutput_23;
						if (ne_tDBOutput_23 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_23 = new java.sql.SQLException(e_tDBOutput_23.getMessage() + "\ncaused by: " + ne_tDBOutput_23.getMessage(), ne_tDBOutput_23.getSQLState(), ne_tDBOutput_23.getErrorCode(), ne_tDBOutput_23);
							errormessage_tDBOutput_23 = sqle_tDBOutput_23.getMessage();
						}else{
							errormessage_tDBOutput_23 = e_tDBOutput_23.getMessage();
						}
				    	
				    		if (ne_tDBOutput_23 != null) {
				    			throw(sqle_tDBOutput_23);
				    		}else{
				            	throw(e_tDBOutput_23);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_23++;

/**
 * [tDBOutput_23 main ] stop
 */
	
	/**
	 * [tDBOutput_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_23";

	

 



/**
 * [tDBOutput_23 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_23";

	

 



/**
 * [tDBOutput_23 process_data_end ] stop
 */

} // End of branch "update"




	
	/**
	 * [tMap_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_21";

	

 



/**
 * [tMap_21 process_data_end ] stop
 */

} // End of branch "mal"




	
	/**
	 * [tMap_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_34 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_34";

	

 



/**
 * [tDBInput_34 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_34 end ] start
	 */

	

	
	
	currentComponent="tDBInput_34";

	

	}
}finally{
	if (rs_tDBInput_34 != null) {
		rs_tDBInput_34.close();
	}
	if (stmt_tDBInput_34 != null) {
		stmt_tDBInput_34.close();
	}
}
globalMap.put("tDBInput_34_NB_LINE",nb_line_tDBInput_34);
 

ok_Hash.put("tDBInput_34", true);
end_Hash.put("tDBInput_34", System.currentTimeMillis());




/**
 * [tDBInput_34 end ] stop
 */

	
	/**
	 * [tMap_20 end ] start
	 */

	

	
	
	currentComponent="tMap_20";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row34 != null) {
						tHash_Lookup_row34.endGet();
					}
					globalMap.remove( "tHash_Lookup_row34" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tMap_20", true);
end_Hash.put("tMap_20", System.currentTimeMillis());




/**
 * [tMap_20 end ] stop
 */

	
	/**
	 * [tMap_21 end ] start
	 */

	

	
	
	currentComponent="tMap_21";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row35 != null) {
						tHash_Lookup_row35.endGet();
					}
					globalMap.remove( "tHash_Lookup_row35" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"mal");
			  	}
			  	
 

ok_Hash.put("tMap_21", true);
end_Hash.put("tMap_21", System.currentTimeMillis());




/**
 * [tMap_21 end ] stop
 */

	
	/**
	 * [tDBOutput_22 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_22";

	



	    try {
				int countSum_tDBOutput_22 = 0;
				if (pstmt_tDBOutput_22 != null && batchSizeCounter_tDBOutput_22 > 0) {
						
					for(int countEach_tDBOutput_22: pstmt_tDBOutput_22.executeBatch()) {
						countSum_tDBOutput_22 += (countEach_tDBOutput_22 < 0 ? 0 : countEach_tDBOutput_22);
					}
					rowsToCommitCount_tDBOutput_22 += countSum_tDBOutput_22;
						
				}
		    	
		    		insertedCount_tDBOutput_22 += countSum_tDBOutput_22;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_22){
globalMap.put("tDBOutput_22_ERROR_MESSAGE",e_tDBOutput_22.getMessage());
	    	java.sql.SQLException ne_tDBOutput_22 = e_tDBOutput_22.getNextException(),sqle_tDBOutput_22=null;
	    	String errormessage_tDBOutput_22;
			if (ne_tDBOutput_22 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_22 = new java.sql.SQLException(e_tDBOutput_22.getMessage() + "\ncaused by: " + ne_tDBOutput_22.getMessage(), ne_tDBOutput_22.getSQLState(), ne_tDBOutput_22.getErrorCode(), ne_tDBOutput_22);
				errormessage_tDBOutput_22 = sqle_tDBOutput_22.getMessage();
			}else{
				errormessage_tDBOutput_22 = e_tDBOutput_22.getMessage();
			}
	    	
	    		if (ne_tDBOutput_22 != null) {
	    			throw(sqle_tDBOutput_22);
	    		}else{
	            	throw(e_tDBOutput_22);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_22 != null) {
        		
            pstmt_tDBOutput_22.close();
            resourceMap.remove("pstmt_tDBOutput_22");
        }
    resourceMap.put("statementClosed_tDBOutput_22", true);

	nb_line_deleted_tDBOutput_22=nb_line_deleted_tDBOutput_22+ deletedCount_tDBOutput_22;
	nb_line_update_tDBOutput_22=nb_line_update_tDBOutput_22 + updatedCount_tDBOutput_22;
	nb_line_inserted_tDBOutput_22=nb_line_inserted_tDBOutput_22 + insertedCount_tDBOutput_22;
	nb_line_rejected_tDBOutput_22=nb_line_rejected_tDBOutput_22 + rejectedCount_tDBOutput_22;
	
        globalMap.put("tDBOutput_22_NB_LINE",nb_line_tDBOutput_22);
        globalMap.put("tDBOutput_22_NB_LINE_UPDATED",nb_line_update_tDBOutput_22);
        globalMap.put("tDBOutput_22_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_22);
        globalMap.put("tDBOutput_22_NB_LINE_DELETED",nb_line_deleted_tDBOutput_22);
        globalMap.put("tDBOutput_22_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_22);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert");
			  	}
			  	
 

ok_Hash.put("tDBOutput_22", true);
end_Hash.put("tDBOutput_22", System.currentTimeMillis());




/**
 * [tDBOutput_22 end ] stop
 */




	
	/**
	 * [tDBOutput_23 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_23";

	



	    try {
				int countSum_tDBOutput_23 = 0;
				if (pstmt_tDBOutput_23 != null && batchSizeCounter_tDBOutput_23 > 0) {
						
					for(int countEach_tDBOutput_23: pstmt_tDBOutput_23.executeBatch()) {
						countSum_tDBOutput_23 += (countEach_tDBOutput_23 < 0 ? 0 : countEach_tDBOutput_23);
					}
					rowsToCommitCount_tDBOutput_23 += countSum_tDBOutput_23;
						
				}
		    	
		    		updatedCount_tDBOutput_23 += countSum_tDBOutput_23;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_23){
globalMap.put("tDBOutput_23_ERROR_MESSAGE",e_tDBOutput_23.getMessage());
	    	java.sql.SQLException ne_tDBOutput_23 = e_tDBOutput_23.getNextException(),sqle_tDBOutput_23=null;
	    	String errormessage_tDBOutput_23;
			if (ne_tDBOutput_23 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_23 = new java.sql.SQLException(e_tDBOutput_23.getMessage() + "\ncaused by: " + ne_tDBOutput_23.getMessage(), ne_tDBOutput_23.getSQLState(), ne_tDBOutput_23.getErrorCode(), ne_tDBOutput_23);
				errormessage_tDBOutput_23 = sqle_tDBOutput_23.getMessage();
			}else{
				errormessage_tDBOutput_23 = e_tDBOutput_23.getMessage();
			}
	    	
	    		if (ne_tDBOutput_23 != null) {
	    			throw(sqle_tDBOutput_23);
	    		}else{
	            	throw(e_tDBOutput_23);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_23 != null) {
        		
            pstmt_tDBOutput_23.close();
            resourceMap.remove("pstmt_tDBOutput_23");
        }
    resourceMap.put("statementClosed_tDBOutput_23", true);

	nb_line_deleted_tDBOutput_23=nb_line_deleted_tDBOutput_23+ deletedCount_tDBOutput_23;
	nb_line_update_tDBOutput_23=nb_line_update_tDBOutput_23 + updatedCount_tDBOutput_23;
	nb_line_inserted_tDBOutput_23=nb_line_inserted_tDBOutput_23 + insertedCount_tDBOutput_23;
	nb_line_rejected_tDBOutput_23=nb_line_rejected_tDBOutput_23 + rejectedCount_tDBOutput_23;
	
        globalMap.put("tDBOutput_23_NB_LINE",nb_line_tDBOutput_23);
        globalMap.put("tDBOutput_23_NB_LINE_UPDATED",nb_line_update_tDBOutput_23);
        globalMap.put("tDBOutput_23_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_23);
        globalMap.put("tDBOutput_23_NB_LINE_DELETED",nb_line_deleted_tDBOutput_23);
        globalMap.put("tDBOutput_23_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_23);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update");
			  	}
			  	
 

ok_Hash.put("tDBOutput_23", true);
end_Hash.put("tDBOutput_23", System.currentTimeMillis());




/**
 * [tDBOutput_23 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_34:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tDBInput_12Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_21"
					     			globalMap.remove("tHash_Lookup_row35"); 
				     			
					     			//free memory for "tMap_20"
					     			globalMap.remove("tHash_Lookup_row34"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_34 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_34";

	

 



/**
 * [tDBInput_34 finally ] stop
 */

	
	/**
	 * [tMap_20 finally ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 finally ] stop
 */

	
	/**
	 * [tMap_21 finally ] start
	 */

	

	
	
	currentComponent="tMap_21";

	

 



/**
 * [tMap_21 finally ] stop
 */

	
	/**
	 * [tDBOutput_22 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_22";

	



    if (resourceMap.get("statementClosed_tDBOutput_22") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_22 = null;
                if ((pstmtToClose_tDBOutput_22 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_22")) != null) {
                    pstmtToClose_tDBOutput_22.close();
                }
    }
 



/**
 * [tDBOutput_22 finally ] stop
 */




	
	/**
	 * [tDBOutput_23 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_23";

	



    if (resourceMap.get("statementClosed_tDBOutput_23") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_23 = null;
                if ((pstmtToClose_tDBOutput_23 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_23")) != null) {
                    pstmtToClose_tDBOutput_23.close();
                }
    }
 



/**
 * [tDBOutput_23 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_34_SUBPROCESS_STATE", 1);
	}
	


public static class updStruct implements routines.system.IPersistableRow<updStruct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer parent_id;

				public Integer getParent_id () {
					return this.parent_id;
				}
				
			    public Integer prod_id;

				public Integer getProd_id () {
					return this.prod_id;
				}
				
			    public Integer category_id;

				public Integer getCategory_id () {
					return this.category_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.category_id == null) ? 0 : this.category_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final updStruct other = (updStruct) obj;
		
						if (this.category_id == null) {
							if (other.category_id != null)
								return false;
						
						} else if (!this.category_id.equals(other.category_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(updStruct other) {

		other.name = this.name;
	            other.parent_id = this.parent_id;
	            other.prod_id = this.prod_id;
	            other.category_id = this.category_id;
	            
	}

	public void copyKeysDataTo(updStruct other) {

		other.category_id = this.category_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.parent_id = readInteger(dis);
					
						this.prod_id = readInteger(dis);
					
						this.category_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.parent_id = readInteger(dis);
					
						this.prod_id = readInteger(dis);
					
						this.category_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.parent_id,dos);
					
					// Integer
				
						writeInteger(this.prod_id,dos);
					
					// Integer
				
						writeInteger(this.category_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.parent_id,dos);
					
					// Integer
				
						writeInteger(this.prod_id,dos);
					
					// Integer
				
						writeInteger(this.category_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",parent_id="+String.valueOf(parent_id));
		sb.append(",prod_id="+String.valueOf(prod_id));
		sb.append(",category_id="+String.valueOf(category_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(updStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.category_id, other.category_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer dev_parent_id;

				public Integer getDev_parent_id () {
					return this.dev_parent_id;
				}
				
			    public Integer prod_parent_id;

				public Integer getProd_parent_id () {
					return this.prod_parent_id;
				}
				
			    public Integer dev_id;

				public Integer getDev_id () {
					return this.dev_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.dev_parent_id = readInteger(dis);
					
						this.prod_parent_id = readInteger(dis);
					
						this.dev_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.dev_parent_id = readInteger(dis);
					
						this.prod_parent_id = readInteger(dis);
					
						this.dev_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.dev_parent_id,dos);
					
					// Integer
				
						writeInteger(this.prod_parent_id,dos);
					
					// Integer
				
						writeInteger(this.dev_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.dev_parent_id,dos);
					
					// Integer
				
						writeInteger(this.prod_parent_id,dos);
					
					// Integer
				
						writeInteger(this.dev_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",dev_parent_id="+String.valueOf(dev_parent_id));
		sb.append(",prod_parent_id="+String.valueOf(prod_parent_id));
		sb.append(",dev_id="+String.valueOf(dev_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public Integer category_id;

				public Integer getCategory_id () {
					return this.category_id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer parent_id;

				public Integer getParent_id () {
					return this.parent_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
						this.category_id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.parent_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
						this.category_id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.parent_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.category_id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.parent_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.category_id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.parent_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("category_id="+String.valueOf(category_id));
		sb.append(",name="+name);
		sb.append(",parent_id="+String.valueOf(parent_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_12Struct implements routines.system.IPersistableRow<after_tDBInput_12Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public Integer category_id;

				public Integer getCategory_id () {
					return this.category_id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer parent_id;

				public Integer getParent_id () {
					return this.parent_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
						this.category_id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.parent_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
						this.category_id = readInteger(dis);
					
					this.name = readString(dis);
					
						this.parent_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.category_id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.parent_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.category_id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.parent_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("category_id="+String.valueOf(category_id));
		sb.append(",name="+name);
		sb.append(",parent_id="+String.valueOf(parent_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_10Process(globalMap);
		tDBInput_11Process(globalMap);

		row10Struct row10 = new row10Struct();
out1Struct out1 = new out1Struct();
updStruct upd = new updStruct();






	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"upd");
					}
				
		int tos_count_tDBOutput_4 = 0;
		





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = ("upack_categories");
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("upack_categories");
}

        int updateKeyCount_tDBOutput_4 = 1;
        if(updateKeyCount_tDBOutput_4 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_4 == 4 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rowsToCommitCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	conn_tDBOutput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_4 = 10000;
   int batchSizeCounter_tDBOutput_4=0;

int count_tDBOutput_4=0;
	    String update_tDBOutput_4 = "UPDATE \"" + tableName_tDBOutput_4 + "\" SET \"name\" = ?,\"parent_id\" = ?,\"prod_id\" = ? WHERE \"category_id\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(update_tDBOutput_4);
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
updStruct upd_tmp = new updStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tDBInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_12", false);
		start_Hash.put("tDBInput_12", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_12";

	
		int tos_count_tDBInput_12 = 0;
		
	
    
	
		    int nb_line_tDBInput_12 = 0;
		    java.sql.Connection conn_tDBInput_12 = null;
				conn_tDBInput_12 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_12 = conn_tDBInput_12.createStatement();

		    String dbquery_tDBInput_12 = "select \n	category_id,\n	name, \n	parent_id\nfrom "+context.schema_in+".upack_categories\n	where priority = 2 and name is not NULL;";
		    

            	globalMap.put("tDBInput_12_QUERY",dbquery_tDBInput_12);
		    java.sql.ResultSet rs_tDBInput_12 = null;

		    try {
		    	rs_tDBInput_12 = stmt_tDBInput_12.executeQuery(dbquery_tDBInput_12);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_12 = rs_tDBInput_12.getMetaData();
		    	int colQtyInRs_tDBInput_12 = rsmd_tDBInput_12.getColumnCount();

		    String tmpContent_tDBInput_12 = null;
		    
		    
		    while (rs_tDBInput_12.next()) {
		        nb_line_tDBInput_12++;
		        
							if(colQtyInRs_tDBInput_12 < 1) {
								row10.category_id = null;
							} else {
		                          
            row10.category_id = rs_tDBInput_12.getInt(1);
            if(rs_tDBInput_12.wasNull()){
                    row10.category_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_12 < 2) {
								row10.name = null;
							} else {
	                         		
        	row10.name = routines.system.JDBCUtil.getString(rs_tDBInput_12, 2, false);
		                    }
							if(colQtyInRs_tDBInput_12 < 3) {
								row10.parent_id = null;
							} else {
		                          
            row10.parent_id = rs_tDBInput_12.getInt(3);
            if(rs_tDBInput_12.wasNull()){
                    row10.parent_id = null;
            }
		                    }
					


 



/**
 * [tDBInput_12 begin ] stop
 */
	
	/**
	 * [tDBInput_12 main ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 


	tos_count_tDBInput_12++;

/**
 * [tDBInput_12 main ] stop
 */
	
	/**
	 * [tDBInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row8HashKey.category_id = row10.parent_id;
                        		    		

								
		                        	row8HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row8.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_6 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row8 != null && tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.category_id = '" + row8HashKey.category_id + "'");
								} // G 071
							

							row8Struct row8 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								 
							
							
								if (tHash_Lookup_row8 !=null && tHash_Lookup_row8.hasNext()) { // G 099
								
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							
							
								} // G 099
							
							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

out1 = null;

if(!rejectedInnerJoin_tMap_6 ) {

// # Output table : 'out1'
out1_tmp.name = row10.name;
out1_tmp.dev_parent_id = row10.parent_id;
out1_tmp.prod_parent_id = row8.prod_id;
out1_tmp.dev_id = row10.category_id ;
out1 = out1_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row6HashKey.name = out1.name ;
                        		    		
                        		    		    row6HashKey.parent_id = out1.prod_parent_id ;
                        		    		

								
		                        	row6HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row6.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row6 != null && tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.name = '" + row6HashKey.name + "', row6.parent_id = '" + row6HashKey.parent_id + "'");
								} // G 071
							

							row6Struct row6 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								 
							
							
								if (tHash_Lookup_row6 !=null && tHash_Lookup_row6.hasNext()) { // G 099
								
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							
							
								} // G 099
							
							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

upd = null;

if(!rejectedInnerJoin_tMap_4 ) {

// # Output table : 'upd'
upd_tmp.name = row6.name ;
upd_tmp.parent_id = out1.dev_parent_id ;
upd_tmp.prod_id = row6.id ;
upd_tmp.category_id = out1.dev_id ;
upd = upd_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "upd"
if(upd != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"upd"
						
						);
					}
					



        whetherReject_tDBOutput_4 = false;
                    if(upd.name == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(1, upd.name);
}

                    if(upd.parent_id == null) {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(2, upd.parent_id);
}

                    if(upd.prod_id == null) {
pstmt_tDBOutput_4.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(3, upd.prod_id);
}

                    if(upd.category_id == null) {
pstmt_tDBOutput_4.setNull(4 + count_tDBOutput_4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(4 + count_tDBOutput_4, upd.category_id);
}


    		pstmt_tDBOutput_4.addBatch();
    		nb_line_tDBOutput_4++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_4++;
    		  
    			if ((batchSize_tDBOutput_4 > 0) && (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
                try {
						int countSum_tDBOutput_4 = 0;
						    
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
				    	rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
				    		updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
            	    	batchSizeCounter_tDBOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
				    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
				    	String errormessage_tDBOutput_4;
						if (ne_tDBOutput_4 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
							errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
						}else{
							errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
						}
				    	
				    		if (ne_tDBOutput_4 != null) {
				    			throw(sqle_tDBOutput_4);
				    		}else{
				            	throw(e_tDBOutput_4);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "upd"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_12 end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

	}
}finally{
	if (rs_tDBInput_12 != null) {
		rs_tDBInput_12.close();
	}
	if (stmt_tDBInput_12 != null) {
		stmt_tDBInput_12.close();
	}
}
globalMap.put("tDBInput_12_NB_LINE",nb_line_tDBInput_12);
 

ok_Hash.put("tDBInput_12", true);
end_Hash.put("tDBInput_12", System.currentTimeMillis());




/**
 * [tDBInput_12 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



	    try {
				int countSum_tDBOutput_4 = 0;
				if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {
						
					for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
						
				}
		    	
		    		updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
	    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
	    	String errormessage_tDBOutput_4;
			if (ne_tDBOutput_4 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
				errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
			}else{
				errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
			}
	    	
	    		if (ne_tDBOutput_4 != null) {
	    			throw(sqle_tDBOutput_4);
	    		}else{
	            	throw(e_tDBOutput_4);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_4 != null) {
        		
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"upd");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_12:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tDBInput_22Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_12 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class insert_productsStruct implements routines.system.IPersistableRow<insert_productsStruct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public String source_code;

				public String getSource_code () {
					return this.source_code;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer category_id;

				public Integer getCategory_id () {
					return this.category_id;
				}
				
			    public String product_url;

				public String getProduct_url () {
					return this.product_url;
				}
				
			    public Float per_price;

				public Float getPer_price () {
					return this.per_price;
				}
				
			    public Integer quantity_per_box;

				public Integer getQuantity_per_box () {
					return this.quantity_per_box;
				}
				
			    public Integer quantity_per_pack;

				public Integer getQuantity_per_pack () {
					return this.quantity_per_pack;
				}
				
			    public Integer min_quantity;

				public Integer getMin_quantity () {
					return this.min_quantity;
				}
				
			    public Float min_batch_price;

				public Float getMin_batch_price () {
					return this.min_batch_price;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
					this.name = readString(dis);
					
						this.category_id = readInteger(dis);
					
					this.product_url = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.per_price = null;
           				} else {
           			    	this.per_price = dis.readFloat();
           				}
					
						this.quantity_per_box = readInteger(dis);
					
						this.quantity_per_pack = readInteger(dis);
					
						this.min_quantity = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.min_batch_price = null;
           				} else {
           			    	this.min_batch_price = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
					this.name = readString(dis);
					
						this.category_id = readInteger(dis);
					
					this.product_url = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.per_price = null;
           				} else {
           			    	this.per_price = dis.readFloat();
           				}
					
						this.quantity_per_box = readInteger(dis);
					
						this.quantity_per_pack = readInteger(dis);
					
						this.min_quantity = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.min_batch_price = null;
           				} else {
           			    	this.min_batch_price = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.category_id,dos);
					
					// String
				
						writeString(this.product_url,dos);
					
					// Float
				
						if(this.per_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.per_price);
		            	}
					
					// Integer
				
						writeInteger(this.quantity_per_box,dos);
					
					// Integer
				
						writeInteger(this.quantity_per_pack,dos);
					
					// Integer
				
						writeInteger(this.min_quantity,dos);
					
					// Float
				
						if(this.min_batch_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.min_batch_price);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.category_id,dos);
					
					// String
				
						writeString(this.product_url,dos);
					
					// Float
				
						if(this.per_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.per_price);
		            	}
					
					// Integer
				
						writeInteger(this.quantity_per_box,dos);
					
					// Integer
				
						writeInteger(this.quantity_per_pack,dos);
					
					// Integer
				
						writeInteger(this.min_quantity,dos);
					
					// Float
				
						if(this.min_batch_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.min_batch_price);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("source_code="+source_code);
		sb.append(",name="+name);
		sb.append(",category_id="+String.valueOf(category_id));
		sb.append(",product_url="+product_url);
		sb.append(",per_price="+String.valueOf(per_price));
		sb.append(",quantity_per_box="+String.valueOf(quantity_per_box));
		sb.append(",quantity_per_pack="+String.valueOf(quantity_per_pack));
		sb.append(",min_quantity="+String.valueOf(min_quantity));
		sb.append(",min_batch_price="+String.valueOf(min_batch_price));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_productsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class update_productsStruct implements routines.system.IPersistableRow<update_productsStruct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String source_code;

				public String getSource_code () {
					return this.source_code;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer category_id;

				public Integer getCategory_id () {
					return this.category_id;
				}
				
			    public String product_url;

				public String getProduct_url () {
					return this.product_url;
				}
				
			    public Float per_price;

				public Float getPer_price () {
					return this.per_price;
				}
				
			    public Integer quantity_per_box;

				public Integer getQuantity_per_box () {
					return this.quantity_per_box;
				}
				
			    public Integer quantity_per_pack;

				public Integer getQuantity_per_pack () {
					return this.quantity_per_pack;
				}
				
			    public Integer min_quantity;

				public Integer getMin_quantity () {
					return this.min_quantity;
				}
				
			    public Float min_batch_price;

				public Float getMin_batch_price () {
					return this.min_batch_price;
				}
				
			    public java.util.Date relevance;

				public java.util.Date getRelevance () {
					return this.relevance;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.source_code == null) ? 0 : this.source_code.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final update_productsStruct other = (update_productsStruct) obj;
		
						if (this.source_code == null) {
							if (other.source_code != null)
								return false;
						
						} else if (!this.source_code.equals(other.source_code))
						
							return false;
					

		return true;
    }

	public void copyDataTo(update_productsStruct other) {

		other.source_code = this.source_code;
	            other.name = this.name;
	            other.category_id = this.category_id;
	            other.product_url = this.product_url;
	            other.per_price = this.per_price;
	            other.quantity_per_box = this.quantity_per_box;
	            other.quantity_per_pack = this.quantity_per_pack;
	            other.min_quantity = this.min_quantity;
	            other.min_batch_price = this.min_batch_price;
	            other.relevance = this.relevance;
	            
	}

	public void copyKeysDataTo(update_productsStruct other) {

		other.source_code = this.source_code;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
					this.name = readString(dis);
					
						this.category_id = readInteger(dis);
					
					this.product_url = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.per_price = null;
           				} else {
           			    	this.per_price = dis.readFloat();
           				}
					
						this.quantity_per_box = readInteger(dis);
					
						this.quantity_per_pack = readInteger(dis);
					
						this.min_quantity = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.min_batch_price = null;
           				} else {
           			    	this.min_batch_price = dis.readFloat();
           				}
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
					this.name = readString(dis);
					
						this.category_id = readInteger(dis);
					
					this.product_url = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.per_price = null;
           				} else {
           			    	this.per_price = dis.readFloat();
           				}
					
						this.quantity_per_box = readInteger(dis);
					
						this.quantity_per_pack = readInteger(dis);
					
						this.min_quantity = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.min_batch_price = null;
           				} else {
           			    	this.min_batch_price = dis.readFloat();
           				}
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.category_id,dos);
					
					// String
				
						writeString(this.product_url,dos);
					
					// Float
				
						if(this.per_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.per_price);
		            	}
					
					// Integer
				
						writeInteger(this.quantity_per_box,dos);
					
					// Integer
				
						writeInteger(this.quantity_per_pack,dos);
					
					// Integer
				
						writeInteger(this.min_quantity,dos);
					
					// Float
				
						if(this.min_batch_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.min_batch_price);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.category_id,dos);
					
					// String
				
						writeString(this.product_url,dos);
					
					// Float
				
						if(this.per_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.per_price);
		            	}
					
					// Integer
				
						writeInteger(this.quantity_per_box,dos);
					
					// Integer
				
						writeInteger(this.quantity_per_pack,dos);
					
					// Integer
				
						writeInteger(this.min_quantity,dos);
					
					// Float
				
						if(this.min_batch_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.min_batch_price);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("source_code="+source_code);
		sb.append(",name="+name);
		sb.append(",category_id="+String.valueOf(category_id));
		sb.append(",product_url="+product_url);
		sb.append(",per_price="+String.valueOf(per_price));
		sb.append(",quantity_per_box="+String.valueOf(quantity_per_box));
		sb.append(",quantity_per_pack="+String.valueOf(quantity_per_pack));
		sb.append(",min_quantity="+String.valueOf(min_quantity));
		sb.append(",min_batch_price="+String.valueOf(min_batch_price));
		sb.append(",relevance="+String.valueOf(relevance));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_productsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.source_code, other.source_code);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class productsStruct implements routines.system.IPersistableRow<productsStruct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public String source_code;

				public String getSource_code () {
					return this.source_code;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public Integer category_id;

				public Integer getCategory_id () {
					return this.category_id;
				}
				
			    public String product_url;

				public String getProduct_url () {
					return this.product_url;
				}
				
			    public Float per_price;

				public Float getPer_price () {
					return this.per_price;
				}
				
			    public Integer quantity_per_box;

				public Integer getQuantity_per_box () {
					return this.quantity_per_box;
				}
				
			    public Integer quantity_per_pack;

				public Integer getQuantity_per_pack () {
					return this.quantity_per_pack;
				}
				
			    public Integer min_quantity;

				public Integer getMin_quantity () {
					return this.min_quantity;
				}
				
			    public Float min_batch_price;

				public Float getMin_batch_price () {
					return this.min_batch_price;
				}
				
			    public java.util.Date relevance;

				public java.util.Date getRelevance () {
					return this.relevance;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
					this.title = readString(dis);
					
						this.category_id = readInteger(dis);
					
					this.product_url = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.per_price = null;
           				} else {
           			    	this.per_price = dis.readFloat();
           				}
					
						this.quantity_per_box = readInteger(dis);
					
						this.quantity_per_pack = readInteger(dis);
					
						this.min_quantity = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.min_batch_price = null;
           				} else {
           			    	this.min_batch_price = dis.readFloat();
           				}
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
					this.title = readString(dis);
					
						this.category_id = readInteger(dis);
					
					this.product_url = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.per_price = null;
           				} else {
           			    	this.per_price = dis.readFloat();
           				}
					
						this.quantity_per_box = readInteger(dis);
					
						this.quantity_per_pack = readInteger(dis);
					
						this.min_quantity = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.min_batch_price = null;
           				} else {
           			    	this.min_batch_price = dis.readFloat();
           				}
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// Integer
				
						writeInteger(this.category_id,dos);
					
					// String
				
						writeString(this.product_url,dos);
					
					// Float
				
						if(this.per_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.per_price);
		            	}
					
					// Integer
				
						writeInteger(this.quantity_per_box,dos);
					
					// Integer
				
						writeInteger(this.quantity_per_pack,dos);
					
					// Integer
				
						writeInteger(this.min_quantity,dos);
					
					// Float
				
						if(this.min_batch_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.min_batch_price);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// Integer
				
						writeInteger(this.category_id,dos);
					
					// String
				
						writeString(this.product_url,dos);
					
					// Float
				
						if(this.per_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.per_price);
		            	}
					
					// Integer
				
						writeInteger(this.quantity_per_box,dos);
					
					// Integer
				
						writeInteger(this.quantity_per_pack,dos);
					
					// Integer
				
						writeInteger(this.min_quantity,dos);
					
					// Float
				
						if(this.min_batch_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.min_batch_price);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("source_code="+source_code);
		sb.append(",title="+title);
		sb.append(",category_id="+String.valueOf(category_id));
		sb.append(",product_url="+product_url);
		sb.append(",per_price="+String.valueOf(per_price));
		sb.append(",quantity_per_box="+String.valueOf(quantity_per_box));
		sb.append(",quantity_per_pack="+String.valueOf(quantity_per_pack));
		sb.append(",min_quantity="+String.valueOf(min_quantity));
		sb.append(",min_batch_price="+String.valueOf(min_batch_price));
		sb.append(",relevance="+String.valueOf(relevance));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(productsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public String source_code;

				public String getSource_code () {
					return this.source_code;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public Integer category_id;

				public Integer getCategory_id () {
					return this.category_id;
				}
				
			    public String product_url;

				public String getProduct_url () {
					return this.product_url;
				}
				
			    public Float per_price;

				public Float getPer_price () {
					return this.per_price;
				}
				
			    public Integer quantity_per_box;

				public Integer getQuantity_per_box () {
					return this.quantity_per_box;
				}
				
			    public Integer quantity_per_pack;

				public Integer getQuantity_per_pack () {
					return this.quantity_per_pack;
				}
				
			    public Integer min_quantity;

				public Integer getMin_quantity () {
					return this.min_quantity;
				}
				
			    public Float min_batch_price;

				public Float getMin_batch_price () {
					return this.min_batch_price;
				}
				
			    public java.util.Date relevance;

				public java.util.Date getRelevance () {
					return this.relevance;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
					this.title = readString(dis);
					
						this.category_id = readInteger(dis);
					
					this.product_url = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.per_price = null;
           				} else {
           			    	this.per_price = dis.readFloat();
           				}
					
						this.quantity_per_box = readInteger(dis);
					
						this.quantity_per_pack = readInteger(dis);
					
						this.min_quantity = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.min_batch_price = null;
           				} else {
           			    	this.min_batch_price = dis.readFloat();
           				}
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
					this.title = readString(dis);
					
						this.category_id = readInteger(dis);
					
					this.product_url = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.per_price = null;
           				} else {
           			    	this.per_price = dis.readFloat();
           				}
					
						this.quantity_per_box = readInteger(dis);
					
						this.quantity_per_pack = readInteger(dis);
					
						this.min_quantity = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.min_batch_price = null;
           				} else {
           			    	this.min_batch_price = dis.readFloat();
           				}
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// Integer
				
						writeInteger(this.category_id,dos);
					
					// String
				
						writeString(this.product_url,dos);
					
					// Float
				
						if(this.per_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.per_price);
		            	}
					
					// Integer
				
						writeInteger(this.quantity_per_box,dos);
					
					// Integer
				
						writeInteger(this.quantity_per_pack,dos);
					
					// Integer
				
						writeInteger(this.min_quantity,dos);
					
					// Float
				
						if(this.min_batch_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.min_batch_price);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// Integer
				
						writeInteger(this.category_id,dos);
					
					// String
				
						writeString(this.product_url,dos);
					
					// Float
				
						if(this.per_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.per_price);
		            	}
					
					// Integer
				
						writeInteger(this.quantity_per_box,dos);
					
					// Integer
				
						writeInteger(this.quantity_per_pack,dos);
					
					// Integer
				
						writeInteger(this.min_quantity,dos);
					
					// Float
				
						if(this.min_batch_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.min_batch_price);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("source_code="+source_code);
		sb.append(",title="+title);
		sb.append(",category_id="+String.valueOf(category_id));
		sb.append(",product_url="+product_url);
		sb.append(",per_price="+String.valueOf(per_price));
		sb.append(",quantity_per_box="+String.valueOf(quantity_per_box));
		sb.append(",quantity_per_pack="+String.valueOf(quantity_per_pack));
		sb.append(",min_quantity="+String.valueOf(min_quantity));
		sb.append(",min_batch_price="+String.valueOf(min_batch_price));
		sb.append(",relevance="+String.valueOf(relevance));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_22Struct implements routines.system.IPersistableRow<after_tDBInput_22Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public String source_code;

				public String getSource_code () {
					return this.source_code;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public Integer category_id;

				public Integer getCategory_id () {
					return this.category_id;
				}
				
			    public String product_url;

				public String getProduct_url () {
					return this.product_url;
				}
				
			    public Float per_price;

				public Float getPer_price () {
					return this.per_price;
				}
				
			    public Integer quantity_per_box;

				public Integer getQuantity_per_box () {
					return this.quantity_per_box;
				}
				
			    public Integer quantity_per_pack;

				public Integer getQuantity_per_pack () {
					return this.quantity_per_pack;
				}
				
			    public Integer min_quantity;

				public Integer getMin_quantity () {
					return this.min_quantity;
				}
				
			    public Float min_batch_price;

				public Float getMin_batch_price () {
					return this.min_batch_price;
				}
				
			    public java.util.Date relevance;

				public java.util.Date getRelevance () {
					return this.relevance;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
					this.title = readString(dis);
					
						this.category_id = readInteger(dis);
					
					this.product_url = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.per_price = null;
           				} else {
           			    	this.per_price = dis.readFloat();
           				}
					
						this.quantity_per_box = readInteger(dis);
					
						this.quantity_per_pack = readInteger(dis);
					
						this.min_quantity = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.min_batch_price = null;
           				} else {
           			    	this.min_batch_price = dis.readFloat();
           				}
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
					this.title = readString(dis);
					
						this.category_id = readInteger(dis);
					
					this.product_url = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.per_price = null;
           				} else {
           			    	this.per_price = dis.readFloat();
           				}
					
						this.quantity_per_box = readInteger(dis);
					
						this.quantity_per_pack = readInteger(dis);
					
						this.min_quantity = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.min_batch_price = null;
           				} else {
           			    	this.min_batch_price = dis.readFloat();
           				}
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// Integer
				
						writeInteger(this.category_id,dos);
					
					// String
				
						writeString(this.product_url,dos);
					
					// Float
				
						if(this.per_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.per_price);
		            	}
					
					// Integer
				
						writeInteger(this.quantity_per_box,dos);
					
					// Integer
				
						writeInteger(this.quantity_per_pack,dos);
					
					// Integer
				
						writeInteger(this.min_quantity,dos);
					
					// Float
				
						if(this.min_batch_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.min_batch_price);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// Integer
				
						writeInteger(this.category_id,dos);
					
					// String
				
						writeString(this.product_url,dos);
					
					// Float
				
						if(this.per_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.per_price);
		            	}
					
					// Integer
				
						writeInteger(this.quantity_per_box,dos);
					
					// Integer
				
						writeInteger(this.quantity_per_pack,dos);
					
					// Integer
				
						writeInteger(this.min_quantity,dos);
					
					// Float
				
						if(this.min_batch_price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.min_batch_price);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("source_code="+source_code);
		sb.append(",title="+title);
		sb.append(",category_id="+String.valueOf(category_id));
		sb.append(",product_url="+product_url);
		sb.append(",per_price="+String.valueOf(per_price));
		sb.append(",quantity_per_box="+String.valueOf(quantity_per_box));
		sb.append(",quantity_per_pack="+String.valueOf(quantity_per_pack));
		sb.append(",min_quantity="+String.valueOf(min_quantity));
		sb.append(",min_batch_price="+String.valueOf(min_batch_price));
		sb.append(",relevance="+String.valueOf(relevance));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_22_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_23Process(globalMap);
		tDBInput_26Process(globalMap);

		row22Struct row22 = new row22Struct();
productsStruct products = new productsStruct();
insert_productsStruct insert_products = new insert_productsStruct();
update_productsStruct update_products = new update_productsStruct();






	
	/**
	 * [tDBOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_13", false);
		start_Hash.put("tDBOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_products");
					}
				
		int tos_count_tDBOutput_13 = 0;
		





String dbschema_tDBOutput_13 = null;
	dbschema_tDBOutput_13 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_13 = null;
if(dbschema_tDBOutput_13 == null || dbschema_tDBOutput_13.trim().length() == 0) {
	tableName_tDBOutput_13 = ("upack_products");
} else {
	tableName_tDBOutput_13 = dbschema_tDBOutput_13 + "\".\"" + ("upack_products");
}


int nb_line_tDBOutput_13 = 0;
int nb_line_update_tDBOutput_13 = 0;
int nb_line_inserted_tDBOutput_13 = 0;
int nb_line_deleted_tDBOutput_13 = 0;
int nb_line_rejected_tDBOutput_13 = 0;

int deletedCount_tDBOutput_13=0;
int updatedCount_tDBOutput_13=0;
int insertedCount_tDBOutput_13=0;
int rowsToCommitCount_tDBOutput_13=0;
int rejectedCount_tDBOutput_13=0;

boolean whetherReject_tDBOutput_13 = false;

java.sql.Connection conn_tDBOutput_13 = null;
String dbUser_tDBOutput_13 = null;

	conn_tDBOutput_13 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_13 = 10000;
   int batchSizeCounter_tDBOutput_13=0;

int count_tDBOutput_13=0;
	    String insert_tDBOutput_13 = "INSERT INTO \"" + tableName_tDBOutput_13 + "\" (\"source_code\",\"name\",\"category_id\",\"product_url\",\"per_price\",\"quantity_per_box\",\"quantity_per_pack\",\"min_quantity\",\"min_batch_price\") VALUES (?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_13 = conn_tDBOutput_13.prepareStatement(insert_tDBOutput_13);
	    resourceMap.put("pstmt_tDBOutput_13", pstmt_tDBOutput_13);
	    

 



/**
 * [tDBOutput_13 begin ] stop
 */




	
	/**
	 * [tDBOutput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_15", false);
		start_Hash.put("tDBOutput_15", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_products");
					}
				
		int tos_count_tDBOutput_15 = 0;
		





String dbschema_tDBOutput_15 = null;
	dbschema_tDBOutput_15 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_15 = null;
if(dbschema_tDBOutput_15 == null || dbschema_tDBOutput_15.trim().length() == 0) {
	tableName_tDBOutput_15 = ("upack_products");
} else {
	tableName_tDBOutput_15 = dbschema_tDBOutput_15 + "\".\"" + ("upack_products");
}

        int updateKeyCount_tDBOutput_15 = 1;
        if(updateKeyCount_tDBOutput_15 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_15 == 10 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_15 = 0;
int nb_line_update_tDBOutput_15 = 0;
int nb_line_inserted_tDBOutput_15 = 0;
int nb_line_deleted_tDBOutput_15 = 0;
int nb_line_rejected_tDBOutput_15 = 0;

int deletedCount_tDBOutput_15=0;
int updatedCount_tDBOutput_15=0;
int insertedCount_tDBOutput_15=0;
int rowsToCommitCount_tDBOutput_15=0;
int rejectedCount_tDBOutput_15=0;

boolean whetherReject_tDBOutput_15 = false;

java.sql.Connection conn_tDBOutput_15 = null;
String dbUser_tDBOutput_15 = null;

	conn_tDBOutput_15 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_15 = 10000;
   int batchSizeCounter_tDBOutput_15=0;

int count_tDBOutput_15=0;
	    String update_tDBOutput_15 = "UPDATE \"" + tableName_tDBOutput_15 + "\" SET \"name\" = ?,\"category_id\" = ?,\"product_url\" = ?,\"per_price\" = ?,\"quantity_per_box\" = ?,\"quantity_per_pack\" = ?,\"min_quantity\" = ?,\"min_batch_price\" = ?,\"relevance\" = ? WHERE \"source_code\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_15 = conn_tDBOutput_15.prepareStatement(update_tDBOutput_15);
	    resourceMap.put("pstmt_tDBOutput_15", pstmt_tDBOutput_15);
	    

 



/**
 * [tDBOutput_15 begin ] stop
 */



	
	/**
	 * [tMap_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_13", false);
		start_Hash.put("tMap_13", System.currentTimeMillis());
		
	
	currentComponent="tMap_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"products");
					}
				
		int tos_count_tMap_13 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) 
					globalMap.get( "tHash_Lookup_row23" ))
					;					
					
	

row23Struct row23HashKey = new row23Struct();
row23Struct row23Default = new row23Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_13__Struct  {
}
Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_productsStruct insert_products_tmp = new insert_productsStruct();
update_productsStruct update_products_tmp = new update_productsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_13 begin ] stop
 */



	
	/**
	 * [tMap_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_15", false);
		start_Hash.put("tMap_15", System.currentTimeMillis());
		
	
	currentComponent="tMap_15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tMap_15 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) 
					globalMap.get( "tHash_Lookup_row26" ))
					;					
					
	

row26Struct row26HashKey = new row26Struct();
row26Struct row26Default = new row26Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_15__Struct  {
}
Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
// ###############################

// ###############################
// # Outputs initialization
productsStruct products_tmp = new productsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_15 begin ] stop
 */



	
	/**
	 * [tDBInput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_22", false);
		start_Hash.put("tDBInput_22", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_22";

	
		int tos_count_tDBInput_22 = 0;
		
	
    
	
		    int nb_line_tDBInput_22 = 0;
		    java.sql.Connection conn_tDBInput_22 = null;
				conn_tDBInput_22 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_22 = conn_tDBInput_22.createStatement();

		    String dbquery_tDBInput_22 = "select\n	source_code,\n	title,\n	category_id,\n	product_url,\n	per_price,\n	quantity_per_box,\n	quantity_per_pack,\n	min"
+"_quantity,\n	min_batch_price	,\n	now() as relevance\nfrom "+context.schema_in+".upack_products\nWHERE source_code IS NOT null;";
		    

            	globalMap.put("tDBInput_22_QUERY",dbquery_tDBInput_22);
		    java.sql.ResultSet rs_tDBInput_22 = null;

		    try {
		    	rs_tDBInput_22 = stmt_tDBInput_22.executeQuery(dbquery_tDBInput_22);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_22 = rs_tDBInput_22.getMetaData();
		    	int colQtyInRs_tDBInput_22 = rsmd_tDBInput_22.getColumnCount();

		    String tmpContent_tDBInput_22 = null;
		    
		    
		    while (rs_tDBInput_22.next()) {
		        nb_line_tDBInput_22++;
		        
							if(colQtyInRs_tDBInput_22 < 1) {
								row22.source_code = null;
							} else {
	                         		
        	row22.source_code = routines.system.JDBCUtil.getString(rs_tDBInput_22, 1, false);
		                    }
							if(colQtyInRs_tDBInput_22 < 2) {
								row22.title = null;
							} else {
	                         		
        	row22.title = routines.system.JDBCUtil.getString(rs_tDBInput_22, 2, false);
		                    }
							if(colQtyInRs_tDBInput_22 < 3) {
								row22.category_id = null;
							} else {
		                          
            row22.category_id = rs_tDBInput_22.getInt(3);
            if(rs_tDBInput_22.wasNull()){
                    row22.category_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_22 < 4) {
								row22.product_url = null;
							} else {
	                         		
        	row22.product_url = routines.system.JDBCUtil.getString(rs_tDBInput_22, 4, false);
		                    }
							if(colQtyInRs_tDBInput_22 < 5) {
								row22.per_price = null;
							} else {
		                          
            row22.per_price = rs_tDBInput_22.getFloat(5);
            if(rs_tDBInput_22.wasNull()){
                    row22.per_price = null;
            }
		                    }
							if(colQtyInRs_tDBInput_22 < 6) {
								row22.quantity_per_box = null;
							} else {
		                          
            row22.quantity_per_box = rs_tDBInput_22.getInt(6);
            if(rs_tDBInput_22.wasNull()){
                    row22.quantity_per_box = null;
            }
		                    }
							if(colQtyInRs_tDBInput_22 < 7) {
								row22.quantity_per_pack = null;
							} else {
		                          
            row22.quantity_per_pack = rs_tDBInput_22.getInt(7);
            if(rs_tDBInput_22.wasNull()){
                    row22.quantity_per_pack = null;
            }
		                    }
							if(colQtyInRs_tDBInput_22 < 8) {
								row22.min_quantity = null;
							} else {
		                          
            row22.min_quantity = rs_tDBInput_22.getInt(8);
            if(rs_tDBInput_22.wasNull()){
                    row22.min_quantity = null;
            }
		                    }
							if(colQtyInRs_tDBInput_22 < 9) {
								row22.min_batch_price = null;
							} else {
		                          
            row22.min_batch_price = rs_tDBInput_22.getFloat(9);
            if(rs_tDBInput_22.wasNull()){
                    row22.min_batch_price = null;
            }
		                    }
							if(colQtyInRs_tDBInput_22 < 10) {
								row22.relevance = null;
							} else {
										
			row22.relevance = routines.system.JDBCUtil.getDate(rs_tDBInput_22, 10);
		                    }
					


 



/**
 * [tDBInput_22 begin ] stop
 */
	
	/**
	 * [tDBInput_22 main ] start
	 */

	

	
	
	currentComponent="tDBInput_22";

	

 


	tos_count_tDBInput_22++;

/**
 * [tDBInput_22 main ] stop
 */
	
	/**
	 * [tDBInput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_22";

	

 



/**
 * [tDBInput_22 process_data_begin ] stop
 */

	
	/**
	 * [tMap_15 main ] start
	 */

	

	
	
	currentComponent="tMap_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_15 = false;
		  boolean mainRowRejected_tMap_15 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row26" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow26 = false;
       		  	    	
       		  	    	
 							row26Struct row26ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_15) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_15 = false;
								
                        		    		    row26HashKey.category_id = row22.category_id ;
                        		    		

								
		                        	row26HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row26.lookup( row26HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row26.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_15 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row26 != null && tHash_Lookup_row26.getCount(row26HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row26' and it contains more one result from keys :  row26.category_id = '" + row26HashKey.category_id + "'");
								} // G 071
							

							row26Struct row26 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row26Struct fromLookup_row26 = null;
							row26 = row26Default;
										 
							
								 
							
							
								if (tHash_Lookup_row26 !=null && tHash_Lookup_row26.hasNext()) { // G 099
								
							
								
								fromLookup_row26 = tHash_Lookup_row26.next();

							
							
								} // G 099
							
							

							if(fromLookup_row26 != null) {
								row26 = fromLookup_row26;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_15__Struct Var = Var__tMap_15;// ###############################
        // ###############################
        // # Output tables

products = null;

if(!rejectedInnerJoin_tMap_15 ) {

// # Output table : 'products'
products_tmp.source_code = row22.source_code ;
products_tmp.title = row22.title ;
products_tmp.category_id = row26.prod_id ;
products_tmp.product_url = row22.product_url ;
products_tmp.per_price = row22.per_price ;
products_tmp.quantity_per_box = row22.quantity_per_box ;
products_tmp.quantity_per_pack = row22.quantity_per_pack ;
products_tmp.min_quantity = row22.min_quantity ;
products_tmp.min_batch_price = row22.min_batch_price ;
products_tmp.relevance = row22.relevance ;
products = products_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_15 = false;










 


	tos_count_tMap_15++;

/**
 * [tMap_15 main ] stop
 */
	
	/**
	 * [tMap_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 process_data_begin ] stop
 */
// Start of branch "products"
if(products != null) { 



	
	/**
	 * [tMap_13 main ] start
	 */

	

	
	
	currentComponent="tMap_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"products"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_13 = false;
		  boolean mainRowRejected_tMap_13 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row23" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow23 = false;
       		  	    	
       		  	    	
 							row23Struct row23ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_13) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_13 = false;
								
                        		    		    row23HashKey.source_code = products.source_code ;
                        		    		

								
		                        	row23HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row23.lookup( row23HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row23.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_13 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row23 != null && tHash_Lookup_row23.getCount(row23HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row23' and it contains more one result from keys :  row23.source_code = '" + row23HashKey.source_code + "'");
								} // G 071
							

							row23Struct row23 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row23Struct fromLookup_row23 = null;
							row23 = row23Default;
										 
							
								 
							
							
								if (tHash_Lookup_row23 !=null && tHash_Lookup_row23.hasNext()) { // G 099
								
							
								
								fromLookup_row23 = tHash_Lookup_row23.next();

							
							
								} // G 099
							
							

							if(fromLookup_row23 != null) {
								row23 = fromLookup_row23;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
        // ###############################
        // # Output tables

update_products = null;
insert_products = null;

if(!rejectedInnerJoin_tMap_13 ) {

// # Output table : 'update_products'
update_products_tmp.source_code = products.source_code ;
update_products_tmp.name = products.title ;
update_products_tmp.category_id = products.category_id ;
update_products_tmp.product_url = products.product_url ;
update_products_tmp.per_price = products.per_price ;
update_products_tmp.quantity_per_box = products.quantity_per_box ;
update_products_tmp.quantity_per_pack = products.quantity_per_pack ;
update_products_tmp.min_quantity = products.min_quantity ;
update_products_tmp.min_batch_price = products.min_batch_price ;
update_products_tmp.relevance = products.relevance ;
update_products = update_products_tmp;
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'insert_products'
// # Filter conditions 
if( rejectedInnerJoin_tMap_13 ) {
insert_products_tmp.source_code = products.source_code ;
insert_products_tmp.name = products.title ;
insert_products_tmp.category_id = products.category_id ;
insert_products_tmp.product_url = products.product_url ;
insert_products_tmp.per_price = products.per_price ;
insert_products_tmp.quantity_per_box = products.quantity_per_box ;
insert_products_tmp.quantity_per_pack = products.quantity_per_pack ;
insert_products_tmp.min_quantity = products.min_quantity ;
insert_products_tmp.min_batch_price = products.min_batch_price ;
insert_products = insert_products_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_13 = false;










 


	tos_count_tMap_13++;

/**
 * [tMap_13 main ] stop
 */
	
	/**
	 * [tMap_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_begin ] stop
 */
// Start of branch "insert_products"
if(insert_products != null) { 



	
	/**
	 * [tDBOutput_13 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_products"
						
						);
					}
					



        whetherReject_tDBOutput_13 = false;
                    if(insert_products.source_code == null) {
pstmt_tDBOutput_13.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_13.setString(1, insert_products.source_code);
}

                    if(insert_products.name == null) {
pstmt_tDBOutput_13.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_13.setString(2, insert_products.name);
}

                    if(insert_products.category_id == null) {
pstmt_tDBOutput_13.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_13.setInt(3, insert_products.category_id);
}

                    if(insert_products.product_url == null) {
pstmt_tDBOutput_13.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_13.setString(4, insert_products.product_url);
}

                    if(insert_products.per_price == null) {
pstmt_tDBOutput_13.setNull(5, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_13.setFloat(5, insert_products.per_price);
}

                    if(insert_products.quantity_per_box == null) {
pstmt_tDBOutput_13.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_13.setInt(6, insert_products.quantity_per_box);
}

                    if(insert_products.quantity_per_pack == null) {
pstmt_tDBOutput_13.setNull(7, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_13.setInt(7, insert_products.quantity_per_pack);
}

                    if(insert_products.min_quantity == null) {
pstmt_tDBOutput_13.setNull(8, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_13.setInt(8, insert_products.min_quantity);
}

                    if(insert_products.min_batch_price == null) {
pstmt_tDBOutput_13.setNull(9, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_13.setFloat(9, insert_products.min_batch_price);
}

			
    		pstmt_tDBOutput_13.addBatch();
    		nb_line_tDBOutput_13++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_13++;
    		  
    			if ((batchSize_tDBOutput_13 > 0) && (batchSize_tDBOutput_13 <= batchSizeCounter_tDBOutput_13)) {
                try {
						int countSum_tDBOutput_13 = 0;
						    
						for(int countEach_tDBOutput_13: pstmt_tDBOutput_13.executeBatch()) {
							countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
						}
				    	rowsToCommitCount_tDBOutput_13 += countSum_tDBOutput_13;
				    	
				    		insertedCount_tDBOutput_13 += countSum_tDBOutput_13;
				    	
            	    	batchSizeCounter_tDBOutput_13 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_13){
globalMap.put("tDBOutput_13_ERROR_MESSAGE",e_tDBOutput_13.getMessage());
				    	java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13.getNextException(),sqle_tDBOutput_13=null;
				    	String errormessage_tDBOutput_13;
						if (ne_tDBOutput_13 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_13 = new java.sql.SQLException(e_tDBOutput_13.getMessage() + "\ncaused by: " + ne_tDBOutput_13.getMessage(), ne_tDBOutput_13.getSQLState(), ne_tDBOutput_13.getErrorCode(), ne_tDBOutput_13);
							errormessage_tDBOutput_13 = sqle_tDBOutput_13.getMessage();
						}else{
							errormessage_tDBOutput_13 = e_tDBOutput_13.getMessage();
						}
				    	
				    		if (ne_tDBOutput_13 != null) {
				    			throw(sqle_tDBOutput_13);
				    		}else{
				            	throw(e_tDBOutput_13);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_13++;

/**
 * [tDBOutput_13 main ] stop
 */
	
	/**
	 * [tDBOutput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	

 



/**
 * [tDBOutput_13 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	

 



/**
 * [tDBOutput_13 process_data_end ] stop
 */

} // End of branch "insert_products"




// Start of branch "update_products"
if(update_products != null) { 



	
	/**
	 * [tDBOutput_15 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_products"
						
						);
					}
					



        whetherReject_tDBOutput_15 = false;
                    if(update_products.name == null) {
pstmt_tDBOutput_15.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_15.setString(1, update_products.name);
}

                    if(update_products.category_id == null) {
pstmt_tDBOutput_15.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_15.setInt(2, update_products.category_id);
}

                    if(update_products.product_url == null) {
pstmt_tDBOutput_15.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_15.setString(3, update_products.product_url);
}

                    if(update_products.per_price == null) {
pstmt_tDBOutput_15.setNull(4, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_15.setFloat(4, update_products.per_price);
}

                    if(update_products.quantity_per_box == null) {
pstmt_tDBOutput_15.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_15.setInt(5, update_products.quantity_per_box);
}

                    if(update_products.quantity_per_pack == null) {
pstmt_tDBOutput_15.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_15.setInt(6, update_products.quantity_per_pack);
}

                    if(update_products.min_quantity == null) {
pstmt_tDBOutput_15.setNull(7, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_15.setInt(7, update_products.min_quantity);
}

                    if(update_products.min_batch_price == null) {
pstmt_tDBOutput_15.setNull(8, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_15.setFloat(8, update_products.min_batch_price);
}

                    if(update_products.relevance != null) {
pstmt_tDBOutput_15.setTimestamp(9, new java.sql.Timestamp(update_products.relevance.getTime()));
} else {
pstmt_tDBOutput_15.setNull(9, java.sql.Types.TIMESTAMP);
}

                    if(update_products.source_code == null) {
pstmt_tDBOutput_15.setNull(10 + count_tDBOutput_15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_15.setString(10 + count_tDBOutput_15, update_products.source_code);
}


    		pstmt_tDBOutput_15.addBatch();
    		nb_line_tDBOutput_15++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_15++;
    		  
    			if ((batchSize_tDBOutput_15 > 0) && (batchSize_tDBOutput_15 <= batchSizeCounter_tDBOutput_15)) {
                try {
						int countSum_tDBOutput_15 = 0;
						    
						for(int countEach_tDBOutput_15: pstmt_tDBOutput_15.executeBatch()) {
							countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0 : countEach_tDBOutput_15);
						}
				    	rowsToCommitCount_tDBOutput_15 += countSum_tDBOutput_15;
				    	
				    		updatedCount_tDBOutput_15 += countSum_tDBOutput_15;
				    	
            	    	batchSizeCounter_tDBOutput_15 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_15){
globalMap.put("tDBOutput_15_ERROR_MESSAGE",e_tDBOutput_15.getMessage());
				    	java.sql.SQLException ne_tDBOutput_15 = e_tDBOutput_15.getNextException(),sqle_tDBOutput_15=null;
				    	String errormessage_tDBOutput_15;
						if (ne_tDBOutput_15 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_15 = new java.sql.SQLException(e_tDBOutput_15.getMessage() + "\ncaused by: " + ne_tDBOutput_15.getMessage(), ne_tDBOutput_15.getSQLState(), ne_tDBOutput_15.getErrorCode(), ne_tDBOutput_15);
							errormessage_tDBOutput_15 = sqle_tDBOutput_15.getMessage();
						}else{
							errormessage_tDBOutput_15 = e_tDBOutput_15.getMessage();
						}
				    	
				    		if (ne_tDBOutput_15 != null) {
				    			throw(sqle_tDBOutput_15);
				    		}else{
				            	throw(e_tDBOutput_15);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_15++;

/**
 * [tDBOutput_15 main ] stop
 */
	
	/**
	 * [tDBOutput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_15";

	

 



/**
 * [tDBOutput_15 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_15";

	

 



/**
 * [tDBOutput_15 process_data_end ] stop
 */

} // End of branch "update_products"




	
	/**
	 * [tMap_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_end ] stop
 */

} // End of branch "products"




	
	/**
	 * [tMap_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_22";

	

 



/**
 * [tDBInput_22 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_22 end ] start
	 */

	

	
	
	currentComponent="tDBInput_22";

	

	}
}finally{
	if (rs_tDBInput_22 != null) {
		rs_tDBInput_22.close();
	}
	if (stmt_tDBInput_22 != null) {
		stmt_tDBInput_22.close();
	}
}
globalMap.put("tDBInput_22_NB_LINE",nb_line_tDBInput_22);
 

ok_Hash.put("tDBInput_22", true);
end_Hash.put("tDBInput_22", System.currentTimeMillis());




/**
 * [tDBInput_22 end ] stop
 */

	
	/**
	 * [tMap_15 end ] start
	 */

	

	
	
	currentComponent="tMap_15";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row26 != null) {
						tHash_Lookup_row26.endGet();
					}
					globalMap.remove( "tHash_Lookup_row26" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tMap_15", true);
end_Hash.put("tMap_15", System.currentTimeMillis());




/**
 * [tMap_15 end ] stop
 */

	
	/**
	 * [tMap_13 end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row23 != null) {
						tHash_Lookup_row23.endGet();
					}
					globalMap.remove( "tHash_Lookup_row23" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"products");
			  	}
			  	
 

ok_Hash.put("tMap_13", true);
end_Hash.put("tMap_13", System.currentTimeMillis());




/**
 * [tMap_13 end ] stop
 */

	
	/**
	 * [tDBOutput_13 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	



	    try {
				int countSum_tDBOutput_13 = 0;
				if (pstmt_tDBOutput_13 != null && batchSizeCounter_tDBOutput_13 > 0) {
						
					for(int countEach_tDBOutput_13: pstmt_tDBOutput_13.executeBatch()) {
						countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
					}
					rowsToCommitCount_tDBOutput_13 += countSum_tDBOutput_13;
						
				}
		    	
		    		insertedCount_tDBOutput_13 += countSum_tDBOutput_13;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_13){
globalMap.put("tDBOutput_13_ERROR_MESSAGE",e_tDBOutput_13.getMessage());
	    	java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13.getNextException(),sqle_tDBOutput_13=null;
	    	String errormessage_tDBOutput_13;
			if (ne_tDBOutput_13 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_13 = new java.sql.SQLException(e_tDBOutput_13.getMessage() + "\ncaused by: " + ne_tDBOutput_13.getMessage(), ne_tDBOutput_13.getSQLState(), ne_tDBOutput_13.getErrorCode(), ne_tDBOutput_13);
				errormessage_tDBOutput_13 = sqle_tDBOutput_13.getMessage();
			}else{
				errormessage_tDBOutput_13 = e_tDBOutput_13.getMessage();
			}
	    	
	    		if (ne_tDBOutput_13 != null) {
	    			throw(sqle_tDBOutput_13);
	    		}else{
	            	throw(e_tDBOutput_13);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_13 != null) {
        		
            pstmt_tDBOutput_13.close();
            resourceMap.remove("pstmt_tDBOutput_13");
        }
    resourceMap.put("statementClosed_tDBOutput_13", true);

	nb_line_deleted_tDBOutput_13=nb_line_deleted_tDBOutput_13+ deletedCount_tDBOutput_13;
	nb_line_update_tDBOutput_13=nb_line_update_tDBOutput_13 + updatedCount_tDBOutput_13;
	nb_line_inserted_tDBOutput_13=nb_line_inserted_tDBOutput_13 + insertedCount_tDBOutput_13;
	nb_line_rejected_tDBOutput_13=nb_line_rejected_tDBOutput_13 + rejectedCount_tDBOutput_13;
	
        globalMap.put("tDBOutput_13_NB_LINE",nb_line_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_UPDATED",nb_line_update_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_DELETED",nb_line_deleted_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_13);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_products");
			  	}
			  	
 

ok_Hash.put("tDBOutput_13", true);
end_Hash.put("tDBOutput_13", System.currentTimeMillis());




/**
 * [tDBOutput_13 end ] stop
 */




	
	/**
	 * [tDBOutput_15 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_15";

	



	    try {
				int countSum_tDBOutput_15 = 0;
				if (pstmt_tDBOutput_15 != null && batchSizeCounter_tDBOutput_15 > 0) {
						
					for(int countEach_tDBOutput_15: pstmt_tDBOutput_15.executeBatch()) {
						countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0 : countEach_tDBOutput_15);
					}
					rowsToCommitCount_tDBOutput_15 += countSum_tDBOutput_15;
						
				}
		    	
		    		updatedCount_tDBOutput_15 += countSum_tDBOutput_15;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_15){
globalMap.put("tDBOutput_15_ERROR_MESSAGE",e_tDBOutput_15.getMessage());
	    	java.sql.SQLException ne_tDBOutput_15 = e_tDBOutput_15.getNextException(),sqle_tDBOutput_15=null;
	    	String errormessage_tDBOutput_15;
			if (ne_tDBOutput_15 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_15 = new java.sql.SQLException(e_tDBOutput_15.getMessage() + "\ncaused by: " + ne_tDBOutput_15.getMessage(), ne_tDBOutput_15.getSQLState(), ne_tDBOutput_15.getErrorCode(), ne_tDBOutput_15);
				errormessage_tDBOutput_15 = sqle_tDBOutput_15.getMessage();
			}else{
				errormessage_tDBOutput_15 = e_tDBOutput_15.getMessage();
			}
	    	
	    		if (ne_tDBOutput_15 != null) {
	    			throw(sqle_tDBOutput_15);
	    		}else{
	            	throw(e_tDBOutput_15);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_15 != null) {
        		
            pstmt_tDBOutput_15.close();
            resourceMap.remove("pstmt_tDBOutput_15");
        }
    resourceMap.put("statementClosed_tDBOutput_15", true);

	nb_line_deleted_tDBOutput_15=nb_line_deleted_tDBOutput_15+ deletedCount_tDBOutput_15;
	nb_line_update_tDBOutput_15=nb_line_update_tDBOutput_15 + updatedCount_tDBOutput_15;
	nb_line_inserted_tDBOutput_15=nb_line_inserted_tDBOutput_15 + insertedCount_tDBOutput_15;
	nb_line_rejected_tDBOutput_15=nb_line_rejected_tDBOutput_15 + rejectedCount_tDBOutput_15;
	
        globalMap.put("tDBOutput_15_NB_LINE",nb_line_tDBOutput_15);
        globalMap.put("tDBOutput_15_NB_LINE_UPDATED",nb_line_update_tDBOutput_15);
        globalMap.put("tDBOutput_15_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_15);
        globalMap.put("tDBOutput_15_NB_LINE_DELETED",nb_line_deleted_tDBOutput_15);
        globalMap.put("tDBOutput_15_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_15);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_products");
			  	}
			  	
 

ok_Hash.put("tDBOutput_15", true);
end_Hash.put("tDBOutput_15", System.currentTimeMillis());




/**
 * [tDBOutput_15 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_22:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk15", 0, "ok");
								} 
							
							tDBInput_24Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_13"
					     			globalMap.remove("tHash_Lookup_row23"); 
				     			
					     			//free memory for "tMap_15"
					     			globalMap.remove("tHash_Lookup_row26"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_22 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_22";

	

 



/**
 * [tDBInput_22 finally ] stop
 */

	
	/**
	 * [tMap_15 finally ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 finally ] stop
 */

	
	/**
	 * [tMap_13 finally ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 finally ] stop
 */

	
	/**
	 * [tDBOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	



    if (resourceMap.get("statementClosed_tDBOutput_13") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_13 = null;
                if ((pstmtToClose_tDBOutput_13 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_13")) != null) {
                    pstmtToClose_tDBOutput_13.close();
                }
    }
 



/**
 * [tDBOutput_13 finally ] stop
 */




	
	/**
	 * [tDBOutput_15 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_15";

	



    if (resourceMap.get("statementClosed_tDBOutput_15") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_15 = null;
                if ((pstmtToClose_tDBOutput_15 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_15")) != null) {
                    pstmtToClose_tDBOutput_15.close();
                }
    }
 



/**
 * [tDBOutput_15 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_22_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfsubjects4Struct implements routines.system.IPersistableRow<copyOfsubjects4Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public String name;

				public String getName () {
					return this.name;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfsubjects4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public String characteristic;

				public String getCharacteristic () {
					return this.characteristic;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.characteristic = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.characteristic = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.characteristic,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.characteristic,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("characteristic="+characteristic);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_24Struct implements routines.system.IPersistableRow<after_tDBInput_24Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public String characteristic;

				public String getCharacteristic () {
					return this.characteristic;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.characteristic = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.characteristic = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.characteristic,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.characteristic,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("characteristic="+characteristic);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_24_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_25Process(globalMap);

		row24Struct row24 = new row24Struct();
copyOfsubjects4Struct copyOfsubjects4 = new copyOfsubjects4Struct();





	
	/**
	 * [tDBOutput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_16", false);
		start_Hash.put("tDBOutput_16", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfsubjects4");
					}
				
		int tos_count_tDBOutput_16 = 0;
		





String dbschema_tDBOutput_16 = null;
	dbschema_tDBOutput_16 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_16 = null;
if(dbschema_tDBOutput_16 == null || dbschema_tDBOutput_16.trim().length() == 0) {
	tableName_tDBOutput_16 = ("attributes");
} else {
	tableName_tDBOutput_16 = dbschema_tDBOutput_16 + "\".\"" + ("attributes");
}


int nb_line_tDBOutput_16 = 0;
int nb_line_update_tDBOutput_16 = 0;
int nb_line_inserted_tDBOutput_16 = 0;
int nb_line_deleted_tDBOutput_16 = 0;
int nb_line_rejected_tDBOutput_16 = 0;

int deletedCount_tDBOutput_16=0;
int updatedCount_tDBOutput_16=0;
int insertedCount_tDBOutput_16=0;
int rowsToCommitCount_tDBOutput_16=0;
int rejectedCount_tDBOutput_16=0;

boolean whetherReject_tDBOutput_16 = false;

java.sql.Connection conn_tDBOutput_16 = null;
String dbUser_tDBOutput_16 = null;

	conn_tDBOutput_16 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_16 = 10000;
   int batchSizeCounter_tDBOutput_16=0;

int count_tDBOutput_16=0;
	    String insert_tDBOutput_16 = "INSERT INTO \"" + tableName_tDBOutput_16 + "\" (\"name\") VALUES (?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_16 = conn_tDBOutput_16.prepareStatement(insert_tDBOutput_16);
	    resourceMap.put("pstmt_tDBOutput_16", pstmt_tDBOutput_16);
	    

 



/**
 * [tDBOutput_16 begin ] stop
 */



	
	/**
	 * [tMap_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_14", false);
		start_Hash.put("tMap_14", System.currentTimeMillis());
		
	
	currentComponent="tMap_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tMap_14 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) 
					globalMap.get( "tHash_Lookup_row25" ))
					;					
					
	

row25Struct row25HashKey = new row25Struct();
row25Struct row25Default = new row25Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_14__Struct  {
}
Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfsubjects4Struct copyOfsubjects4_tmp = new copyOfsubjects4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_14 begin ] stop
 */



	
	/**
	 * [tDBInput_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_24", false);
		start_Hash.put("tDBInput_24", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_24";

	
		int tos_count_tDBInput_24 = 0;
		
	
    
	
		    int nb_line_tDBInput_24 = 0;
		    java.sql.Connection conn_tDBInput_24 = null;
				conn_tDBInput_24 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_24 = conn_tDBInput_24.createStatement();

		    String dbquery_tDBInput_24 = "select distinct on (characteristic) \n	characteristic\nfrom "+context.schema_in+".upack_characteristics\nwhere characteristic is not NULL;";
		    

            	globalMap.put("tDBInput_24_QUERY",dbquery_tDBInput_24);
		    java.sql.ResultSet rs_tDBInput_24 = null;

		    try {
		    	rs_tDBInput_24 = stmt_tDBInput_24.executeQuery(dbquery_tDBInput_24);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_24 = rs_tDBInput_24.getMetaData();
		    	int colQtyInRs_tDBInput_24 = rsmd_tDBInput_24.getColumnCount();

		    String tmpContent_tDBInput_24 = null;
		    
		    
		    while (rs_tDBInput_24.next()) {
		        nb_line_tDBInput_24++;
		        
							if(colQtyInRs_tDBInput_24 < 1) {
								row24.characteristic = null;
							} else {
	                         		
        	row24.characteristic = routines.system.JDBCUtil.getString(rs_tDBInput_24, 1, false);
		                    }
					


 



/**
 * [tDBInput_24 begin ] stop
 */
	
	/**
	 * [tDBInput_24 main ] start
	 */

	

	
	
	currentComponent="tDBInput_24";

	

 


	tos_count_tDBInput_24++;

/**
 * [tDBInput_24 main ] stop
 */
	
	/**
	 * [tDBInput_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_24";

	

 



/**
 * [tDBInput_24 process_data_begin ] stop
 */

	
	/**
	 * [tMap_14 main ] start
	 */

	

	
	
	currentComponent="tMap_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row24"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_14 = false;
		  boolean mainRowRejected_tMap_14 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row25" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow25 = false;
       		  	    	
       		  	    	
 							row25Struct row25ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_14) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_14 = false;
								
                        		    		    row25HashKey.name = row24.characteristic ;
                        		    		

								
		                        	row25HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row25.lookup( row25HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row25.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_14 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row25 != null && tHash_Lookup_row25.getCount(row25HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row25' and it contains more one result from keys :  row25.name = '" + row25HashKey.name + "'");
								} // G 071
							

							row25Struct row25 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row25Struct fromLookup_row25 = null;
							row25 = row25Default;
										 
							
								 
							
							
								if (tHash_Lookup_row25 !=null && tHash_Lookup_row25.hasNext()) { // G 099
								
							
								
								fromLookup_row25 = tHash_Lookup_row25.next();

							
							
								} // G 099
							
							

							if(fromLookup_row25 != null) {
								row25 = fromLookup_row25;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
        // ###############################
        // # Output tables

copyOfsubjects4 = null;

if(!rejectedInnerJoin_tMap_14 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'copyOfsubjects4'
// # Filter conditions 
if( rejectedInnerJoin_tMap_14 ) {
copyOfsubjects4_tmp.name = row24.characteristic ;
copyOfsubjects4 = copyOfsubjects4_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_14 = false;










 


	tos_count_tMap_14++;

/**
 * [tMap_14 main ] stop
 */
	
	/**
	 * [tMap_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 process_data_begin ] stop
 */
// Start of branch "copyOfsubjects4"
if(copyOfsubjects4 != null) { 



	
	/**
	 * [tDBOutput_16 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfsubjects4"
						
						);
					}
					



        whetherReject_tDBOutput_16 = false;
                    if(copyOfsubjects4.name == null) {
pstmt_tDBOutput_16.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_16.setString(1, copyOfsubjects4.name);
}

			
    		pstmt_tDBOutput_16.addBatch();
    		nb_line_tDBOutput_16++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_16++;
    		  
    			if ((batchSize_tDBOutput_16 > 0) && (batchSize_tDBOutput_16 <= batchSizeCounter_tDBOutput_16)) {
                try {
						int countSum_tDBOutput_16 = 0;
						    
						for(int countEach_tDBOutput_16: pstmt_tDBOutput_16.executeBatch()) {
							countSum_tDBOutput_16 += (countEach_tDBOutput_16 < 0 ? 0 : countEach_tDBOutput_16);
						}
				    	rowsToCommitCount_tDBOutput_16 += countSum_tDBOutput_16;
				    	
				    		insertedCount_tDBOutput_16 += countSum_tDBOutput_16;
				    	
            	    	batchSizeCounter_tDBOutput_16 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_16){
globalMap.put("tDBOutput_16_ERROR_MESSAGE",e_tDBOutput_16.getMessage());
				    	java.sql.SQLException ne_tDBOutput_16 = e_tDBOutput_16.getNextException(),sqle_tDBOutput_16=null;
				    	String errormessage_tDBOutput_16;
						if (ne_tDBOutput_16 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_16 = new java.sql.SQLException(e_tDBOutput_16.getMessage() + "\ncaused by: " + ne_tDBOutput_16.getMessage(), ne_tDBOutput_16.getSQLState(), ne_tDBOutput_16.getErrorCode(), ne_tDBOutput_16);
							errormessage_tDBOutput_16 = sqle_tDBOutput_16.getMessage();
						}else{
							errormessage_tDBOutput_16 = e_tDBOutput_16.getMessage();
						}
				    	
				    		if (ne_tDBOutput_16 != null) {
				    			throw(sqle_tDBOutput_16);
				    		}else{
				            	throw(e_tDBOutput_16);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_16++;

/**
 * [tDBOutput_16 main ] stop
 */
	
	/**
	 * [tDBOutput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_16";

	

 



/**
 * [tDBOutput_16 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_16";

	

 



/**
 * [tDBOutput_16 process_data_end ] stop
 */

} // End of branch "copyOfsubjects4"




	
	/**
	 * [tMap_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_24";

	

 



/**
 * [tDBInput_24 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_24 end ] start
	 */

	

	
	
	currentComponent="tDBInput_24";

	

	}
}finally{
	if (rs_tDBInput_24 != null) {
		rs_tDBInput_24.close();
	}
	if (stmt_tDBInput_24 != null) {
		stmt_tDBInput_24.close();
	}
}
globalMap.put("tDBInput_24_NB_LINE",nb_line_tDBInput_24);
 

ok_Hash.put("tDBInput_24", true);
end_Hash.put("tDBInput_24", System.currentTimeMillis());




/**
 * [tDBInput_24 end ] stop
 */

	
	/**
	 * [tMap_14 end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row25 != null) {
						tHash_Lookup_row25.endGet();
					}
					globalMap.remove( "tHash_Lookup_row25" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tMap_14", true);
end_Hash.put("tMap_14", System.currentTimeMillis());




/**
 * [tMap_14 end ] stop
 */

	
	/**
	 * [tDBOutput_16 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_16";

	



	    try {
				int countSum_tDBOutput_16 = 0;
				if (pstmt_tDBOutput_16 != null && batchSizeCounter_tDBOutput_16 > 0) {
						
					for(int countEach_tDBOutput_16: pstmt_tDBOutput_16.executeBatch()) {
						countSum_tDBOutput_16 += (countEach_tDBOutput_16 < 0 ? 0 : countEach_tDBOutput_16);
					}
					rowsToCommitCount_tDBOutput_16 += countSum_tDBOutput_16;
						
				}
		    	
		    		insertedCount_tDBOutput_16 += countSum_tDBOutput_16;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_16){
globalMap.put("tDBOutput_16_ERROR_MESSAGE",e_tDBOutput_16.getMessage());
	    	java.sql.SQLException ne_tDBOutput_16 = e_tDBOutput_16.getNextException(),sqle_tDBOutput_16=null;
	    	String errormessage_tDBOutput_16;
			if (ne_tDBOutput_16 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_16 = new java.sql.SQLException(e_tDBOutput_16.getMessage() + "\ncaused by: " + ne_tDBOutput_16.getMessage(), ne_tDBOutput_16.getSQLState(), ne_tDBOutput_16.getErrorCode(), ne_tDBOutput_16);
				errormessage_tDBOutput_16 = sqle_tDBOutput_16.getMessage();
			}else{
				errormessage_tDBOutput_16 = e_tDBOutput_16.getMessage();
			}
	    	
	    		if (ne_tDBOutput_16 != null) {
	    			throw(sqle_tDBOutput_16);
	    		}else{
	            	throw(e_tDBOutput_16);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_16 != null) {
        		
            pstmt_tDBOutput_16.close();
            resourceMap.remove("pstmt_tDBOutput_16");
        }
    resourceMap.put("statementClosed_tDBOutput_16", true);

	nb_line_deleted_tDBOutput_16=nb_line_deleted_tDBOutput_16+ deletedCount_tDBOutput_16;
	nb_line_update_tDBOutput_16=nb_line_update_tDBOutput_16 + updatedCount_tDBOutput_16;
	nb_line_inserted_tDBOutput_16=nb_line_inserted_tDBOutput_16 + insertedCount_tDBOutput_16;
	nb_line_rejected_tDBOutput_16=nb_line_rejected_tDBOutput_16 + rejectedCount_tDBOutput_16;
	
        globalMap.put("tDBOutput_16_NB_LINE",nb_line_tDBOutput_16);
        globalMap.put("tDBOutput_16_NB_LINE_UPDATED",nb_line_update_tDBOutput_16);
        globalMap.put("tDBOutput_16_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_16);
        globalMap.put("tDBOutput_16_NB_LINE_DELETED",nb_line_deleted_tDBOutput_16);
        globalMap.put("tDBOutput_16_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_16);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfsubjects4");
			  	}
			  	
 

ok_Hash.put("tDBOutput_16", true);
end_Hash.put("tDBOutput_16", System.currentTimeMillis());




/**
 * [tDBOutput_16 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_24:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
								} 
							
							tDBInput_27Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_14"
					     			globalMap.remove("tHash_Lookup_row25"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_24 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_24";

	

 



/**
 * [tDBInput_24 finally ] stop
 */

	
	/**
	 * [tMap_14 finally ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 finally ] stop
 */

	
	/**
	 * [tDBOutput_16 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_16";

	



    if (resourceMap.get("statementClosed_tDBOutput_16") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_16 = null;
                if ((pstmtToClose_tDBOutput_16 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_16")) != null) {
                    pstmtToClose_tDBOutput_16.close();
                }
    }
 



/**
 * [tDBOutput_16 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_24_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfinsert_productsStruct implements routines.system.IPersistableRow<copyOfinsert_productsStruct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public Long product_id;

				public Long getProduct_id () {
					return this.product_id;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				
			    public Long characteristic_id;

				public Long getCharacteristic_id () {
					return this.characteristic_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.product_id = null;
           				} else {
           			    	this.product_id = dis.readLong();
           				}
					
					this.value = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.characteristic_id = null;
           				} else {
           			    	this.characteristic_id = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.product_id = null;
           				} else {
           			    	this.product_id = dis.readLong();
           				}
					
					this.value = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.characteristic_id = null;
           				} else {
           			    	this.characteristic_id = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.product_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.product_id);
		            	}
					
					// String
				
						writeString(this.value,dos);
					
					// Long
				
						if(this.characteristic_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.characteristic_id);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.product_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.product_id);
		            	}
					
					// String
				
						writeString(this.value,dos);
					
					// Long
				
						if(this.characteristic_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.characteristic_id);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("product_id="+String.valueOf(product_id));
		sb.append(",value="+value);
		sb.append(",characteristic_id="+String.valueOf(characteristic_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfinsert_productsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfupdate_products_0Struct implements routines.system.IPersistableRow<copyOfupdate_products_0Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long product_id;

				public Long getProduct_id () {
					return this.product_id;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				
			    public Long characteristic_id;

				public Long getCharacteristic_id () {
					return this.characteristic_id;
				}
				
			    public java.util.Date relevance;

				public java.util.Date getRelevance () {
					return this.relevance;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.product_id == null) ? 0 : this.product_id.hashCode());
					
						result = prime * result + ((this.characteristic_id == null) ? 0 : this.characteristic_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfupdate_products_0Struct other = (copyOfupdate_products_0Struct) obj;
		
						if (this.product_id == null) {
							if (other.product_id != null)
								return false;
						
						} else if (!this.product_id.equals(other.product_id))
						
							return false;
					
						if (this.characteristic_id == null) {
							if (other.characteristic_id != null)
								return false;
						
						} else if (!this.characteristic_id.equals(other.characteristic_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfupdate_products_0Struct other) {

		other.product_id = this.product_id;
	            other.value = this.value;
	            other.characteristic_id = this.characteristic_id;
	            other.relevance = this.relevance;
	            
	}

	public void copyKeysDataTo(copyOfupdate_products_0Struct other) {

		other.product_id = this.product_id;
	            	other.characteristic_id = this.characteristic_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.product_id = null;
           				} else {
           			    	this.product_id = dis.readLong();
           				}
					
					this.value = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.characteristic_id = null;
           				} else {
           			    	this.characteristic_id = dis.readLong();
           				}
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.product_id = null;
           				} else {
           			    	this.product_id = dis.readLong();
           				}
					
					this.value = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.characteristic_id = null;
           				} else {
           			    	this.characteristic_id = dis.readLong();
           				}
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.product_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.product_id);
		            	}
					
					// String
				
						writeString(this.value,dos);
					
					// Long
				
						if(this.characteristic_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.characteristic_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.product_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.product_id);
		            	}
					
					// String
				
						writeString(this.value,dos);
					
					// Long
				
						if(this.characteristic_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.characteristic_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("product_id="+String.valueOf(product_id));
		sb.append(",value="+value);
		sb.append(",characteristic_id="+String.valueOf(characteristic_id));
		sb.append(",relevance="+String.valueOf(relevance));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfupdate_products_0Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.product_id, other.product_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.characteristic_id, other.characteristic_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfproductsStruct implements routines.system.IPersistableRow<copyOfproductsStruct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public Long product_id;

				public Long getProduct_id () {
					return this.product_id;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				
			    public Long characteristic_id;

				public Long getCharacteristic_id () {
					return this.characteristic_id;
				}
				
			    public java.util.Date relevance;

				public java.util.Date getRelevance () {
					return this.relevance;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.product_id = null;
           				} else {
           			    	this.product_id = dis.readLong();
           				}
					
					this.value = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.characteristic_id = null;
           				} else {
           			    	this.characteristic_id = dis.readLong();
           				}
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.product_id = null;
           				} else {
           			    	this.product_id = dis.readLong();
           				}
					
					this.value = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.characteristic_id = null;
           				} else {
           			    	this.characteristic_id = dis.readLong();
           				}
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.product_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.product_id);
		            	}
					
					// String
				
						writeString(this.value,dos);
					
					// Long
				
						if(this.characteristic_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.characteristic_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.product_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.product_id);
		            	}
					
					// String
				
						writeString(this.value,dos);
					
					// Long
				
						if(this.characteristic_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.characteristic_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("product_id="+String.valueOf(product_id));
		sb.append(",value="+value);
		sb.append(",characteristic_id="+String.valueOf(characteristic_id));
		sb.append(",relevance="+String.valueOf(relevance));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfproductsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public String source_code;

				public String getSource_code () {
					return this.source_code;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				
			    public String characteristic;

				public String getCharacteristic () {
					return this.characteristic;
				}
				
			    public java.util.Date relevance;

				public java.util.Date getRelevance () {
					return this.relevance;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
					this.value = readString(dis);
					
					this.characteristic = readString(dis);
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
					this.value = readString(dis);
					
					this.characteristic = readString(dis);
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
					// String
				
						writeString(this.value,dos);
					
					// String
				
						writeString(this.characteristic,dos);
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
					// String
				
						writeString(this.value,dos);
					
					// String
				
						writeString(this.characteristic,dos);
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("source_code="+source_code);
		sb.append(",value="+value);
		sb.append(",characteristic="+characteristic);
		sb.append(",relevance="+String.valueOf(relevance));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_27Struct implements routines.system.IPersistableRow<after_tDBInput_27Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public String source_code;

				public String getSource_code () {
					return this.source_code;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				
			    public String characteristic;

				public String getCharacteristic () {
					return this.characteristic;
				}
				
			    public java.util.Date relevance;

				public java.util.Date getRelevance () {
					return this.relevance;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
					this.value = readString(dis);
					
					this.characteristic = readString(dis);
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
					this.value = readString(dis);
					
					this.characteristic = readString(dis);
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
					// String
				
						writeString(this.value,dos);
					
					// String
				
						writeString(this.characteristic,dos);
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
					// String
				
						writeString(this.value,dos);
					
					// String
				
						writeString(this.characteristic,dos);
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("source_code="+source_code);
		sb.append(",value="+value);
		sb.append(",characteristic="+characteristic);
		sb.append(",relevance="+String.valueOf(relevance));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_27Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_27_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_28Process(globalMap);
		tDBInput_29Process(globalMap);
		tDBInput_43Process(globalMap);

		row27Struct row27 = new row27Struct();
copyOfproductsStruct copyOfproducts = new copyOfproductsStruct();
copyOfinsert_productsStruct copyOfinsert_products = new copyOfinsert_productsStruct();
copyOfupdate_products_0Struct copyOfupdate_products_0 = new copyOfupdate_products_0Struct();






	
	/**
	 * [tDBOutput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_17", false);
		start_Hash.put("tDBOutput_17", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_17";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfinsert_products");
					}
				
		int tos_count_tDBOutput_17 = 0;
		





String dbschema_tDBOutput_17 = null;
	dbschema_tDBOutput_17 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_17 = null;
if(dbschema_tDBOutput_17 == null || dbschema_tDBOutput_17.trim().length() == 0) {
	tableName_tDBOutput_17 = ("upack_product_characteristics");
} else {
	tableName_tDBOutput_17 = dbschema_tDBOutput_17 + "\".\"" + ("upack_product_characteristics");
}


int nb_line_tDBOutput_17 = 0;
int nb_line_update_tDBOutput_17 = 0;
int nb_line_inserted_tDBOutput_17 = 0;
int nb_line_deleted_tDBOutput_17 = 0;
int nb_line_rejected_tDBOutput_17 = 0;

int deletedCount_tDBOutput_17=0;
int updatedCount_tDBOutput_17=0;
int insertedCount_tDBOutput_17=0;
int rowsToCommitCount_tDBOutput_17=0;
int rejectedCount_tDBOutput_17=0;

boolean whetherReject_tDBOutput_17 = false;

java.sql.Connection conn_tDBOutput_17 = null;
String dbUser_tDBOutput_17 = null;

	conn_tDBOutput_17 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_17 = 10000;
   int batchSizeCounter_tDBOutput_17=0;

int count_tDBOutput_17=0;
	    String insert_tDBOutput_17 = "INSERT INTO \"" + tableName_tDBOutput_17 + "\" (\"product_id\",\"value\",\"characteristic_id\") VALUES (?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_17 = conn_tDBOutput_17.prepareStatement(insert_tDBOutput_17);
	    resourceMap.put("pstmt_tDBOutput_17", pstmt_tDBOutput_17);
	    

 



/**
 * [tDBOutput_17 begin ] stop
 */




	
	/**
	 * [tDBOutput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_18", false);
		start_Hash.put("tDBOutput_18", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_18";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfupdate_products_0");
					}
				
		int tos_count_tDBOutput_18 = 0;
		





String dbschema_tDBOutput_18 = null;
	dbschema_tDBOutput_18 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_18 = null;
if(dbschema_tDBOutput_18 == null || dbschema_tDBOutput_18.trim().length() == 0) {
	tableName_tDBOutput_18 = ("upack_product_characteristics");
} else {
	tableName_tDBOutput_18 = dbschema_tDBOutput_18 + "\".\"" + ("upack_product_characteristics");
}

        int updateKeyCount_tDBOutput_18 = 2;
        if(updateKeyCount_tDBOutput_18 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_18 == 4 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_18 = 0;
int nb_line_update_tDBOutput_18 = 0;
int nb_line_inserted_tDBOutput_18 = 0;
int nb_line_deleted_tDBOutput_18 = 0;
int nb_line_rejected_tDBOutput_18 = 0;

int deletedCount_tDBOutput_18=0;
int updatedCount_tDBOutput_18=0;
int insertedCount_tDBOutput_18=0;
int rowsToCommitCount_tDBOutput_18=0;
int rejectedCount_tDBOutput_18=0;

boolean whetherReject_tDBOutput_18 = false;

java.sql.Connection conn_tDBOutput_18 = null;
String dbUser_tDBOutput_18 = null;

	conn_tDBOutput_18 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_18 = 10000;
   int batchSizeCounter_tDBOutput_18=0;

int count_tDBOutput_18=0;
	    String update_tDBOutput_18 = "UPDATE \"" + tableName_tDBOutput_18 + "\" SET \"value\" = ?,\"relevance\" = ? WHERE \"product_id\" = ? AND \"characteristic_id\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_18 = conn_tDBOutput_18.prepareStatement(update_tDBOutput_18);
	    resourceMap.put("pstmt_tDBOutput_18", pstmt_tDBOutput_18);
	    

 



/**
 * [tDBOutput_18 begin ] stop
 */



	
	/**
	 * [tMap_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_17", false);
		start_Hash.put("tMap_17", System.currentTimeMillis());
		
	
	currentComponent="tMap_17";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfproducts");
					}
				
		int tos_count_tMap_17 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct> tHash_Lookup_row29 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct>) 
					globalMap.get( "tHash_Lookup_row29" ))
					;					
					
	

row29Struct row29HashKey = new row29Struct();
row29Struct row29Default = new row29Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_17__Struct  {
}
Var__tMap_17__Struct Var__tMap_17 = new Var__tMap_17__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfinsert_productsStruct copyOfinsert_products_tmp = new copyOfinsert_productsStruct();
copyOfupdate_products_0Struct copyOfupdate_products_0_tmp = new copyOfupdate_products_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_17 begin ] stop
 */



	
	/**
	 * [tMap_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_16", false);
		start_Hash.put("tMap_16", System.currentTimeMillis());
		
	
	currentComponent="tMap_16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tMap_16 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) 
					globalMap.get( "tHash_Lookup_row28" ))
					;					
					
	

row28Struct row28HashKey = new row28Struct();
row28Struct row28Default = new row28Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct> tHash_Lookup_row42 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct>) 
					globalMap.get( "tHash_Lookup_row42" ))
					;					
					
	

row42Struct row42HashKey = new row42Struct();
row42Struct row42Default = new row42Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_16__Struct  {
}
Var__tMap_16__Struct Var__tMap_16 = new Var__tMap_16__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfproductsStruct copyOfproducts_tmp = new copyOfproductsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_16 begin ] stop
 */



	
	/**
	 * [tDBInput_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_27", false);
		start_Hash.put("tDBInput_27", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_27";

	
		int tos_count_tDBInput_27 = 0;
		
	
    
	
		    int nb_line_tDBInput_27 = 0;
		    java.sql.Connection conn_tDBInput_27 = null;
				conn_tDBInput_27 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_27 = conn_tDBInput_27.createStatement();

		    String dbquery_tDBInput_27 = "select \n	source_code, \n	value,\n	characteristic,\n	now() as relevance\nfrom "+context.schema_in+".upack_characteristics\nWHERE source_code IS NOT null;";
		    

            	globalMap.put("tDBInput_27_QUERY",dbquery_tDBInput_27);
		    java.sql.ResultSet rs_tDBInput_27 = null;

		    try {
		    	rs_tDBInput_27 = stmt_tDBInput_27.executeQuery(dbquery_tDBInput_27);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_27 = rs_tDBInput_27.getMetaData();
		    	int colQtyInRs_tDBInput_27 = rsmd_tDBInput_27.getColumnCount();

		    String tmpContent_tDBInput_27 = null;
		    
		    
		    while (rs_tDBInput_27.next()) {
		        nb_line_tDBInput_27++;
		        
							if(colQtyInRs_tDBInput_27 < 1) {
								row27.source_code = null;
							} else {
	                         		
        	row27.source_code = routines.system.JDBCUtil.getString(rs_tDBInput_27, 1, false);
		                    }
							if(colQtyInRs_tDBInput_27 < 2) {
								row27.value = null;
							} else {
	                         		
        	row27.value = routines.system.JDBCUtil.getString(rs_tDBInput_27, 2, false);
		                    }
							if(colQtyInRs_tDBInput_27 < 3) {
								row27.characteristic = null;
							} else {
	                         		
        	row27.characteristic = routines.system.JDBCUtil.getString(rs_tDBInput_27, 3, false);
		                    }
							if(colQtyInRs_tDBInput_27 < 4) {
								row27.relevance = null;
							} else {
										
			row27.relevance = routines.system.JDBCUtil.getDate(rs_tDBInput_27, 4);
		                    }
					


 



/**
 * [tDBInput_27 begin ] stop
 */
	
	/**
	 * [tDBInput_27 main ] start
	 */

	

	
	
	currentComponent="tDBInput_27";

	

 


	tos_count_tDBInput_27++;

/**
 * [tDBInput_27 main ] stop
 */
	
	/**
	 * [tDBInput_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_27";

	

 



/**
 * [tDBInput_27 process_data_begin ] stop
 */

	
	/**
	 * [tMap_16 main ] start
	 */

	

	
	
	currentComponent="tMap_16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row27"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_16 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_16 = false;
		  boolean mainRowRejected_tMap_16 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row28" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow28 = false;
       		  	    	
       		  	    	
 							row28Struct row28ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_16) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_16 = false;
								
                        		    		    row28HashKey.name = row27.characteristic ;
                        		    		

								
		                        	row28HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row28.lookup( row28HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row28.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_16 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row28 != null && tHash_Lookup_row28.getCount(row28HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row28' and it contains more one result from keys :  row28.name = '" + row28HashKey.name + "'");
								} // G 071
							

							row28Struct row28 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row28Struct fromLookup_row28 = null;
							row28 = row28Default;
										 
							
								 
							
							
								if (tHash_Lookup_row28 !=null && tHash_Lookup_row28.hasNext()) { // G 099
								
							
								
								fromLookup_row28 = tHash_Lookup_row28.next();

							
							
								} // G 099
							
							

							if(fromLookup_row28 != null) {
								row28 = fromLookup_row28;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row42" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow42 = false;
       		  	    	
       		  	    	
 							row42Struct row42ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_16) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_16 = false;
								
                        		    		    row42HashKey.source_code = row27.source_code ;
                        		    		

								
		                        	row42HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row42.lookup( row42HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row42.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_16 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row42 != null && tHash_Lookup_row42.getCount(row42HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row42' and it contains more one result from keys :  row42.source_code = '" + row42HashKey.source_code + "'");
								} // G 071
							

							row42Struct row42 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row42Struct fromLookup_row42 = null;
							row42 = row42Default;
										 
							
								 
							
							
								if (tHash_Lookup_row42 !=null && tHash_Lookup_row42.hasNext()) { // G 099
								
							
								
								fromLookup_row42 = tHash_Lookup_row42.next();

							
							
								} // G 099
							
							

							if(fromLookup_row42 != null) {
								row42 = fromLookup_row42;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_16__Struct Var = Var__tMap_16;// ###############################
        // ###############################
        // # Output tables

copyOfproducts = null;

if(!rejectedInnerJoin_tMap_16 ) {

// # Output table : 'copyOfproducts'
copyOfproducts_tmp.product_id = row42.id ;
copyOfproducts_tmp.value = row27.value ;
copyOfproducts_tmp.characteristic_id = row28.id ;
copyOfproducts_tmp.relevance = row27.relevance ;
copyOfproducts = copyOfproducts_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_16 = false;










 


	tos_count_tMap_16++;

/**
 * [tMap_16 main ] stop
 */
	
	/**
	 * [tMap_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 process_data_begin ] stop
 */
// Start of branch "copyOfproducts"
if(copyOfproducts != null) { 



	
	/**
	 * [tMap_17 main ] start
	 */

	

	
	
	currentComponent="tMap_17";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfproducts"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_17 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_17 = false;
		  boolean mainRowRejected_tMap_17 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row29" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow29 = false;
       		  	    	
       		  	    	
 							row29Struct row29ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_17) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_17 = false;
								
                        		    		    row29HashKey.product_id = copyOfproducts.product_id ;
                        		    		
                        		    		    row29HashKey.characteristic_id = copyOfproducts.characteristic_id;
                        		    		

								
		                        	row29HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row29.lookup( row29HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row29.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_17 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row29 != null && tHash_Lookup_row29.getCount(row29HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row29' and it contains more one result from keys :  row29.product_id = '" + row29HashKey.product_id + "', row29.characteristic_id = '" + row29HashKey.characteristic_id + "'");
								} // G 071
							

							row29Struct row29 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row29Struct fromLookup_row29 = null;
							row29 = row29Default;
										 
							
								 
							
							
								if (tHash_Lookup_row29 !=null && tHash_Lookup_row29.hasNext()) { // G 099
								
							
								
								fromLookup_row29 = tHash_Lookup_row29.next();

							
							
								} // G 099
							
							

							if(fromLookup_row29 != null) {
								row29 = fromLookup_row29;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_17__Struct Var = Var__tMap_17;// ###############################
        // ###############################
        // # Output tables

copyOfupdate_products_0 = null;
copyOfinsert_products = null;

if(!rejectedInnerJoin_tMap_17 ) {

// # Output table : 'copyOfupdate_products_0'
copyOfupdate_products_0_tmp.product_id = copyOfproducts.product_id ;
copyOfupdate_products_0_tmp.value = copyOfproducts.value ;
copyOfupdate_products_0_tmp.characteristic_id = copyOfproducts.characteristic_id;
copyOfupdate_products_0_tmp.relevance = copyOfproducts.relevance ;
copyOfupdate_products_0 = copyOfupdate_products_0_tmp;
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'copyOfinsert_products'
// # Filter conditions 
if( rejectedInnerJoin_tMap_17 ) {
copyOfinsert_products_tmp.product_id = copyOfproducts.product_id ;
copyOfinsert_products_tmp.value = copyOfproducts.value ;
copyOfinsert_products_tmp.characteristic_id = copyOfproducts.characteristic_id;
copyOfinsert_products = copyOfinsert_products_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_17 = false;










 


	tos_count_tMap_17++;

/**
 * [tMap_17 main ] stop
 */
	
	/**
	 * [tMap_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_17";

	

 



/**
 * [tMap_17 process_data_begin ] stop
 */
// Start of branch "copyOfinsert_products"
if(copyOfinsert_products != null) { 



	
	/**
	 * [tDBOutput_17 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_17";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfinsert_products"
						
						);
					}
					



        whetherReject_tDBOutput_17 = false;
                    if(copyOfinsert_products.product_id == null) {
pstmt_tDBOutput_17.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_17.setLong(1, copyOfinsert_products.product_id);
}

                    if(copyOfinsert_products.value == null) {
pstmt_tDBOutput_17.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_17.setString(2, copyOfinsert_products.value);
}

                    if(copyOfinsert_products.characteristic_id == null) {
pstmt_tDBOutput_17.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_17.setLong(3, copyOfinsert_products.characteristic_id);
}

			
    		pstmt_tDBOutput_17.addBatch();
    		nb_line_tDBOutput_17++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_17++;
    		  
    			if ((batchSize_tDBOutput_17 > 0) && (batchSize_tDBOutput_17 <= batchSizeCounter_tDBOutput_17)) {
                try {
						int countSum_tDBOutput_17 = 0;
						    
						for(int countEach_tDBOutput_17: pstmt_tDBOutput_17.executeBatch()) {
							countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0 : countEach_tDBOutput_17);
						}
				    	rowsToCommitCount_tDBOutput_17 += countSum_tDBOutput_17;
				    	
				    		insertedCount_tDBOutput_17 += countSum_tDBOutput_17;
				    	
            	    	batchSizeCounter_tDBOutput_17 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_17){
globalMap.put("tDBOutput_17_ERROR_MESSAGE",e_tDBOutput_17.getMessage());
				    	java.sql.SQLException ne_tDBOutput_17 = e_tDBOutput_17.getNextException(),sqle_tDBOutput_17=null;
				    	String errormessage_tDBOutput_17;
						if (ne_tDBOutput_17 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_17 = new java.sql.SQLException(e_tDBOutput_17.getMessage() + "\ncaused by: " + ne_tDBOutput_17.getMessage(), ne_tDBOutput_17.getSQLState(), ne_tDBOutput_17.getErrorCode(), ne_tDBOutput_17);
							errormessage_tDBOutput_17 = sqle_tDBOutput_17.getMessage();
						}else{
							errormessage_tDBOutput_17 = e_tDBOutput_17.getMessage();
						}
				    	
				    		if (ne_tDBOutput_17 != null) {
				    			throw(sqle_tDBOutput_17);
				    		}else{
				            	throw(e_tDBOutput_17);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_17++;

/**
 * [tDBOutput_17 main ] stop
 */
	
	/**
	 * [tDBOutput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_17";

	

 



/**
 * [tDBOutput_17 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_17";

	

 



/**
 * [tDBOutput_17 process_data_end ] stop
 */

} // End of branch "copyOfinsert_products"




// Start of branch "copyOfupdate_products_0"
if(copyOfupdate_products_0 != null) { 



	
	/**
	 * [tDBOutput_18 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_18";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfupdate_products_0"
						
						);
					}
					



        whetherReject_tDBOutput_18 = false;
                    if(copyOfupdate_products_0.value == null) {
pstmt_tDBOutput_18.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_18.setString(1, copyOfupdate_products_0.value);
}

                    if(copyOfupdate_products_0.relevance != null) {
pstmt_tDBOutput_18.setTimestamp(2, new java.sql.Timestamp(copyOfupdate_products_0.relevance.getTime()));
} else {
pstmt_tDBOutput_18.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(copyOfupdate_products_0.product_id == null) {
pstmt_tDBOutput_18.setNull(3 + count_tDBOutput_18, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_18.setLong(3 + count_tDBOutput_18, copyOfupdate_products_0.product_id);
}


                    if(copyOfupdate_products_0.characteristic_id == null) {
pstmt_tDBOutput_18.setNull(4 + count_tDBOutput_18, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_18.setLong(4 + count_tDBOutput_18, copyOfupdate_products_0.characteristic_id);
}


    		pstmt_tDBOutput_18.addBatch();
    		nb_line_tDBOutput_18++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_18++;
    		  
    			if ((batchSize_tDBOutput_18 > 0) && (batchSize_tDBOutput_18 <= batchSizeCounter_tDBOutput_18)) {
                try {
						int countSum_tDBOutput_18 = 0;
						    
						for(int countEach_tDBOutput_18: pstmt_tDBOutput_18.executeBatch()) {
							countSum_tDBOutput_18 += (countEach_tDBOutput_18 < 0 ? 0 : countEach_tDBOutput_18);
						}
				    	rowsToCommitCount_tDBOutput_18 += countSum_tDBOutput_18;
				    	
				    		updatedCount_tDBOutput_18 += countSum_tDBOutput_18;
				    	
            	    	batchSizeCounter_tDBOutput_18 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_18){
globalMap.put("tDBOutput_18_ERROR_MESSAGE",e_tDBOutput_18.getMessage());
				    	java.sql.SQLException ne_tDBOutput_18 = e_tDBOutput_18.getNextException(),sqle_tDBOutput_18=null;
				    	String errormessage_tDBOutput_18;
						if (ne_tDBOutput_18 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_18 = new java.sql.SQLException(e_tDBOutput_18.getMessage() + "\ncaused by: " + ne_tDBOutput_18.getMessage(), ne_tDBOutput_18.getSQLState(), ne_tDBOutput_18.getErrorCode(), ne_tDBOutput_18);
							errormessage_tDBOutput_18 = sqle_tDBOutput_18.getMessage();
						}else{
							errormessage_tDBOutput_18 = e_tDBOutput_18.getMessage();
						}
				    	
				    		if (ne_tDBOutput_18 != null) {
				    			throw(sqle_tDBOutput_18);
				    		}else{
				            	throw(e_tDBOutput_18);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_18++;

/**
 * [tDBOutput_18 main ] stop
 */
	
	/**
	 * [tDBOutput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_18";

	

 



/**
 * [tDBOutput_18 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_18";

	

 



/**
 * [tDBOutput_18 process_data_end ] stop
 */

} // End of branch "copyOfupdate_products_0"




	
	/**
	 * [tMap_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_17";

	

 



/**
 * [tMap_17 process_data_end ] stop
 */

} // End of branch "copyOfproducts"




	
	/**
	 * [tMap_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_27";

	

 



/**
 * [tDBInput_27 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_27 end ] start
	 */

	

	
	
	currentComponent="tDBInput_27";

	

	}
}finally{
	if (rs_tDBInput_27 != null) {
		rs_tDBInput_27.close();
	}
	if (stmt_tDBInput_27 != null) {
		stmt_tDBInput_27.close();
	}
}
globalMap.put("tDBInput_27_NB_LINE",nb_line_tDBInput_27);
 

ok_Hash.put("tDBInput_27", true);
end_Hash.put("tDBInput_27", System.currentTimeMillis());




/**
 * [tDBInput_27 end ] stop
 */

	
	/**
	 * [tMap_16 end ] start
	 */

	

	
	
	currentComponent="tMap_16";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row28 != null) {
						tHash_Lookup_row28.endGet();
					}
					globalMap.remove( "tHash_Lookup_row28" );

					
					
				
					if(tHash_Lookup_row42 != null) {
						tHash_Lookup_row42.endGet();
					}
					globalMap.remove( "tHash_Lookup_row42" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tMap_16", true);
end_Hash.put("tMap_16", System.currentTimeMillis());




/**
 * [tMap_16 end ] stop
 */

	
	/**
	 * [tMap_17 end ] start
	 */

	

	
	
	currentComponent="tMap_17";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row29 != null) {
						tHash_Lookup_row29.endGet();
					}
					globalMap.remove( "tHash_Lookup_row29" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfproducts");
			  	}
			  	
 

ok_Hash.put("tMap_17", true);
end_Hash.put("tMap_17", System.currentTimeMillis());




/**
 * [tMap_17 end ] stop
 */

	
	/**
	 * [tDBOutput_17 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_17";

	



	    try {
				int countSum_tDBOutput_17 = 0;
				if (pstmt_tDBOutput_17 != null && batchSizeCounter_tDBOutput_17 > 0) {
						
					for(int countEach_tDBOutput_17: pstmt_tDBOutput_17.executeBatch()) {
						countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0 : countEach_tDBOutput_17);
					}
					rowsToCommitCount_tDBOutput_17 += countSum_tDBOutput_17;
						
				}
		    	
		    		insertedCount_tDBOutput_17 += countSum_tDBOutput_17;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_17){
globalMap.put("tDBOutput_17_ERROR_MESSAGE",e_tDBOutput_17.getMessage());
	    	java.sql.SQLException ne_tDBOutput_17 = e_tDBOutput_17.getNextException(),sqle_tDBOutput_17=null;
	    	String errormessage_tDBOutput_17;
			if (ne_tDBOutput_17 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_17 = new java.sql.SQLException(e_tDBOutput_17.getMessage() + "\ncaused by: " + ne_tDBOutput_17.getMessage(), ne_tDBOutput_17.getSQLState(), ne_tDBOutput_17.getErrorCode(), ne_tDBOutput_17);
				errormessage_tDBOutput_17 = sqle_tDBOutput_17.getMessage();
			}else{
				errormessage_tDBOutput_17 = e_tDBOutput_17.getMessage();
			}
	    	
	    		if (ne_tDBOutput_17 != null) {
	    			throw(sqle_tDBOutput_17);
	    		}else{
	            	throw(e_tDBOutput_17);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_17 != null) {
        		
            pstmt_tDBOutput_17.close();
            resourceMap.remove("pstmt_tDBOutput_17");
        }
    resourceMap.put("statementClosed_tDBOutput_17", true);

	nb_line_deleted_tDBOutput_17=nb_line_deleted_tDBOutput_17+ deletedCount_tDBOutput_17;
	nb_line_update_tDBOutput_17=nb_line_update_tDBOutput_17 + updatedCount_tDBOutput_17;
	nb_line_inserted_tDBOutput_17=nb_line_inserted_tDBOutput_17 + insertedCount_tDBOutput_17;
	nb_line_rejected_tDBOutput_17=nb_line_rejected_tDBOutput_17 + rejectedCount_tDBOutput_17;
	
        globalMap.put("tDBOutput_17_NB_LINE",nb_line_tDBOutput_17);
        globalMap.put("tDBOutput_17_NB_LINE_UPDATED",nb_line_update_tDBOutput_17);
        globalMap.put("tDBOutput_17_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_17);
        globalMap.put("tDBOutput_17_NB_LINE_DELETED",nb_line_deleted_tDBOutput_17);
        globalMap.put("tDBOutput_17_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_17);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfinsert_products");
			  	}
			  	
 

ok_Hash.put("tDBOutput_17", true);
end_Hash.put("tDBOutput_17", System.currentTimeMillis());




/**
 * [tDBOutput_17 end ] stop
 */




	
	/**
	 * [tDBOutput_18 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_18";

	



	    try {
				int countSum_tDBOutput_18 = 0;
				if (pstmt_tDBOutput_18 != null && batchSizeCounter_tDBOutput_18 > 0) {
						
					for(int countEach_tDBOutput_18: pstmt_tDBOutput_18.executeBatch()) {
						countSum_tDBOutput_18 += (countEach_tDBOutput_18 < 0 ? 0 : countEach_tDBOutput_18);
					}
					rowsToCommitCount_tDBOutput_18 += countSum_tDBOutput_18;
						
				}
		    	
		    		updatedCount_tDBOutput_18 += countSum_tDBOutput_18;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_18){
globalMap.put("tDBOutput_18_ERROR_MESSAGE",e_tDBOutput_18.getMessage());
	    	java.sql.SQLException ne_tDBOutput_18 = e_tDBOutput_18.getNextException(),sqle_tDBOutput_18=null;
	    	String errormessage_tDBOutput_18;
			if (ne_tDBOutput_18 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_18 = new java.sql.SQLException(e_tDBOutput_18.getMessage() + "\ncaused by: " + ne_tDBOutput_18.getMessage(), ne_tDBOutput_18.getSQLState(), ne_tDBOutput_18.getErrorCode(), ne_tDBOutput_18);
				errormessage_tDBOutput_18 = sqle_tDBOutput_18.getMessage();
			}else{
				errormessage_tDBOutput_18 = e_tDBOutput_18.getMessage();
			}
	    	
	    		if (ne_tDBOutput_18 != null) {
	    			throw(sqle_tDBOutput_18);
	    		}else{
	            	throw(e_tDBOutput_18);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_18 != null) {
        		
            pstmt_tDBOutput_18.close();
            resourceMap.remove("pstmt_tDBOutput_18");
        }
    resourceMap.put("statementClosed_tDBOutput_18", true);

	nb_line_deleted_tDBOutput_18=nb_line_deleted_tDBOutput_18+ deletedCount_tDBOutput_18;
	nb_line_update_tDBOutput_18=nb_line_update_tDBOutput_18 + updatedCount_tDBOutput_18;
	nb_line_inserted_tDBOutput_18=nb_line_inserted_tDBOutput_18 + insertedCount_tDBOutput_18;
	nb_line_rejected_tDBOutput_18=nb_line_rejected_tDBOutput_18 + rejectedCount_tDBOutput_18;
	
        globalMap.put("tDBOutput_18_NB_LINE",nb_line_tDBOutput_18);
        globalMap.put("tDBOutput_18_NB_LINE_UPDATED",nb_line_update_tDBOutput_18);
        globalMap.put("tDBOutput_18_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_18);
        globalMap.put("tDBOutput_18_NB_LINE_DELETED",nb_line_deleted_tDBOutput_18);
        globalMap.put("tDBOutput_18_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_18);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfupdate_products_0");
			  	}
			  	
 

ok_Hash.put("tDBOutput_18", true);
end_Hash.put("tDBOutput_18", System.currentTimeMillis());




/**
 * [tDBOutput_18 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_27:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk18", 0, "ok");
								} 
							
							tDBInput_30Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_17"
					     			globalMap.remove("tHash_Lookup_row29"); 
				     			
					     			//free memory for "tMap_16"
					     			globalMap.remove("tHash_Lookup_row28"); 
				     			
					     			//free memory for "tMap_16"
					     			globalMap.remove("tHash_Lookup_row42"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_27 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_27";

	

 



/**
 * [tDBInput_27 finally ] stop
 */

	
	/**
	 * [tMap_16 finally ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 finally ] stop
 */

	
	/**
	 * [tMap_17 finally ] start
	 */

	

	
	
	currentComponent="tMap_17";

	

 



/**
 * [tMap_17 finally ] stop
 */

	
	/**
	 * [tDBOutput_17 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_17";

	



    if (resourceMap.get("statementClosed_tDBOutput_17") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_17 = null;
                if ((pstmtToClose_tDBOutput_17 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_17")) != null) {
                    pstmtToClose_tDBOutput_17.close();
                }
    }
 



/**
 * [tDBOutput_17 finally ] stop
 */




	
	/**
	 * [tDBOutput_18 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_18";

	



    if (resourceMap.get("statementClosed_tDBOutput_18") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_18 = null;
                if ((pstmtToClose_tDBOutput_18 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_18")) != null) {
                    pstmtToClose_tDBOutput_18.close();
                }
    }
 



/**
 * [tDBOutput_18 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_27_SUBPROCESS_STATE", 1);
	}
	


public static class insert_imagesStruct implements routines.system.IPersistableRow<insert_imagesStruct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public Long product_id;

				public Long getProduct_id () {
					return this.product_id;
				}
				
			    public String file_path;

				public String getFile_path () {
					return this.file_path;
				}
				
			    public String image_url;

				public String getImage_url () {
					return this.image_url;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.product_id = null;
           				} else {
           			    	this.product_id = dis.readLong();
           				}
					
					this.file_path = readString(dis);
					
					this.image_url = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.product_id = null;
           				} else {
           			    	this.product_id = dis.readLong();
           				}
					
					this.file_path = readString(dis);
					
					this.image_url = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.product_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.product_id);
		            	}
					
					// String
				
						writeString(this.file_path,dos);
					
					// String
				
						writeString(this.image_url,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.product_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.product_id);
		            	}
					
					// String
				
						writeString(this.file_path,dos);
					
					// String
				
						writeString(this.image_url,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("product_id="+String.valueOf(product_id));
		sb.append(",file_path="+file_path);
		sb.append(",image_url="+image_url);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_imagesStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class update_imagesStruct implements routines.system.IPersistableRow<update_imagesStruct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long product_id;

				public Long getProduct_id () {
					return this.product_id;
				}
				
			    public String file_path;

				public String getFile_path () {
					return this.file_path;
				}
				
			    public String image_url;

				public String getImage_url () {
					return this.image_url;
				}
				
			    public java.util.Date relevance;

				public java.util.Date getRelevance () {
					return this.relevance;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.file_path == null) ? 0 : this.file_path.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final update_imagesStruct other = (update_imagesStruct) obj;
		
						if (this.file_path == null) {
							if (other.file_path != null)
								return false;
						
						} else if (!this.file_path.equals(other.file_path))
						
							return false;
					

		return true;
    }

	public void copyDataTo(update_imagesStruct other) {

		other.product_id = this.product_id;
	            other.file_path = this.file_path;
	            other.image_url = this.image_url;
	            other.relevance = this.relevance;
	            
	}

	public void copyKeysDataTo(update_imagesStruct other) {

		other.file_path = this.file_path;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.product_id = null;
           				} else {
           			    	this.product_id = dis.readLong();
           				}
					
					this.file_path = readString(dis);
					
					this.image_url = readString(dis);
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.product_id = null;
           				} else {
           			    	this.product_id = dis.readLong();
           				}
					
					this.file_path = readString(dis);
					
					this.image_url = readString(dis);
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.product_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.product_id);
		            	}
					
					// String
				
						writeString(this.file_path,dos);
					
					// String
				
						writeString(this.image_url,dos);
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.product_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.product_id);
		            	}
					
					// String
				
						writeString(this.file_path,dos);
					
					// String
				
						writeString(this.image_url,dos);
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("product_id="+String.valueOf(product_id));
		sb.append(",file_path="+file_path);
		sb.append(",image_url="+image_url);
		sb.append(",relevance="+String.valueOf(relevance));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_imagesStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.file_path, other.file_path);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class imagesStruct implements routines.system.IPersistableRow<imagesStruct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public Long product_id;

				public Long getProduct_id () {
					return this.product_id;
				}
				
			    public String file_path;

				public String getFile_path () {
					return this.file_path;
				}
				
			    public String image_url;

				public String getImage_url () {
					return this.image_url;
				}
				
			    public java.util.Date relevance;

				public java.util.Date getRelevance () {
					return this.relevance;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.product_id = null;
           				} else {
           			    	this.product_id = dis.readLong();
           				}
					
					this.file_path = readString(dis);
					
					this.image_url = readString(dis);
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.product_id = null;
           				} else {
           			    	this.product_id = dis.readLong();
           				}
					
					this.file_path = readString(dis);
					
					this.image_url = readString(dis);
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.product_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.product_id);
		            	}
					
					// String
				
						writeString(this.file_path,dos);
					
					// String
				
						writeString(this.image_url,dos);
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.product_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.product_id);
		            	}
					
					// String
				
						writeString(this.file_path,dos);
					
					// String
				
						writeString(this.image_url,dos);
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("product_id="+String.valueOf(product_id));
		sb.append(",file_path="+file_path);
		sb.append(",image_url="+image_url);
		sb.append(",relevance="+String.valueOf(relevance));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(imagesStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public String source_code;

				public String getSource_code () {
					return this.source_code;
				}
				
			    public String path;

				public String getPath () {
					return this.path;
				}
				
			    public String image_url;

				public String getImage_url () {
					return this.image_url;
				}
				
			    public java.util.Date relevance;

				public java.util.Date getRelevance () {
					return this.relevance;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
					this.path = readString(dis);
					
					this.image_url = readString(dis);
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
					this.path = readString(dis);
					
					this.image_url = readString(dis);
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
					// String
				
						writeString(this.path,dos);
					
					// String
				
						writeString(this.image_url,dos);
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
					// String
				
						writeString(this.path,dos);
					
					// String
				
						writeString(this.image_url,dos);
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("source_code="+source_code);
		sb.append(",path="+path);
		sb.append(",image_url="+image_url);
		sb.append(",relevance="+String.valueOf(relevance));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_30Struct implements routines.system.IPersistableRow<after_tDBInput_30Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];

	
			    public String source_code;

				public String getSource_code () {
					return this.source_code;
				}
				
			    public String path;

				public String getPath () {
					return this.path;
				}
				
			    public String image_url;

				public String getImage_url () {
					return this.image_url;
				}
				
			    public java.util.Date relevance;

				public java.util.Date getRelevance () {
					return this.relevance;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
					this.path = readString(dis);
					
					this.image_url = readString(dis);
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
					this.path = readString(dis);
					
					this.image_url = readString(dis);
					
					this.relevance = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
					// String
				
						writeString(this.path,dos);
					
					// String
				
						writeString(this.image_url,dos);
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
					// String
				
						writeString(this.path,dos);
					
					// String
				
						writeString(this.image_url,dos);
					
					// java.util.Date
				
						writeDate(this.relevance,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("source_code="+source_code);
		sb.append(",path="+path);
		sb.append(",image_url="+image_url);
		sb.append(",relevance="+String.valueOf(relevance));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_30Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_30_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_31Process(globalMap);
		tDBInput_32Process(globalMap);

		row30Struct row30 = new row30Struct();
imagesStruct images = new imagesStruct();
insert_imagesStruct insert_images = new insert_imagesStruct();
update_imagesStruct update_images = new update_imagesStruct();






	
	/**
	 * [tDBOutput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_19", false);
		start_Hash.put("tDBOutput_19", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_images");
					}
				
		int tos_count_tDBOutput_19 = 0;
		





String dbschema_tDBOutput_19 = null;
	dbschema_tDBOutput_19 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_19 = null;
if(dbschema_tDBOutput_19 == null || dbschema_tDBOutput_19.trim().length() == 0) {
	tableName_tDBOutput_19 = ("upack_images");
} else {
	tableName_tDBOutput_19 = dbschema_tDBOutput_19 + "\".\"" + ("upack_images");
}


int nb_line_tDBOutput_19 = 0;
int nb_line_update_tDBOutput_19 = 0;
int nb_line_inserted_tDBOutput_19 = 0;
int nb_line_deleted_tDBOutput_19 = 0;
int nb_line_rejected_tDBOutput_19 = 0;

int deletedCount_tDBOutput_19=0;
int updatedCount_tDBOutput_19=0;
int insertedCount_tDBOutput_19=0;
int rowsToCommitCount_tDBOutput_19=0;
int rejectedCount_tDBOutput_19=0;

boolean whetherReject_tDBOutput_19 = false;

java.sql.Connection conn_tDBOutput_19 = null;
String dbUser_tDBOutput_19 = null;

	conn_tDBOutput_19 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_19 = 10000;
   int batchSizeCounter_tDBOutput_19=0;

int count_tDBOutput_19=0;
	    String insert_tDBOutput_19 = "INSERT INTO \"" + tableName_tDBOutput_19 + "\" (\"product_id\",\"file_path\",\"image_url\") VALUES (?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_19 = conn_tDBOutput_19.prepareStatement(insert_tDBOutput_19);
	    resourceMap.put("pstmt_tDBOutput_19", pstmt_tDBOutput_19);
	    

 



/**
 * [tDBOutput_19 begin ] stop
 */




	
	/**
	 * [tDBOutput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_20", false);
		start_Hash.put("tDBOutput_20", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_20";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_images");
					}
				
		int tos_count_tDBOutput_20 = 0;
		





String dbschema_tDBOutput_20 = null;
	dbschema_tDBOutput_20 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_20 = null;
if(dbschema_tDBOutput_20 == null || dbschema_tDBOutput_20.trim().length() == 0) {
	tableName_tDBOutput_20 = ("upack_images");
} else {
	tableName_tDBOutput_20 = dbschema_tDBOutput_20 + "\".\"" + ("upack_images");
}

        int updateKeyCount_tDBOutput_20 = 1;
        if(updateKeyCount_tDBOutput_20 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_20 == 4 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_20 = 0;
int nb_line_update_tDBOutput_20 = 0;
int nb_line_inserted_tDBOutput_20 = 0;
int nb_line_deleted_tDBOutput_20 = 0;
int nb_line_rejected_tDBOutput_20 = 0;

int deletedCount_tDBOutput_20=0;
int updatedCount_tDBOutput_20=0;
int insertedCount_tDBOutput_20=0;
int rowsToCommitCount_tDBOutput_20=0;
int rejectedCount_tDBOutput_20=0;

boolean whetherReject_tDBOutput_20 = false;

java.sql.Connection conn_tDBOutput_20 = null;
String dbUser_tDBOutput_20 = null;

	conn_tDBOutput_20 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_20 = 10000;
   int batchSizeCounter_tDBOutput_20=0;

int count_tDBOutput_20=0;
	    String update_tDBOutput_20 = "UPDATE \"" + tableName_tDBOutput_20 + "\" SET \"product_id\" = ?,\"image_url\" = ?,\"relevance\" = ? WHERE \"file_path\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_20 = conn_tDBOutput_20.prepareStatement(update_tDBOutput_20);
	    resourceMap.put("pstmt_tDBOutput_20", pstmt_tDBOutput_20);
	    

 



/**
 * [tDBOutput_20 begin ] stop
 */



	
	/**
	 * [tMap_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_19", false);
		start_Hash.put("tMap_19", System.currentTimeMillis());
		
	
	currentComponent="tMap_19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"images");
					}
				
		int tos_count_tMap_19 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct> tHash_Lookup_row32 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct>) 
					globalMap.get( "tHash_Lookup_row32" ))
					;					
					
	

row32Struct row32HashKey = new row32Struct();
row32Struct row32Default = new row32Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_19__Struct  {
}
Var__tMap_19__Struct Var__tMap_19 = new Var__tMap_19__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_imagesStruct insert_images_tmp = new insert_imagesStruct();
update_imagesStruct update_images_tmp = new update_imagesStruct();
// ###############################

        
        



        









 



/**
 * [tMap_19 begin ] stop
 */



	
	/**
	 * [tMap_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_18", false);
		start_Hash.put("tMap_18", System.currentTimeMillis());
		
	
	currentComponent="tMap_18";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tMap_18 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct> tHash_Lookup_row31 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct>) 
					globalMap.get( "tHash_Lookup_row31" ))
					;					
					
	

row31Struct row31HashKey = new row31Struct();
row31Struct row31Default = new row31Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_18__Struct  {
}
Var__tMap_18__Struct Var__tMap_18 = new Var__tMap_18__Struct();
// ###############################

// ###############################
// # Outputs initialization
imagesStruct images_tmp = new imagesStruct();
// ###############################

        
        



        









 



/**
 * [tMap_18 begin ] stop
 */



	
	/**
	 * [tDBInput_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_30", false);
		start_Hash.put("tDBInput_30", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_30";

	
		int tos_count_tDBInput_30 = 0;
		
	
    
	
		    int nb_line_tDBInput_30 = 0;
		    java.sql.Connection conn_tDBInput_30 = null;
				conn_tDBInput_30 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_30 = conn_tDBInput_30.createStatement();

		    String dbquery_tDBInput_30 = "select\n	source_code, \n	path,\n	image_url,\n	now() as relevance\nfrom "+context.schema_in+".upack_pictures\nWHERE source_code IS NOT null;";
		    

            	globalMap.put("tDBInput_30_QUERY",dbquery_tDBInput_30);
		    java.sql.ResultSet rs_tDBInput_30 = null;

		    try {
		    	rs_tDBInput_30 = stmt_tDBInput_30.executeQuery(dbquery_tDBInput_30);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_30 = rs_tDBInput_30.getMetaData();
		    	int colQtyInRs_tDBInput_30 = rsmd_tDBInput_30.getColumnCount();

		    String tmpContent_tDBInput_30 = null;
		    
		    
		    while (rs_tDBInput_30.next()) {
		        nb_line_tDBInput_30++;
		        
							if(colQtyInRs_tDBInput_30 < 1) {
								row30.source_code = null;
							} else {
	                         		
        	row30.source_code = routines.system.JDBCUtil.getString(rs_tDBInput_30, 1, false);
		                    }
							if(colQtyInRs_tDBInput_30 < 2) {
								row30.path = null;
							} else {
	                         		
        	row30.path = routines.system.JDBCUtil.getString(rs_tDBInput_30, 2, false);
		                    }
							if(colQtyInRs_tDBInput_30 < 3) {
								row30.image_url = null;
							} else {
	                         		
        	row30.image_url = routines.system.JDBCUtil.getString(rs_tDBInput_30, 3, false);
		                    }
							if(colQtyInRs_tDBInput_30 < 4) {
								row30.relevance = null;
							} else {
										
			row30.relevance = routines.system.JDBCUtil.getDate(rs_tDBInput_30, 4);
		                    }
					


 



/**
 * [tDBInput_30 begin ] stop
 */
	
	/**
	 * [tDBInput_30 main ] start
	 */

	

	
	
	currentComponent="tDBInput_30";

	

 


	tos_count_tDBInput_30++;

/**
 * [tDBInput_30 main ] stop
 */
	
	/**
	 * [tDBInput_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_30";

	

 



/**
 * [tDBInput_30 process_data_begin ] stop
 */

	
	/**
	 * [tMap_18 main ] start
	 */

	

	
	
	currentComponent="tMap_18";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_18 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_18 = false;
		  boolean mainRowRejected_tMap_18 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row31" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow31 = false;
       		  	    	
       		  	    	
 							row31Struct row31ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_18) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_18 = false;
								
                        		    		    row31HashKey.source_code = row30.source_code ;
                        		    		

								
		                        	row31HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row31.lookup( row31HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row31.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_18 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row31 != null && tHash_Lookup_row31.getCount(row31HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row31' and it contains more one result from keys :  row31.source_code = '" + row31HashKey.source_code + "'");
								} // G 071
							

							row31Struct row31 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row31Struct fromLookup_row31 = null;
							row31 = row31Default;
										 
							
								 
							
							
								if (tHash_Lookup_row31 !=null && tHash_Lookup_row31.hasNext()) { // G 099
								
							
								
								fromLookup_row31 = tHash_Lookup_row31.next();

							
							
								} // G 099
							
							

							if(fromLookup_row31 != null) {
								row31 = fromLookup_row31;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_18__Struct Var = Var__tMap_18;// ###############################
        // ###############################
        // # Output tables

images = null;

if(!rejectedInnerJoin_tMap_18 ) {

// # Output table : 'images'
images_tmp.product_id = row31.id ;
images_tmp.file_path = row30.path ;
images_tmp.image_url = row30.image_url ;
images_tmp.relevance = row30.relevance ;
images = images_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_18 = false;










 


	tos_count_tMap_18++;

/**
 * [tMap_18 main ] stop
 */
	
	/**
	 * [tMap_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_18";

	

 



/**
 * [tMap_18 process_data_begin ] stop
 */
// Start of branch "images"
if(images != null) { 



	
	/**
	 * [tMap_19 main ] start
	 */

	

	
	
	currentComponent="tMap_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"images"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_19 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_19 = false;
		  boolean mainRowRejected_tMap_19 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row32" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow32 = false;
       		  	    	
       		  	    	
 							row32Struct row32ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_19) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_19 = false;
								
                        		    		    row32HashKey.file_path = images.file_path ;
                        		    		

								
		                        	row32HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row32.lookup( row32HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row32.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_19 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row32 != null && tHash_Lookup_row32.getCount(row32HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row32' and it contains more one result from keys :  row32.file_path = '" + row32HashKey.file_path + "'");
								} // G 071
							

							row32Struct row32 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row32Struct fromLookup_row32 = null;
							row32 = row32Default;
										 
							
								 
							
							
								if (tHash_Lookup_row32 !=null && tHash_Lookup_row32.hasNext()) { // G 099
								
							
								
								fromLookup_row32 = tHash_Lookup_row32.next();

							
							
								} // G 099
							
							

							if(fromLookup_row32 != null) {
								row32 = fromLookup_row32;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_19__Struct Var = Var__tMap_19;// ###############################
        // ###############################
        // # Output tables

update_images = null;
insert_images = null;

if(!rejectedInnerJoin_tMap_19 ) {

// # Output table : 'update_images'
update_images_tmp.product_id = images.product_id ;
update_images_tmp.file_path = images.file_path ;
update_images_tmp.image_url = images.image_url;
update_images_tmp.relevance = images.relevance ;
update_images = update_images_tmp;
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'insert_images'
// # Filter conditions 
if( rejectedInnerJoin_tMap_19 ) {
insert_images_tmp.product_id = images.product_id ;
insert_images_tmp.file_path = images.file_path ;
insert_images_tmp.image_url = images.image_url;
insert_images = insert_images_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_19 = false;










 


	tos_count_tMap_19++;

/**
 * [tMap_19 main ] stop
 */
	
	/**
	 * [tMap_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_19";

	

 



/**
 * [tMap_19 process_data_begin ] stop
 */
// Start of branch "insert_images"
if(insert_images != null) { 



	
	/**
	 * [tDBOutput_19 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_images"
						
						);
					}
					



        whetherReject_tDBOutput_19 = false;
                    if(insert_images.product_id == null) {
pstmt_tDBOutput_19.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_19.setLong(1, insert_images.product_id);
}

                    if(insert_images.file_path == null) {
pstmt_tDBOutput_19.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_19.setString(2, insert_images.file_path);
}

                    if(insert_images.image_url == null) {
pstmt_tDBOutput_19.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_19.setString(3, insert_images.image_url);
}

			
    		pstmt_tDBOutput_19.addBatch();
    		nb_line_tDBOutput_19++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_19++;
    		  
    			if ((batchSize_tDBOutput_19 > 0) && (batchSize_tDBOutput_19 <= batchSizeCounter_tDBOutput_19)) {
                try {
						int countSum_tDBOutput_19 = 0;
						    
						for(int countEach_tDBOutput_19: pstmt_tDBOutput_19.executeBatch()) {
							countSum_tDBOutput_19 += (countEach_tDBOutput_19 < 0 ? 0 : countEach_tDBOutput_19);
						}
				    	rowsToCommitCount_tDBOutput_19 += countSum_tDBOutput_19;
				    	
				    		insertedCount_tDBOutput_19 += countSum_tDBOutput_19;
				    	
            	    	batchSizeCounter_tDBOutput_19 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_19){
globalMap.put("tDBOutput_19_ERROR_MESSAGE",e_tDBOutput_19.getMessage());
				    	java.sql.SQLException ne_tDBOutput_19 = e_tDBOutput_19.getNextException(),sqle_tDBOutput_19=null;
				    	String errormessage_tDBOutput_19;
						if (ne_tDBOutput_19 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_19 = new java.sql.SQLException(e_tDBOutput_19.getMessage() + "\ncaused by: " + ne_tDBOutput_19.getMessage(), ne_tDBOutput_19.getSQLState(), ne_tDBOutput_19.getErrorCode(), ne_tDBOutput_19);
							errormessage_tDBOutput_19 = sqle_tDBOutput_19.getMessage();
						}else{
							errormessage_tDBOutput_19 = e_tDBOutput_19.getMessage();
						}
				    	
				    		if (ne_tDBOutput_19 != null) {
				    			throw(sqle_tDBOutput_19);
				    		}else{
				            	throw(e_tDBOutput_19);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_19++;

/**
 * [tDBOutput_19 main ] stop
 */
	
	/**
	 * [tDBOutput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_19";

	

 



/**
 * [tDBOutput_19 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_19";

	

 



/**
 * [tDBOutput_19 process_data_end ] stop
 */

} // End of branch "insert_images"




// Start of branch "update_images"
if(update_images != null) { 



	
	/**
	 * [tDBOutput_20 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_20";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_images"
						
						);
					}
					



        whetherReject_tDBOutput_20 = false;
                    if(update_images.product_id == null) {
pstmt_tDBOutput_20.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_20.setLong(1, update_images.product_id);
}

                    if(update_images.image_url == null) {
pstmt_tDBOutput_20.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_20.setString(2, update_images.image_url);
}

                    if(update_images.relevance != null) {
pstmt_tDBOutput_20.setTimestamp(3, new java.sql.Timestamp(update_images.relevance.getTime()));
} else {
pstmt_tDBOutput_20.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(update_images.file_path == null) {
pstmt_tDBOutput_20.setNull(4 + count_tDBOutput_20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_20.setString(4 + count_tDBOutput_20, update_images.file_path);
}


    		pstmt_tDBOutput_20.addBatch();
    		nb_line_tDBOutput_20++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_20++;
    		  
    			if ((batchSize_tDBOutput_20 > 0) && (batchSize_tDBOutput_20 <= batchSizeCounter_tDBOutput_20)) {
                try {
						int countSum_tDBOutput_20 = 0;
						    
						for(int countEach_tDBOutput_20: pstmt_tDBOutput_20.executeBatch()) {
							countSum_tDBOutput_20 += (countEach_tDBOutput_20 < 0 ? 0 : countEach_tDBOutput_20);
						}
				    	rowsToCommitCount_tDBOutput_20 += countSum_tDBOutput_20;
				    	
				    		updatedCount_tDBOutput_20 += countSum_tDBOutput_20;
				    	
            	    	batchSizeCounter_tDBOutput_20 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_20){
globalMap.put("tDBOutput_20_ERROR_MESSAGE",e_tDBOutput_20.getMessage());
				    	java.sql.SQLException ne_tDBOutput_20 = e_tDBOutput_20.getNextException(),sqle_tDBOutput_20=null;
				    	String errormessage_tDBOutput_20;
						if (ne_tDBOutput_20 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_20 = new java.sql.SQLException(e_tDBOutput_20.getMessage() + "\ncaused by: " + ne_tDBOutput_20.getMessage(), ne_tDBOutput_20.getSQLState(), ne_tDBOutput_20.getErrorCode(), ne_tDBOutput_20);
							errormessage_tDBOutput_20 = sqle_tDBOutput_20.getMessage();
						}else{
							errormessage_tDBOutput_20 = e_tDBOutput_20.getMessage();
						}
				    	
				    		if (ne_tDBOutput_20 != null) {
				    			throw(sqle_tDBOutput_20);
				    		}else{
				            	throw(e_tDBOutput_20);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_20++;

/**
 * [tDBOutput_20 main ] stop
 */
	
	/**
	 * [tDBOutput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_20";

	

 



/**
 * [tDBOutput_20 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_20";

	

 



/**
 * [tDBOutput_20 process_data_end ] stop
 */

} // End of branch "update_images"




	
	/**
	 * [tMap_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_19";

	

 



/**
 * [tMap_19 process_data_end ] stop
 */

} // End of branch "images"




	
	/**
	 * [tMap_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_18";

	

 



/**
 * [tMap_18 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_30";

	

 



/**
 * [tDBInput_30 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_30 end ] start
	 */

	

	
	
	currentComponent="tDBInput_30";

	

	}
}finally{
	if (rs_tDBInput_30 != null) {
		rs_tDBInput_30.close();
	}
	if (stmt_tDBInput_30 != null) {
		stmt_tDBInput_30.close();
	}
}
globalMap.put("tDBInput_30_NB_LINE",nb_line_tDBInput_30);
 

ok_Hash.put("tDBInput_30", true);
end_Hash.put("tDBInput_30", System.currentTimeMillis());




/**
 * [tDBInput_30 end ] stop
 */

	
	/**
	 * [tMap_18 end ] start
	 */

	

	
	
	currentComponent="tMap_18";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row31 != null) {
						tHash_Lookup_row31.endGet();
					}
					globalMap.remove( "tHash_Lookup_row31" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tMap_18", true);
end_Hash.put("tMap_18", System.currentTimeMillis());




/**
 * [tMap_18 end ] stop
 */

	
	/**
	 * [tMap_19 end ] start
	 */

	

	
	
	currentComponent="tMap_19";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row32 != null) {
						tHash_Lookup_row32.endGet();
					}
					globalMap.remove( "tHash_Lookup_row32" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"images");
			  	}
			  	
 

ok_Hash.put("tMap_19", true);
end_Hash.put("tMap_19", System.currentTimeMillis());




/**
 * [tMap_19 end ] stop
 */

	
	/**
	 * [tDBOutput_19 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_19";

	



	    try {
				int countSum_tDBOutput_19 = 0;
				if (pstmt_tDBOutput_19 != null && batchSizeCounter_tDBOutput_19 > 0) {
						
					for(int countEach_tDBOutput_19: pstmt_tDBOutput_19.executeBatch()) {
						countSum_tDBOutput_19 += (countEach_tDBOutput_19 < 0 ? 0 : countEach_tDBOutput_19);
					}
					rowsToCommitCount_tDBOutput_19 += countSum_tDBOutput_19;
						
				}
		    	
		    		insertedCount_tDBOutput_19 += countSum_tDBOutput_19;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_19){
globalMap.put("tDBOutput_19_ERROR_MESSAGE",e_tDBOutput_19.getMessage());
	    	java.sql.SQLException ne_tDBOutput_19 = e_tDBOutput_19.getNextException(),sqle_tDBOutput_19=null;
	    	String errormessage_tDBOutput_19;
			if (ne_tDBOutput_19 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_19 = new java.sql.SQLException(e_tDBOutput_19.getMessage() + "\ncaused by: " + ne_tDBOutput_19.getMessage(), ne_tDBOutput_19.getSQLState(), ne_tDBOutput_19.getErrorCode(), ne_tDBOutput_19);
				errormessage_tDBOutput_19 = sqle_tDBOutput_19.getMessage();
			}else{
				errormessage_tDBOutput_19 = e_tDBOutput_19.getMessage();
			}
	    	
	    		if (ne_tDBOutput_19 != null) {
	    			throw(sqle_tDBOutput_19);
	    		}else{
	            	throw(e_tDBOutput_19);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_19 != null) {
        		
            pstmt_tDBOutput_19.close();
            resourceMap.remove("pstmt_tDBOutput_19");
        }
    resourceMap.put("statementClosed_tDBOutput_19", true);

	nb_line_deleted_tDBOutput_19=nb_line_deleted_tDBOutput_19+ deletedCount_tDBOutput_19;
	nb_line_update_tDBOutput_19=nb_line_update_tDBOutput_19 + updatedCount_tDBOutput_19;
	nb_line_inserted_tDBOutput_19=nb_line_inserted_tDBOutput_19 + insertedCount_tDBOutput_19;
	nb_line_rejected_tDBOutput_19=nb_line_rejected_tDBOutput_19 + rejectedCount_tDBOutput_19;
	
        globalMap.put("tDBOutput_19_NB_LINE",nb_line_tDBOutput_19);
        globalMap.put("tDBOutput_19_NB_LINE_UPDATED",nb_line_update_tDBOutput_19);
        globalMap.put("tDBOutput_19_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_19);
        globalMap.put("tDBOutput_19_NB_LINE_DELETED",nb_line_deleted_tDBOutput_19);
        globalMap.put("tDBOutput_19_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_19);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_images");
			  	}
			  	
 

ok_Hash.put("tDBOutput_19", true);
end_Hash.put("tDBOutput_19", System.currentTimeMillis());




/**
 * [tDBOutput_19 end ] stop
 */




	
	/**
	 * [tDBOutput_20 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_20";

	



	    try {
				int countSum_tDBOutput_20 = 0;
				if (pstmt_tDBOutput_20 != null && batchSizeCounter_tDBOutput_20 > 0) {
						
					for(int countEach_tDBOutput_20: pstmt_tDBOutput_20.executeBatch()) {
						countSum_tDBOutput_20 += (countEach_tDBOutput_20 < 0 ? 0 : countEach_tDBOutput_20);
					}
					rowsToCommitCount_tDBOutput_20 += countSum_tDBOutput_20;
						
				}
		    	
		    		updatedCount_tDBOutput_20 += countSum_tDBOutput_20;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_20){
globalMap.put("tDBOutput_20_ERROR_MESSAGE",e_tDBOutput_20.getMessage());
	    	java.sql.SQLException ne_tDBOutput_20 = e_tDBOutput_20.getNextException(),sqle_tDBOutput_20=null;
	    	String errormessage_tDBOutput_20;
			if (ne_tDBOutput_20 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_20 = new java.sql.SQLException(e_tDBOutput_20.getMessage() + "\ncaused by: " + ne_tDBOutput_20.getMessage(), ne_tDBOutput_20.getSQLState(), ne_tDBOutput_20.getErrorCode(), ne_tDBOutput_20);
				errormessage_tDBOutput_20 = sqle_tDBOutput_20.getMessage();
			}else{
				errormessage_tDBOutput_20 = e_tDBOutput_20.getMessage();
			}
	    	
	    		if (ne_tDBOutput_20 != null) {
	    			throw(sqle_tDBOutput_20);
	    		}else{
	            	throw(e_tDBOutput_20);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_20 != null) {
        		
            pstmt_tDBOutput_20.close();
            resourceMap.remove("pstmt_tDBOutput_20");
        }
    resourceMap.put("statementClosed_tDBOutput_20", true);

	nb_line_deleted_tDBOutput_20=nb_line_deleted_tDBOutput_20+ deletedCount_tDBOutput_20;
	nb_line_update_tDBOutput_20=nb_line_update_tDBOutput_20 + updatedCount_tDBOutput_20;
	nb_line_inserted_tDBOutput_20=nb_line_inserted_tDBOutput_20 + insertedCount_tDBOutput_20;
	nb_line_rejected_tDBOutput_20=nb_line_rejected_tDBOutput_20 + rejectedCount_tDBOutput_20;
	
        globalMap.put("tDBOutput_20_NB_LINE",nb_line_tDBOutput_20);
        globalMap.put("tDBOutput_20_NB_LINE_UPDATED",nb_line_update_tDBOutput_20);
        globalMap.put("tDBOutput_20_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_20);
        globalMap.put("tDBOutput_20_NB_LINE_DELETED",nb_line_deleted_tDBOutput_20);
        globalMap.put("tDBOutput_20_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_20);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_images");
			  	}
			  	
 

ok_Hash.put("tDBOutput_20", true);
end_Hash.put("tDBOutput_20", System.currentTimeMillis());




/**
 * [tDBOutput_20 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_30:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk20", 0, "ok");
								} 
							
							tDBInput_33Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_19"
					     			globalMap.remove("tHash_Lookup_row32"); 
				     			
					     			//free memory for "tMap_18"
					     			globalMap.remove("tHash_Lookup_row31"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_30 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_30";

	

 



/**
 * [tDBInput_30 finally ] stop
 */

	
	/**
	 * [tMap_18 finally ] start
	 */

	

	
	
	currentComponent="tMap_18";

	

 



/**
 * [tMap_18 finally ] stop
 */

	
	/**
	 * [tMap_19 finally ] start
	 */

	

	
	
	currentComponent="tMap_19";

	

 



/**
 * [tMap_19 finally ] stop
 */

	
	/**
	 * [tDBOutput_19 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_19";

	



    if (resourceMap.get("statementClosed_tDBOutput_19") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_19 = null;
                if ((pstmtToClose_tDBOutput_19 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_19")) != null) {
                    pstmtToClose_tDBOutput_19.close();
                }
    }
 



/**
 * [tDBOutput_19 finally ] stop
 */




	
	/**
	 * [tDBOutput_20 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_20";

	



    if (resourceMap.get("statementClosed_tDBOutput_20") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_20 = null;
                if ((pstmtToClose_tDBOutput_20 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_20")) != null) {
                    pstmtToClose_tDBOutput_20.close();
                }
    }
 



/**
 * [tDBOutput_20 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_30_SUBPROCESS_STATE", 1);
	}
	


public static class row44Struct implements routines.system.IPersistableRow<row44Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Boolean parsed;

				public Boolean getParsed () {
					return this.parsed;
				}
				
			    public java.util.Date last_migrated;

				public java.util.Date getLast_migrated () {
					return this.last_migrated;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row44Struct other = (row44Struct) obj;
		
						if (this.name == null) {
							if (other.name != null)
								return false;
						
						} else if (!this.name.equals(other.name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row44Struct other) {

		other.name = this.name;
	            other.parsed = this.parsed;
	            other.last_migrated = this.last_migrated;
	            
	}

	public void copyKeysDataTo(row44Struct other) {

		other.name = this.name;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.parsed = null;
           				} else {
           			    	this.parsed = dis.readBoolean();
           				}
					
					this.last_migrated = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.parsed = null;
           				} else {
           			    	this.parsed = dis.readBoolean();
           				}
					
					this.last_migrated = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Boolean
				
						if(this.parsed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.parsed);
		            	}
					
					// java.util.Date
				
						writeDate(this.last_migrated,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Boolean
				
						if(this.parsed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.parsed);
		            	}
					
					// java.util.Date
				
						writeDate(this.last_migrated,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",parsed="+String.valueOf(parsed));
		sb.append(",last_migrated="+String.valueOf(last_migrated));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row44Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.name, other.name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_33Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_33_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row44Struct row44 = new row44Struct();




	
	/**
	 * [tDBOutput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_21", false);
		start_Hash.put("tDBOutput_21", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_21";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row44");
					}
				
		int tos_count_tDBOutput_21 = 0;
		





String dbschema_tDBOutput_21 = null;
	dbschema_tDBOutput_21 = (String)globalMap.get("schema_" + "tDBConnection_3");
	

String tableName_tDBOutput_21 = null;
if(dbschema_tDBOutput_21 == null || dbschema_tDBOutput_21.trim().length() == 0) {
	tableName_tDBOutput_21 = ("parser_monitoring");
} else {
	tableName_tDBOutput_21 = dbschema_tDBOutput_21 + "\".\"" + ("parser_monitoring");
}

        int updateKeyCount_tDBOutput_21 = 1;
        if(updateKeyCount_tDBOutput_21 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_21 == 3 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_21 = 0;
int nb_line_update_tDBOutput_21 = 0;
int nb_line_inserted_tDBOutput_21 = 0;
int nb_line_deleted_tDBOutput_21 = 0;
int nb_line_rejected_tDBOutput_21 = 0;

int deletedCount_tDBOutput_21=0;
int updatedCount_tDBOutput_21=0;
int insertedCount_tDBOutput_21=0;
int rowsToCommitCount_tDBOutput_21=0;
int rejectedCount_tDBOutput_21=0;

boolean whetherReject_tDBOutput_21 = false;

java.sql.Connection conn_tDBOutput_21 = null;
String dbUser_tDBOutput_21 = null;

	conn_tDBOutput_21 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
	
	


   int batchSize_tDBOutput_21 = 10000;
   int batchSizeCounter_tDBOutput_21=0;

int count_tDBOutput_21=0;
	    String update_tDBOutput_21 = "UPDATE \"" + tableName_tDBOutput_21 + "\" SET \"parsed\" = ?,\"last_migrated\" = ? WHERE \"name\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_21 = conn_tDBOutput_21.prepareStatement(update_tDBOutput_21);
	    resourceMap.put("pstmt_tDBOutput_21", pstmt_tDBOutput_21);
	    

 



/**
 * [tDBOutput_21 begin ] stop
 */



	
	/**
	 * [tDBInput_33 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_33", false);
		start_Hash.put("tDBInput_33", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_33";

	
		int tos_count_tDBInput_33 = 0;
		
	
    
	
		    int nb_line_tDBInput_33 = 0;
		    java.sql.Connection conn_tDBInput_33 = null;
				conn_tDBInput_33 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
				
		    
			java.sql.Statement stmt_tDBInput_33 = conn_tDBInput_33.createStatement();

		    String dbquery_tDBInput_33 = "select 'upack' as name, false as parsed, now() as last_migrated";
		    

            	globalMap.put("tDBInput_33_QUERY",dbquery_tDBInput_33);
		    java.sql.ResultSet rs_tDBInput_33 = null;

		    try {
		    	rs_tDBInput_33 = stmt_tDBInput_33.executeQuery(dbquery_tDBInput_33);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_33 = rs_tDBInput_33.getMetaData();
		    	int colQtyInRs_tDBInput_33 = rsmd_tDBInput_33.getColumnCount();

		    String tmpContent_tDBInput_33 = null;
		    
		    
		    while (rs_tDBInput_33.next()) {
		        nb_line_tDBInput_33++;
		        
							if(colQtyInRs_tDBInput_33 < 1) {
								row44.name = null;
							} else {
	                         		
        	row44.name = routines.system.JDBCUtil.getString(rs_tDBInput_33, 1, false);
		                    }
							if(colQtyInRs_tDBInput_33 < 2) {
								row44.parsed = null;
							} else {
	                         		
            row44.parsed = rs_tDBInput_33.getBoolean(2);
            if(rs_tDBInput_33.wasNull()){
                    row44.parsed = null;
            }
		                    }
							if(colQtyInRs_tDBInput_33 < 3) {
								row44.last_migrated = null;
							} else {
										
			row44.last_migrated = routines.system.JDBCUtil.getDate(rs_tDBInput_33, 3);
		                    }
					


 



/**
 * [tDBInput_33 begin ] stop
 */
	
	/**
	 * [tDBInput_33 main ] start
	 */

	

	
	
	currentComponent="tDBInput_33";

	

 


	tos_count_tDBInput_33++;

/**
 * [tDBInput_33 main ] stop
 */
	
	/**
	 * [tDBInput_33 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_33";

	

 



/**
 * [tDBInput_33 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_21 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row44"
						
						);
					}
					



        whetherReject_tDBOutput_21 = false;
                    if(row44.parsed == null) {
pstmt_tDBOutput_21.setNull(1, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_21.setBoolean(1, row44.parsed);
}

                    if(row44.last_migrated != null) {
pstmt_tDBOutput_21.setTimestamp(2, new java.sql.Timestamp(row44.last_migrated.getTime()));
} else {
pstmt_tDBOutput_21.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(row44.name == null) {
pstmt_tDBOutput_21.setNull(3 + count_tDBOutput_21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_21.setString(3 + count_tDBOutput_21, row44.name);
}


    		pstmt_tDBOutput_21.addBatch();
    		nb_line_tDBOutput_21++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_21++;
    		  
            if(!whetherReject_tDBOutput_21) {
            }
    			if ((batchSize_tDBOutput_21 > 0) && (batchSize_tDBOutput_21 <= batchSizeCounter_tDBOutput_21)) {
                try {
						int countSum_tDBOutput_21 = 0;
						    
						for(int countEach_tDBOutput_21: pstmt_tDBOutput_21.executeBatch()) {
							countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
						}
				    	rowsToCommitCount_tDBOutput_21 += countSum_tDBOutput_21;
				    	
				    		updatedCount_tDBOutput_21 += countSum_tDBOutput_21;
				    	
            	    	batchSizeCounter_tDBOutput_21 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_21){
globalMap.put("tDBOutput_21_ERROR_MESSAGE",e_tDBOutput_21.getMessage());
				    	java.sql.SQLException ne_tDBOutput_21 = e_tDBOutput_21.getNextException(),sqle_tDBOutput_21=null;
				    	String errormessage_tDBOutput_21;
						if (ne_tDBOutput_21 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_21 = new java.sql.SQLException(e_tDBOutput_21.getMessage() + "\ncaused by: " + ne_tDBOutput_21.getMessage(), ne_tDBOutput_21.getSQLState(), ne_tDBOutput_21.getErrorCode(), ne_tDBOutput_21);
							errormessage_tDBOutput_21 = sqle_tDBOutput_21.getMessage();
						}else{
							errormessage_tDBOutput_21 = e_tDBOutput_21.getMessage();
						}
				    	
				    		if (ne_tDBOutput_21 != null) {
				    			throw(sqle_tDBOutput_21);
				    		}else{
				            	throw(e_tDBOutput_21);
				            }
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_21++;

/**
 * [tDBOutput_21 main ] stop
 */
	
	/**
	 * [tDBOutput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";

	

 



/**
 * [tDBOutput_21 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";

	

 



/**
 * [tDBOutput_21 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_33 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_33";

	

 



/**
 * [tDBInput_33 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_33 end ] start
	 */

	

	
	
	currentComponent="tDBInput_33";

	

	}
}finally{
	if (rs_tDBInput_33 != null) {
		rs_tDBInput_33.close();
	}
	if (stmt_tDBInput_33 != null) {
		stmt_tDBInput_33.close();
	}
}
globalMap.put("tDBInput_33_NB_LINE",nb_line_tDBInput_33);
 

ok_Hash.put("tDBInput_33", true);
end_Hash.put("tDBInput_33", System.currentTimeMillis());




/**
 * [tDBInput_33 end ] stop
 */

	
	/**
	 * [tDBOutput_21 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";

	



	    try {
				int countSum_tDBOutput_21 = 0;
				if (pstmt_tDBOutput_21 != null && batchSizeCounter_tDBOutput_21 > 0) {
						
					for(int countEach_tDBOutput_21: pstmt_tDBOutput_21.executeBatch()) {
						countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
					}
					rowsToCommitCount_tDBOutput_21 += countSum_tDBOutput_21;
						
				}
		    	
		    		updatedCount_tDBOutput_21 += countSum_tDBOutput_21;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_21){
globalMap.put("tDBOutput_21_ERROR_MESSAGE",e_tDBOutput_21.getMessage());
	    	java.sql.SQLException ne_tDBOutput_21 = e_tDBOutput_21.getNextException(),sqle_tDBOutput_21=null;
	    	String errormessage_tDBOutput_21;
			if (ne_tDBOutput_21 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_21 = new java.sql.SQLException(e_tDBOutput_21.getMessage() + "\ncaused by: " + ne_tDBOutput_21.getMessage(), ne_tDBOutput_21.getSQLState(), ne_tDBOutput_21.getErrorCode(), ne_tDBOutput_21);
				errormessage_tDBOutput_21 = sqle_tDBOutput_21.getMessage();
			}else{
				errormessage_tDBOutput_21 = e_tDBOutput_21.getMessage();
			}
	    	
	    		if (ne_tDBOutput_21 != null) {
	    			throw(sqle_tDBOutput_21);
	    		}else{
	            	throw(e_tDBOutput_21);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_21 != null) {
        		
            pstmt_tDBOutput_21.close();
            resourceMap.remove("pstmt_tDBOutput_21");
        }
    resourceMap.put("statementClosed_tDBOutput_21", true);

	nb_line_deleted_tDBOutput_21=nb_line_deleted_tDBOutput_21+ deletedCount_tDBOutput_21;
	nb_line_update_tDBOutput_21=nb_line_update_tDBOutput_21 + updatedCount_tDBOutput_21;
	nb_line_inserted_tDBOutput_21=nb_line_inserted_tDBOutput_21 + insertedCount_tDBOutput_21;
	nb_line_rejected_tDBOutput_21=nb_line_rejected_tDBOutput_21 + rejectedCount_tDBOutput_21;
	
        globalMap.put("tDBOutput_21_NB_LINE",nb_line_tDBOutput_21);
        globalMap.put("tDBOutput_21_NB_LINE_UPDATED",nb_line_update_tDBOutput_21);
        globalMap.put("tDBOutput_21_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_21);
        globalMap.put("tDBOutput_21_NB_LINE_DELETED",nb_line_deleted_tDBOutput_21);
        globalMap.put("tDBOutput_21_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_21);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row44");
			  	}
			  	
 

ok_Hash.put("tDBOutput_21", true);
end_Hash.put("tDBOutput_21", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBCommit_2Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBCommit_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBCommit_3Process(globalMap);



/**
 * [tDBOutput_21 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_33 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_33";

	

 



/**
 * [tDBInput_33 finally ] stop
 */

	
	/**
	 * [tDBOutput_21 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";

	



    if (resourceMap.get("statementClosed_tDBOutput_21") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_21 = null;
                if ((pstmtToClose_tDBOutput_21 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_21")) != null) {
                    pstmtToClose_tDBOutput_21.close();
                }
    }
 



/**
 * [tDBOutput_21 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_33_SUBPROCESS_STATE", 1);
	}
	

public void tDBRollback_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRollback_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRollback_1", false);
		start_Hash.put("tDBRollback_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRollback_1";

	
		int tos_count_tDBRollback_1 = 0;
		

 



/**
 * [tDBRollback_1 begin ] stop
 */
	
	/**
	 * [tDBRollback_1 main ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

	java.sql.Connection conn_tDBRollback_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBRollback_1 != null && !conn_tDBRollback_1.isClosed()) {
		
			try{
				
			conn_tDBRollback_1.rollback();
			
			}finally{
		    	
			conn_tDBRollback_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		    }
		
	}

 


	tos_count_tDBRollback_1++;

/**
 * [tDBRollback_1 main ] stop
 */
	
	/**
	 * [tDBRollback_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRollback_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRollback_1 end ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 

ok_Hash.put("tDBRollback_1", true);
end_Hash.put("tDBRollback_1", System.currentTimeMillis());




/**
 * [tDBRollback_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRollback_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBRollback_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRollback_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRollback_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRollback_2", false);
		start_Hash.put("tDBRollback_2", System.currentTimeMillis());
		
	
	currentComponent="tDBRollback_2";

	
		int tos_count_tDBRollback_2 = 0;
		

 



/**
 * [tDBRollback_2 begin ] stop
 */
	
	/**
	 * [tDBRollback_2 main ] start
	 */

	

	
	
	currentComponent="tDBRollback_2";

	

	java.sql.Connection conn_tDBRollback_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
	if(conn_tDBRollback_2 != null && !conn_tDBRollback_2.isClosed()) {
		
			try{
				
			conn_tDBRollback_2.rollback();
			
			}finally{
		    	
			conn_tDBRollback_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_3"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		    }
		
	}

 


	tos_count_tDBRollback_2++;

/**
 * [tDBRollback_2 main ] stop
 */
	
	/**
	 * [tDBRollback_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRollback_2";

	

 



/**
 * [tDBRollback_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBRollback_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRollback_2";

	

 



/**
 * [tDBRollback_2 process_data_end ] stop
 */
	
	/**
	 * [tDBRollback_2 end ] start
	 */

	

	
	
	currentComponent="tDBRollback_2";

	

 

ok_Hash.put("tDBRollback_2", true);
end_Hash.put("tDBRollback_2", System.currentTimeMillis());




/**
 * [tDBRollback_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRollback_2 finally ] start
	 */

	

	
	
	currentComponent="tDBRollback_2";

	

 



/**
 * [tDBRollback_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRollback_2_SUBPROCESS_STATE", 1);
	}
	

public void tDBRollback_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRollback_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRollback_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRollback_3", false);
		start_Hash.put("tDBRollback_3", System.currentTimeMillis());
		
	
	currentComponent="tDBRollback_3";

	
		int tos_count_tDBRollback_3 = 0;
		

 



/**
 * [tDBRollback_3 begin ] stop
 */
	
	/**
	 * [tDBRollback_3 main ] start
	 */

	

	
	
	currentComponent="tDBRollback_3";

	

	java.sql.Connection conn_tDBRollback_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	if(conn_tDBRollback_3 != null && !conn_tDBRollback_3.isClosed()) {
		
			try{
				
			conn_tDBRollback_3.rollback();
			
			}finally{
		    	
			conn_tDBRollback_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		    }
		
	}

 


	tos_count_tDBRollback_3++;

/**
 * [tDBRollback_3 main ] stop
 */
	
	/**
	 * [tDBRollback_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRollback_3";

	

 



/**
 * [tDBRollback_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBRollback_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRollback_3";

	

 



/**
 * [tDBRollback_3 process_data_end ] stop
 */
	
	/**
	 * [tDBRollback_3 end ] start
	 */

	

	
	
	currentComponent="tDBRollback_3";

	

 

ok_Hash.put("tDBRollback_3", true);
end_Hash.put("tDBRollback_3", System.currentTimeMillis());




/**
 * [tDBRollback_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRollback_3 finally ] start
	 */

	

	
	
	currentComponent="tDBRollback_3";

	

 



/**
 * [tDBRollback_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRollback_3_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBCommit_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_2", false);
		start_Hash.put("tDBCommit_2", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_2";

	
		int tos_count_tDBCommit_2 = 0;
		

 



/**
 * [tDBCommit_2 begin ] stop
 */
	
	/**
	 * [tDBCommit_2 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

	java.sql.Connection conn_tDBCommit_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	if(conn_tDBCommit_2 != null && !conn_tDBCommit_2.isClosed())
	{
	
		try{
	
			
			conn_tDBCommit_2.commit();
			
	
		}finally{
			
			conn_tDBCommit_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    }
	
	}

 


	tos_count_tDBCommit_2++;

/**
 * [tDBCommit_2 main ] stop
 */
	
	/**
	 * [tDBCommit_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 



/**
 * [tDBCommit_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 



/**
 * [tDBCommit_2 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_2 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 

ok_Hash.put("tDBCommit_2", true);
end_Hash.put("tDBCommit_2", System.currentTimeMillis());




/**
 * [tDBCommit_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBCommit_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk19", 0, "ok");
								} 
							
							tDBRow_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_2 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 



/**
 * [tDBCommit_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_2_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";

	
		int tos_count_tDBRow_1 = 0;
		

	java.sql.Connection conn_tDBRow_1 = null;
	String query_tDBRow_1 = "";
	boolean whetherReject_tDBRow_1 = false;
				conn_tDBRow_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
			
        resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
        java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
        resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);


 



/**
 * [tDBRow_1 begin ] stop
 */
	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

query_tDBRow_1 = "\nTRUNCATE TABLE  "+context.schema_in+".upack_products CASCADE;\nTRUNCATE TABLE  "+context.schema_in+".upack_pictures CASCADE;\nTRUNCATE TABLE  "+context.schema_in+".upack_characteristics CASCADE;\nTRUNCATE TABLE  "+context.schema_in+".upack_categories CASCADE;\n";
whetherReject_tDBRow_1 = false;
globalMap.put("tDBRow_1_QUERY",query_tDBRow_1);
try {
		stmt_tDBRow_1.execute(query_tDBRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_1 = true;
		
				System.err.print(e.getMessage());
				globalMap.put("tDBRow_1_ERROR_MESSAGE", e.getMessage());
				
	}
	

 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

	
        stmt_tDBRow_1.close();
        resourceMap.remove("stmt_tDBRow_1");
    resourceMap.put("statementClosed_tDBRow_1", true);
    resourceMap.put("finish_tDBRow_1", true);
 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());




/**
 * [tDBRow_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

    if (resourceMap.get("statementClosed_tDBRow_1") == null) {
            java.sql.Statement stmtToClose_tDBRow_1 = null;
            if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
                stmtToClose_tDBRow_1.close();
            }
    }
 



/**
 * [tDBRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_1", false);
		start_Hash.put("tDBCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_1";

	
		int tos_count_tDBCommit_1 = 0;
		

 



/**
 * [tDBCommit_1 begin ] stop
 */
	
	/**
	 * [tDBCommit_1 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

	java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
	if(conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed())
	{
	
		try{
	
			
			conn_tDBCommit_1.commit();
			
	
		}finally{
			
			conn_tDBCommit_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_3"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    }
	
	}

 


	tos_count_tDBCommit_1++;

/**
 * [tDBCommit_1 main ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_1 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 

ok_Hash.put("tDBCommit_1", true);
end_Hash.put("tDBCommit_1", System.currentTimeMillis());




/**
 * [tDBCommit_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBCommit_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_3", false);
		start_Hash.put("tDBCommit_3", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_3";

	
		int tos_count_tDBCommit_3 = 0;
		

 



/**
 * [tDBCommit_3 begin ] stop
 */
	
	/**
	 * [tDBCommit_3 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_3";

	

	java.sql.Connection conn_tDBCommit_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBCommit_3 != null && !conn_tDBCommit_3.isClosed())
	{
	
		try{
	
			
			conn_tDBCommit_3.commit();
			
	
		}finally{
			
			conn_tDBCommit_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    }
	
	}

 


	tos_count_tDBCommit_3++;

/**
 * [tDBCommit_3 main ] stop
 */
	
	/**
	 * [tDBCommit_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_3";

	

 



/**
 * [tDBCommit_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_3";

	

 



/**
 * [tDBCommit_3 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_3 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_3";

	

 

ok_Hash.put("tDBCommit_3", true);
end_Hash.put("tDBCommit_3", System.currentTimeMillis());




/**
 * [tDBCommit_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_3 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_3";

	

 



/**
 * [tDBCommit_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_3_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String name;

				public String getName () {
					return this.name;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.name == null) {
							if (other.name != null)
								return false;
						
						} else if (!this.name.equals(other.name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.name = this.name;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.name = this.name;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.name, other.name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_2) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2) outputs:(insert_categories_1,updateCategories_1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "select\n	name\nfrom "+context.schema_out+".upack_categories\n	where level = 1;";
		    

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row2.name = null;
							} else {
	                         		
        	row2.name = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.name = row2.name;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.name == null) {
							if (other.name != null)
								return false;
						
						} else if (!this.name.equals(other.name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.name = this.name;
	            other.id = this.id;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.name = this.name;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.id = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.id = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.id, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",id="+String.valueOf(id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.name, other.name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tDBInput_5 - inputs:(after_tDBInput_4) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_2 - inputs:(row3,row4) outputs:(copyOfsubjects)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				conn_tDBInput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "select\n	name, id\nfrom "+context.schema_out+".upack_categories\n	where level = 1;";
		    

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row4.name = null;
							} else {
	                         		
        	row4.name = routines.system.JDBCUtil.getString(rs_tDBInput_5, 1, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row4.id = null;
							} else {
		                          
            row4.id = rs_tDBInput_5.getInt(2);
            if(rs_tDBInput_5.wasNull()){
                    row4.id = null;
            }
		                    }
					


 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.name = row4.name;
				
				row4_HashRow.id = row4.id;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

tHash_Lookup_row4.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row25Struct implements routines.system.IPersistableComparableLookupRow<row25Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String name;

				public String getName () {
					return this.name;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row25Struct other = (row25Struct) obj;
		
						if (this.name == null) {
							if (other.name != null)
								return false;
						
						} else if (!this.name.equals(other.name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row25Struct other) {

		other.name = this.name;
	            
	}

	public void copyKeysDataTo(row25Struct other) {

		other.name = this.name;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.name, other.name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_25Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_25_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row25Struct row25 = new row25Struct();




	
	/**
	 * [tAdvancedHash_row25 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row25", false);
		start_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row25";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tAdvancedHash_row25 = 0;
		

			   		// connection name:row25
			   		// source node:tDBInput_25 - inputs:(after_tDBInput_24) outputs:(row25,row25) | target node:tAdvancedHash_row25 - inputs:(row25) outputs:()
			   		// linked node: tMap_14 - inputs:(row24,row25) outputs:(copyOfsubjects4)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row25 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row25Struct>getLookup(matchingModeEnum_row25);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row25", tHash_Lookup_row25);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row25 begin ] stop
 */



	
	/**
	 * [tDBInput_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_25", false);
		start_Hash.put("tDBInput_25", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_25";

	
		int tos_count_tDBInput_25 = 0;
		
	
    
	
		    int nb_line_tDBInput_25 = 0;
		    java.sql.Connection conn_tDBInput_25 = null;
				conn_tDBInput_25 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_25 = conn_tDBInput_25.createStatement();

		    String dbquery_tDBInput_25 = "select\n	name\nfrom "+context.schema_out+".attributes;";
		    

            	globalMap.put("tDBInput_25_QUERY",dbquery_tDBInput_25);
		    java.sql.ResultSet rs_tDBInput_25 = null;

		    try {
		    	rs_tDBInput_25 = stmt_tDBInput_25.executeQuery(dbquery_tDBInput_25);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_25 = rs_tDBInput_25.getMetaData();
		    	int colQtyInRs_tDBInput_25 = rsmd_tDBInput_25.getColumnCount();

		    String tmpContent_tDBInput_25 = null;
		    
		    
		    while (rs_tDBInput_25.next()) {
		        nb_line_tDBInput_25++;
		        
							if(colQtyInRs_tDBInput_25 < 1) {
								row25.name = null;
							} else {
	                         		
        	row25.name = routines.system.JDBCUtil.getString(rs_tDBInput_25, 1, false);
		                    }
					


 



/**
 * [tDBInput_25 begin ] stop
 */
	
	/**
	 * [tDBInput_25 main ] start
	 */

	

	
	
	currentComponent="tDBInput_25";

	

 


	tos_count_tDBInput_25++;

/**
 * [tDBInput_25 main ] stop
 */
	
	/**
	 * [tDBInput_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_25";

	

 



/**
 * [tDBInput_25 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row25"
						
						);
					}
					


			   
			   

					row25Struct row25_HashRow = new row25Struct();
		   	   	   
				
				row25_HashRow.name = row25.name;
				
			tHash_Lookup_row25.put(row25_HashRow);
			
            




 


	tos_count_tAdvancedHash_row25++;

/**
 * [tAdvancedHash_row25 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

 



/**
 * [tAdvancedHash_row25 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row25 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

 



/**
 * [tAdvancedHash_row25 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_25";

	

 



/**
 * [tDBInput_25 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_25 end ] start
	 */

	

	
	
	currentComponent="tDBInput_25";

	

	}
}finally{
	if (rs_tDBInput_25 != null) {
		rs_tDBInput_25.close();
	}
	if (stmt_tDBInput_25 != null) {
		stmt_tDBInput_25.close();
	}
}
globalMap.put("tDBInput_25_NB_LINE",nb_line_tDBInput_25);
 

ok_Hash.put("tDBInput_25", true);
end_Hash.put("tDBInput_25", System.currentTimeMillis());




/**
 * [tDBInput_25 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

tHash_Lookup_row25.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row25", true);
end_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());




/**
 * [tAdvancedHash_row25 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_25 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_25";

	

 



/**
 * [tDBInput_25 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

 



/**
 * [tAdvancedHash_row25 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_25_SUBPROCESS_STATE", 1);
	}
	


public static class row28Struct implements routines.system.IPersistableComparableLookupRow<row28Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long id;

				public Long getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row28Struct other = (row28Struct) obj;
		
						if (this.name == null) {
							if (other.name != null)
								return false;
						
						} else if (!this.name.equals(other.name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row28Struct other) {

		other.id = this.id;
	            other.name = this.name;
	            
	}

	public void copyKeysDataTo(row28Struct other) {

		other.name = this.name;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id = null;
           				} else {
           			    	this.id = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.id = null;
           				} else {
           			    	this.id = objectIn.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						if(this.id == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeLong(this.id);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.name, other.name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_28Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_28_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row28Struct row28 = new row28Struct();




	
	/**
	 * [tAdvancedHash_row28 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row28", false);
		start_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row28";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tAdvancedHash_row28 = 0;
		

			   		// connection name:row28
			   		// source node:tDBInput_28 - inputs:(after_tDBInput_27) outputs:(row28,row28) | target node:tAdvancedHash_row28 - inputs:(row28) outputs:()
			   		// linked node: tMap_16 - inputs:(row27,row28,row42) outputs:(copyOfproducts)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row28 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row28Struct>getLookup(matchingModeEnum_row28);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row28", tHash_Lookup_row28);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row28 begin ] stop
 */



	
	/**
	 * [tDBInput_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_28", false);
		start_Hash.put("tDBInput_28", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_28";

	
		int tos_count_tDBInput_28 = 0;
		
	
    
	
		    int nb_line_tDBInput_28 = 0;
		    java.sql.Connection conn_tDBInput_28 = null;
				conn_tDBInput_28 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_28 = conn_tDBInput_28.createStatement();

		    String dbquery_tDBInput_28 = "select\n	id, name \nfrom "+context.schema_out+".attributes;";
		    

            	globalMap.put("tDBInput_28_QUERY",dbquery_tDBInput_28);
		    java.sql.ResultSet rs_tDBInput_28 = null;

		    try {
		    	rs_tDBInput_28 = stmt_tDBInput_28.executeQuery(dbquery_tDBInput_28);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_28 = rs_tDBInput_28.getMetaData();
		    	int colQtyInRs_tDBInput_28 = rsmd_tDBInput_28.getColumnCount();

		    String tmpContent_tDBInput_28 = null;
		    
		    
		    while (rs_tDBInput_28.next()) {
		        nb_line_tDBInput_28++;
		        
							if(colQtyInRs_tDBInput_28 < 1) {
								row28.id = null;
							} else {
		                          
            row28.id = rs_tDBInput_28.getLong(1);
            if(rs_tDBInput_28.wasNull()){
                    row28.id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_28 < 2) {
								row28.name = null;
							} else {
	                         		
        	row28.name = routines.system.JDBCUtil.getString(rs_tDBInput_28, 2, false);
		                    }
					


 



/**
 * [tDBInput_28 begin ] stop
 */
	
	/**
	 * [tDBInput_28 main ] start
	 */

	

	
	
	currentComponent="tDBInput_28";

	

 


	tos_count_tDBInput_28++;

/**
 * [tDBInput_28 main ] stop
 */
	
	/**
	 * [tDBInput_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_28";

	

 



/**
 * [tDBInput_28 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row28 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row28"
						
						);
					}
					


			   
			   

					row28Struct row28_HashRow = new row28Struct();
		   	   	   
				
				row28_HashRow.id = row28.id;
				
				row28_HashRow.name = row28.name;
				
			tHash_Lookup_row28.put(row28_HashRow);
			
            




 


	tos_count_tAdvancedHash_row28++;

/**
 * [tAdvancedHash_row28 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	

 



/**
 * [tAdvancedHash_row28 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row28 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	

 



/**
 * [tAdvancedHash_row28 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_28";

	

 



/**
 * [tDBInput_28 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_28 end ] start
	 */

	

	
	
	currentComponent="tDBInput_28";

	

	}
}finally{
	if (rs_tDBInput_28 != null) {
		rs_tDBInput_28.close();
	}
	if (stmt_tDBInput_28 != null) {
		stmt_tDBInput_28.close();
	}
}
globalMap.put("tDBInput_28_NB_LINE",nb_line_tDBInput_28);
 

ok_Hash.put("tDBInput_28", true);
end_Hash.put("tDBInput_28", System.currentTimeMillis());




/**
 * [tDBInput_28 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row28 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	

tHash_Lookup_row28.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row28", true);
end_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());




/**
 * [tAdvancedHash_row28 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_28 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_28";

	

 



/**
 * [tDBInput_28 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row28 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	

 



/**
 * [tAdvancedHash_row28 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_28_SUBPROCESS_STATE", 1);
	}
	


public static class row29Struct implements routines.system.IPersistableComparableLookupRow<row29Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long product_id;

				public Long getProduct_id () {
					return this.product_id;
				}
				
			    public Long characteristic_id;

				public Long getCharacteristic_id () {
					return this.characteristic_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.product_id == null) ? 0 : this.product_id.hashCode());
					
						result = prime * result + ((this.characteristic_id == null) ? 0 : this.characteristic_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row29Struct other = (row29Struct) obj;
		
						if (this.product_id == null) {
							if (other.product_id != null)
								return false;
						
						} else if (!this.product_id.equals(other.product_id))
						
							return false;
					
						if (this.characteristic_id == null) {
							if (other.characteristic_id != null)
								return false;
						
						} else if (!this.characteristic_id.equals(other.characteristic_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row29Struct other) {

		other.product_id = this.product_id;
	            other.characteristic_id = this.characteristic_id;
	            
	}

	public void copyKeysDataTo(row29Struct other) {

		other.product_id = this.product_id;
	            	other.characteristic_id = this.characteristic_id;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.product_id = null;
           				} else {
           			    	this.product_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.characteristic_id = null;
           				} else {
           			    	this.characteristic_id = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.product_id = null;
           				} else {
           			    	this.product_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.characteristic_id = null;
           				} else {
           			    	this.characteristic_id = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.product_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.product_id);
		            	}
					
					// Long
				
						if(this.characteristic_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.characteristic_id);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Long
				
						if(this.product_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.product_id);
		            	}
					
					// Long
				
						if(this.characteristic_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.characteristic_id);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("product_id="+String.valueOf(product_id));
		sb.append(",characteristic_id="+String.valueOf(characteristic_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.product_id, other.product_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.characteristic_id, other.characteristic_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_29Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_29_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row29Struct row29 = new row29Struct();




	
	/**
	 * [tAdvancedHash_row29 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row29", false);
		start_Hash.put("tAdvancedHash_row29", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row29";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tAdvancedHash_row29 = 0;
		

			   		// connection name:row29
			   		// source node:tDBInput_29 - inputs:(after_tDBInput_27) outputs:(row29,row29) | target node:tAdvancedHash_row29 - inputs:(row29) outputs:()
			   		// linked node: tMap_17 - inputs:(copyOfproducts,row29) outputs:(copyOfinsert_products,copyOfupdate_products_0)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row29 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct> tHash_Lookup_row29 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row29Struct>getLookup(matchingModeEnum_row29);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row29", tHash_Lookup_row29);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row29 begin ] stop
 */



	
	/**
	 * [tDBInput_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_29", false);
		start_Hash.put("tDBInput_29", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_29";

	
		int tos_count_tDBInput_29 = 0;
		
	
    
	
		    int nb_line_tDBInput_29 = 0;
		    java.sql.Connection conn_tDBInput_29 = null;
				conn_tDBInput_29 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_29 = conn_tDBInput_29.createStatement();

		    String dbquery_tDBInput_29 = "select\n	product_id,\n	characteristic_id\nfrom "+context.schema_out+".upack_product_characteristics;";
		    

            	globalMap.put("tDBInput_29_QUERY",dbquery_tDBInput_29);
		    java.sql.ResultSet rs_tDBInput_29 = null;

		    try {
		    	rs_tDBInput_29 = stmt_tDBInput_29.executeQuery(dbquery_tDBInput_29);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_29 = rs_tDBInput_29.getMetaData();
		    	int colQtyInRs_tDBInput_29 = rsmd_tDBInput_29.getColumnCount();

		    String tmpContent_tDBInput_29 = null;
		    
		    
		    while (rs_tDBInput_29.next()) {
		        nb_line_tDBInput_29++;
		        
							if(colQtyInRs_tDBInput_29 < 1) {
								row29.product_id = null;
							} else {
		                          
            row29.product_id = rs_tDBInput_29.getLong(1);
            if(rs_tDBInput_29.wasNull()){
                    row29.product_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_29 < 2) {
								row29.characteristic_id = null;
							} else {
		                          
            row29.characteristic_id = rs_tDBInput_29.getLong(2);
            if(rs_tDBInput_29.wasNull()){
                    row29.characteristic_id = null;
            }
		                    }
					


 



/**
 * [tDBInput_29 begin ] stop
 */
	
	/**
	 * [tDBInput_29 main ] start
	 */

	

	
	
	currentComponent="tDBInput_29";

	

 


	tos_count_tDBInput_29++;

/**
 * [tDBInput_29 main ] stop
 */
	
	/**
	 * [tDBInput_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_29";

	

 



/**
 * [tDBInput_29 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row29 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row29"
						
						);
					}
					


			   
			   

					row29Struct row29_HashRow = new row29Struct();
		   	   	   
				
				row29_HashRow.product_id = row29.product_id;
				
				row29_HashRow.characteristic_id = row29.characteristic_id;
				
			tHash_Lookup_row29.put(row29_HashRow);
			
            




 


	tos_count_tAdvancedHash_row29++;

/**
 * [tAdvancedHash_row29 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";

	

 



/**
 * [tAdvancedHash_row29 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row29 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";

	

 



/**
 * [tAdvancedHash_row29 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_29";

	

 



/**
 * [tDBInput_29 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_29 end ] start
	 */

	

	
	
	currentComponent="tDBInput_29";

	

	}
}finally{
	if (rs_tDBInput_29 != null) {
		rs_tDBInput_29.close();
	}
	if (stmt_tDBInput_29 != null) {
		stmt_tDBInput_29.close();
	}
}
globalMap.put("tDBInput_29_NB_LINE",nb_line_tDBInput_29);
 

ok_Hash.put("tDBInput_29", true);
end_Hash.put("tDBInput_29", System.currentTimeMillis());




/**
 * [tDBInput_29 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row29 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";

	

tHash_Lookup_row29.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row29", true);
end_Hash.put("tAdvancedHash_row29", System.currentTimeMillis());




/**
 * [tAdvancedHash_row29 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_29 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_29";

	

 



/**
 * [tDBInput_29 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row29 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";

	

 



/**
 * [tAdvancedHash_row29 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_29_SUBPROCESS_STATE", 1);
	}
	


public static class row42Struct implements routines.system.IPersistableComparableLookupRow<row42Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long id;

				public Long getId () {
					return this.id;
				}
				
			    public String source_code;

				public String getSource_code () {
					return this.source_code;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.source_code == null) ? 0 : this.source_code.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row42Struct other = (row42Struct) obj;
		
						if (this.source_code == null) {
							if (other.source_code != null)
								return false;
						
						} else if (!this.source_code.equals(other.source_code))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row42Struct other) {

		other.id = this.id;
	            other.source_code = this.source_code;
	            
	}

	public void copyKeysDataTo(row42Struct other) {

		other.source_code = this.source_code;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id = null;
           				} else {
           			    	this.id = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.id = null;
           				} else {
           			    	this.id = objectIn.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						if(this.id == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeLong(this.id);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",source_code="+source_code);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row42Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.source_code, other.source_code);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_43Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_43_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row42Struct row42 = new row42Struct();




	
	/**
	 * [tAdvancedHash_row42 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row42", false);
		start_Hash.put("tAdvancedHash_row42", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row42";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row42");
					}
				
		int tos_count_tAdvancedHash_row42 = 0;
		

			   		// connection name:row42
			   		// source node:tDBInput_43 - inputs:(after_tDBInput_27) outputs:(row42,row42) | target node:tAdvancedHash_row42 - inputs:(row42) outputs:()
			   		// linked node: tMap_16 - inputs:(row27,row28,row42) outputs:(copyOfproducts)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row42 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct> tHash_Lookup_row42 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row42Struct>getLookup(matchingModeEnum_row42);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row42", tHash_Lookup_row42);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row42 begin ] stop
 */



	
	/**
	 * [tDBInput_43 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_43", false);
		start_Hash.put("tDBInput_43", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_43";

	
		int tos_count_tDBInput_43 = 0;
		
	
    
	
		    int nb_line_tDBInput_43 = 0;
		    java.sql.Connection conn_tDBInput_43 = null;
				conn_tDBInput_43 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_43 = conn_tDBInput_43.createStatement();

		    String dbquery_tDBInput_43 = "select\n	id, source_code\nfrom "+context.schema_out+".upack_products;";
		    

            	globalMap.put("tDBInput_43_QUERY",dbquery_tDBInput_43);
		    java.sql.ResultSet rs_tDBInput_43 = null;

		    try {
		    	rs_tDBInput_43 = stmt_tDBInput_43.executeQuery(dbquery_tDBInput_43);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_43 = rs_tDBInput_43.getMetaData();
		    	int colQtyInRs_tDBInput_43 = rsmd_tDBInput_43.getColumnCount();

		    String tmpContent_tDBInput_43 = null;
		    
		    
		    while (rs_tDBInput_43.next()) {
		        nb_line_tDBInput_43++;
		        
							if(colQtyInRs_tDBInput_43 < 1) {
								row42.id = null;
							} else {
		                          
            row42.id = rs_tDBInput_43.getLong(1);
            if(rs_tDBInput_43.wasNull()){
                    row42.id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_43 < 2) {
								row42.source_code = null;
							} else {
	                         		
        	row42.source_code = routines.system.JDBCUtil.getString(rs_tDBInput_43, 2, false);
		                    }
					


 



/**
 * [tDBInput_43 begin ] stop
 */
	
	/**
	 * [tDBInput_43 main ] start
	 */

	

	
	
	currentComponent="tDBInput_43";

	

 


	tos_count_tDBInput_43++;

/**
 * [tDBInput_43 main ] stop
 */
	
	/**
	 * [tDBInput_43 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_43";

	

 



/**
 * [tDBInput_43 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row42 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row42"
						
						);
					}
					


			   
			   

					row42Struct row42_HashRow = new row42Struct();
		   	   	   
				
				row42_HashRow.id = row42.id;
				
				row42_HashRow.source_code = row42.source_code;
				
			tHash_Lookup_row42.put(row42_HashRow);
			
            




 


	tos_count_tAdvancedHash_row42++;

/**
 * [tAdvancedHash_row42 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row42 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";

	

 



/**
 * [tAdvancedHash_row42 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row42 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";

	

 



/**
 * [tAdvancedHash_row42 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_43 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_43";

	

 



/**
 * [tDBInput_43 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_43 end ] start
	 */

	

	
	
	currentComponent="tDBInput_43";

	

	}
}finally{
	if (rs_tDBInput_43 != null) {
		rs_tDBInput_43.close();
	}
	if (stmt_tDBInput_43 != null) {
		stmt_tDBInput_43.close();
	}
}
globalMap.put("tDBInput_43_NB_LINE",nb_line_tDBInput_43);
 

ok_Hash.put("tDBInput_43", true);
end_Hash.put("tDBInput_43", System.currentTimeMillis());




/**
 * [tDBInput_43 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row42 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";

	

tHash_Lookup_row42.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row42");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row42", true);
end_Hash.put("tAdvancedHash_row42", System.currentTimeMillis());




/**
 * [tAdvancedHash_row42 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_43 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_43";

	

 



/**
 * [tDBInput_43 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row42 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";

	

 



/**
 * [tAdvancedHash_row42 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_43_SUBPROCESS_STATE", 1);
	}
	


public static class row34Struct implements routines.system.IPersistableComparableLookupRow<row34Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer category_id;

				public Integer getCategory_id () {
					return this.category_id;
				}
				
			    public Integer prod_id;

				public Integer getProd_id () {
					return this.prod_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.category_id == null) ? 0 : this.category_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row34Struct other = (row34Struct) obj;
		
						if (this.category_id == null) {
							if (other.category_id != null)
								return false;
						
						} else if (!this.category_id.equals(other.category_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row34Struct other) {

		other.category_id = this.category_id;
	            other.prod_id = this.prod_id;
	            
	}

	public void copyKeysDataTo(row34Struct other) {

		other.category_id = this.category_id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
						this.category_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
						this.category_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.category_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.category_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.prod_id = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.prod_id = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.prod_id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.prod_id, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("category_id="+String.valueOf(category_id));
		sb.append(",prod_id="+String.valueOf(prod_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.category_id, other.category_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_35Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_35_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row34Struct row34 = new row34Struct();




	
	/**
	 * [tAdvancedHash_row34 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row34", false);
		start_Hash.put("tAdvancedHash_row34", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row34";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tAdvancedHash_row34 = 0;
		

			   		// connection name:row34
			   		// source node:tDBInput_35 - inputs:(after_tDBInput_34) outputs:(row34,row34) | target node:tAdvancedHash_row34 - inputs:(row34) outputs:()
			   		// linked node: tMap_20 - inputs:(row33,row34) outputs:(mal)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row34 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct> tHash_Lookup_row34 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row34Struct>getLookup(matchingModeEnum_row34);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row34", tHash_Lookup_row34);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row34 begin ] stop
 */



	
	/**
	 * [tDBInput_35 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_35", false);
		start_Hash.put("tDBInput_35", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_35";

	
		int tos_count_tDBInput_35 = 0;
		
	
    
	
		    int nb_line_tDBInput_35 = 0;
		    java.sql.Connection conn_tDBInput_35 = null;
				conn_tDBInput_35 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_35 = conn_tDBInput_35.createStatement();

		    String dbquery_tDBInput_35 = "select\n	category_id, prod_id\nfrom "+context.schema_in+".upack_categories\n	where priority = 1;";
		    

            	globalMap.put("tDBInput_35_QUERY",dbquery_tDBInput_35);
		    java.sql.ResultSet rs_tDBInput_35 = null;

		    try {
		    	rs_tDBInput_35 = stmt_tDBInput_35.executeQuery(dbquery_tDBInput_35);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_35 = rs_tDBInput_35.getMetaData();
		    	int colQtyInRs_tDBInput_35 = rsmd_tDBInput_35.getColumnCount();

		    String tmpContent_tDBInput_35 = null;
		    
		    
		    while (rs_tDBInput_35.next()) {
		        nb_line_tDBInput_35++;
		        
							if(colQtyInRs_tDBInput_35 < 1) {
								row34.category_id = null;
							} else {
		                          
            row34.category_id = rs_tDBInput_35.getInt(1);
            if(rs_tDBInput_35.wasNull()){
                    row34.category_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_35 < 2) {
								row34.prod_id = null;
							} else {
		                          
            row34.prod_id = rs_tDBInput_35.getInt(2);
            if(rs_tDBInput_35.wasNull()){
                    row34.prod_id = null;
            }
		                    }
					


 



/**
 * [tDBInput_35 begin ] stop
 */
	
	/**
	 * [tDBInput_35 main ] start
	 */

	

	
	
	currentComponent="tDBInput_35";

	

 


	tos_count_tDBInput_35++;

/**
 * [tDBInput_35 main ] stop
 */
	
	/**
	 * [tDBInput_35 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_35";

	

 



/**
 * [tDBInput_35 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row34 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row34"
						
						);
					}
					


			   
			   

					row34Struct row34_HashRow = new row34Struct();
		   	   	   
				
				row34_HashRow.category_id = row34.category_id;
				
				row34_HashRow.prod_id = row34.prod_id;
				
			tHash_Lookup_row34.put(row34_HashRow);
			
            




 


	tos_count_tAdvancedHash_row34++;

/**
 * [tAdvancedHash_row34 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row34 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	

 



/**
 * [tAdvancedHash_row34 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row34 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	

 



/**
 * [tAdvancedHash_row34 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_35 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_35";

	

 



/**
 * [tDBInput_35 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_35 end ] start
	 */

	

	
	
	currentComponent="tDBInput_35";

	

	}
}finally{
	if (rs_tDBInput_35 != null) {
		rs_tDBInput_35.close();
	}
	if (stmt_tDBInput_35 != null) {
		stmt_tDBInput_35.close();
	}
}
globalMap.put("tDBInput_35_NB_LINE",nb_line_tDBInput_35);
 

ok_Hash.put("tDBInput_35", true);
end_Hash.put("tDBInput_35", System.currentTimeMillis());




/**
 * [tDBInput_35 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row34 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	

tHash_Lookup_row34.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row34", true);
end_Hash.put("tAdvancedHash_row34", System.currentTimeMillis());




/**
 * [tAdvancedHash_row34 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_35 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_35";

	

 



/**
 * [tDBInput_35 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row34 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	

 



/**
 * [tAdvancedHash_row34 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_35_SUBPROCESS_STATE", 1);
	}
	


public static class row35Struct implements routines.system.IPersistableComparableLookupRow<row35Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer parent_id;

				public Integer getParent_id () {
					return this.parent_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
					
						result = prime * result + ((this.parent_id == null) ? 0 : this.parent_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row35Struct other = (row35Struct) obj;
		
						if (this.name == null) {
							if (other.name != null)
								return false;
						
						} else if (!this.name.equals(other.name))
						
							return false;
					
						if (this.parent_id == null) {
							if (other.parent_id != null)
								return false;
						
						} else if (!this.parent_id.equals(other.parent_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row35Struct other) {

		other.name = this.name;
	            other.parent_id = this.parent_id;
	            
	}

	public void copyKeysDataTo(row35Struct other) {

		other.name = this.name;
	            	other.parent_id = this.parent_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.parent_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.parent_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.parent_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.parent_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",parent_id="+String.valueOf(parent_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.name, other.name);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.parent_id, other.parent_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_36Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_36_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row35Struct row35 = new row35Struct();




	
	/**
	 * [tAdvancedHash_row35 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row35", false);
		start_Hash.put("tAdvancedHash_row35", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row35";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tAdvancedHash_row35 = 0;
		

			   		// connection name:row35
			   		// source node:tDBInput_36 - inputs:(after_tDBInput_34) outputs:(row35,row35) | target node:tAdvancedHash_row35 - inputs:(row35) outputs:()
			   		// linked node: tMap_21 - inputs:(mal,row35) outputs:(insert,update)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row35 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct> tHash_Lookup_row35 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row35Struct>getLookup(matchingModeEnum_row35);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row35", tHash_Lookup_row35);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row35 begin ] stop
 */



	
	/**
	 * [tDBInput_36 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_36", false);
		start_Hash.put("tDBInput_36", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_36";

	
		int tos_count_tDBInput_36 = 0;
		
	
    
	
		    int nb_line_tDBInput_36 = 0;
		    java.sql.Connection conn_tDBInput_36 = null;
				conn_tDBInput_36 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_36 = conn_tDBInput_36.createStatement();

		    String dbquery_tDBInput_36 = "select\n	name, parent_id\nfrom "+context.schema_out+".upack_categories\n	where level = 2;";
		    

            	globalMap.put("tDBInput_36_QUERY",dbquery_tDBInput_36);
		    java.sql.ResultSet rs_tDBInput_36 = null;

		    try {
		    	rs_tDBInput_36 = stmt_tDBInput_36.executeQuery(dbquery_tDBInput_36);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_36 = rs_tDBInput_36.getMetaData();
		    	int colQtyInRs_tDBInput_36 = rsmd_tDBInput_36.getColumnCount();

		    String tmpContent_tDBInput_36 = null;
		    
		    
		    while (rs_tDBInput_36.next()) {
		        nb_line_tDBInput_36++;
		        
							if(colQtyInRs_tDBInput_36 < 1) {
								row35.name = null;
							} else {
	                         		
        	row35.name = routines.system.JDBCUtil.getString(rs_tDBInput_36, 1, false);
		                    }
							if(colQtyInRs_tDBInput_36 < 2) {
								row35.parent_id = null;
							} else {
		                          
            row35.parent_id = rs_tDBInput_36.getInt(2);
            if(rs_tDBInput_36.wasNull()){
                    row35.parent_id = null;
            }
		                    }
					


 



/**
 * [tDBInput_36 begin ] stop
 */
	
	/**
	 * [tDBInput_36 main ] start
	 */

	

	
	
	currentComponent="tDBInput_36";

	

 


	tos_count_tDBInput_36++;

/**
 * [tDBInput_36 main ] stop
 */
	
	/**
	 * [tDBInput_36 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_36";

	

 



/**
 * [tDBInput_36 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row35 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row35"
						
						);
					}
					


			   
			   

					row35Struct row35_HashRow = new row35Struct();
		   	   	   
				
				row35_HashRow.name = row35.name;
				
				row35_HashRow.parent_id = row35.parent_id;
				
			tHash_Lookup_row35.put(row35_HashRow);
			
            




 


	tos_count_tAdvancedHash_row35++;

/**
 * [tAdvancedHash_row35 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row35 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";

	

 



/**
 * [tAdvancedHash_row35 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row35 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";

	

 



/**
 * [tAdvancedHash_row35 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_36 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_36";

	

 



/**
 * [tDBInput_36 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_36 end ] start
	 */

	

	
	
	currentComponent="tDBInput_36";

	

	}
}finally{
	if (rs_tDBInput_36 != null) {
		rs_tDBInput_36.close();
	}
	if (stmt_tDBInput_36 != null) {
		stmt_tDBInput_36.close();
	}
}
globalMap.put("tDBInput_36_NB_LINE",nb_line_tDBInput_36);
 

ok_Hash.put("tDBInput_36", true);
end_Hash.put("tDBInput_36", System.currentTimeMillis());




/**
 * [tDBInput_36 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row35 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";

	

tHash_Lookup_row35.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row35", true);
end_Hash.put("tAdvancedHash_row35", System.currentTimeMillis());




/**
 * [tAdvancedHash_row35 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_36 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_36";

	

 



/**
 * [tDBInput_36 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row35 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";

	

 



/**
 * [tAdvancedHash_row35 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_36_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer category_id;

				public Integer getCategory_id () {
					return this.category_id;
				}
				
			    public Integer prod_id;

				public Integer getProd_id () {
					return this.prod_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.category_id == null) ? 0 : this.category_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.category_id == null) {
							if (other.category_id != null)
								return false;
						
						} else if (!this.category_id.equals(other.category_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.category_id = this.category_id;
	            other.prod_id = this.prod_id;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.category_id = this.category_id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
						this.category_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
						this.category_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.category_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.category_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.prod_id = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.prod_id = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.prod_id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.prod_id, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("category_id="+String.valueOf(category_id));
		sb.append(",prod_id="+String.valueOf(prod_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.category_id, other.category_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tAdvancedHash_row8 = 0;
		

			   		// connection name:row8
			   		// source node:tDBInput_10 - inputs:(after_tDBInput_12) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_6 - inputs:(row10,row8) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tDBInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_10", false);
		start_Hash.put("tDBInput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_10";

	
		int tos_count_tDBInput_10 = 0;
		
	
    
	
		    int nb_line_tDBInput_10 = 0;
		    java.sql.Connection conn_tDBInput_10 = null;
				conn_tDBInput_10 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

		    String dbquery_tDBInput_10 = "select\n	category_id,prod_id\nfrom "+context.schema_in+".upack_categories\n	where priority = 1 and name is not NULL;";
		    

            	globalMap.put("tDBInput_10_QUERY",dbquery_tDBInput_10);
		    java.sql.ResultSet rs_tDBInput_10 = null;

		    try {
		    	rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
		    	int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

		    String tmpContent_tDBInput_10 = null;
		    
		    
		    while (rs_tDBInput_10.next()) {
		        nb_line_tDBInput_10++;
		        
							if(colQtyInRs_tDBInput_10 < 1) {
								row8.category_id = null;
							} else {
		                          
            row8.category_id = rs_tDBInput_10.getInt(1);
            if(rs_tDBInput_10.wasNull()){
                    row8.category_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 2) {
								row8.prod_id = null;
							} else {
		                          
            row8.prod_id = rs_tDBInput_10.getInt(2);
            if(rs_tDBInput_10.wasNull()){
                    row8.prod_id = null;
            }
		                    }
					


 



/**
 * [tDBInput_10 begin ] stop
 */
	
	/**
	 * [tDBInput_10 main ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 


	tos_count_tDBInput_10++;

/**
 * [tDBInput_10 main ] stop
 */
	
	/**
	 * [tDBInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.category_id = row8.category_id;
				
				row8_HashRow.prod_id = row8.prod_id;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_10 end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

	}
}finally{
	if (rs_tDBInput_10 != null) {
		rs_tDBInput_10.close();
	}
	if (stmt_tDBInput_10 != null) {
		stmt_tDBInput_10.close();
	}
}
globalMap.put("tDBInput_10_NB_LINE",nb_line_tDBInput_10);
 

ok_Hash.put("tDBInput_10", true);
end_Hash.put("tDBInput_10", System.currentTimeMillis());




/**
 * [tDBInput_10 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

tHash_Lookup_row8.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public Integer parent_id;

				public Integer getParent_id () {
					return this.parent_id;
				}
				
			    public java.util.Date relevance;

				public java.util.Date getRelevance () {
					return this.relevance;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
					
						result = prime * result + ((this.parent_id == null) ? 0 : this.parent_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.name == null) {
							if (other.name != null)
								return false;
						
						} else if (!this.name.equals(other.name))
						
							return false;
					
						if (this.parent_id == null) {
							if (other.parent_id != null)
								return false;
						
						} else if (!this.parent_id.equals(other.parent_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.name = this.name;
	            other.id = this.id;
	            other.parent_id = this.parent_id;
	            other.relevance = this.relevance;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.name = this.name;
	            	other.parent_id = this.parent_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.parent_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
						this.parent_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.parent_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// Integer
				
						writeInteger(this.parent_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.id = readInteger(dis,ois);
					
						this.relevance = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.id = readInteger(dis,objectIn);
					
						this.relevance = readDate(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.id, dos, oos);
					
						writeDate(this.relevance, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.id, dos, objectOut);
					
						writeDate(this.relevance, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",id="+String.valueOf(id));
		sb.append(",parent_id="+String.valueOf(parent_id));
		sb.append(",relevance="+String.valueOf(relevance));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.name, other.name);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.parent_id, other.parent_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tAdvancedHash_row6 = 0;
		

			   		// connection name:row6
			   		// source node:tDBInput_11 - inputs:(after_tDBInput_12) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_4 - inputs:(out1,row6) outputs:(upd)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tDBInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_11", false);
		start_Hash.put("tDBInput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_11";

	
		int tos_count_tDBInput_11 = 0;
		
	
    
	
		    int nb_line_tDBInput_11 = 0;
		    java.sql.Connection conn_tDBInput_11 = null;
				conn_tDBInput_11 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();

		    String dbquery_tDBInput_11 = "select\n	name, \n	id,\n	parent_id, \n	now() as relevance\nfrom "+context.schema_out+".upack_categories\n	where level = 2;";
		    

            	globalMap.put("tDBInput_11_QUERY",dbquery_tDBInput_11);
		    java.sql.ResultSet rs_tDBInput_11 = null;

		    try {
		    	rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
		    	int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

		    String tmpContent_tDBInput_11 = null;
		    
		    
		    while (rs_tDBInput_11.next()) {
		        nb_line_tDBInput_11++;
		        
							if(colQtyInRs_tDBInput_11 < 1) {
								row6.name = null;
							} else {
	                         		
        	row6.name = routines.system.JDBCUtil.getString(rs_tDBInput_11, 1, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 2) {
								row6.id = null;
							} else {
		                          
            row6.id = rs_tDBInput_11.getInt(2);
            if(rs_tDBInput_11.wasNull()){
                    row6.id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 3) {
								row6.parent_id = null;
							} else {
		                          
            row6.parent_id = rs_tDBInput_11.getInt(3);
            if(rs_tDBInput_11.wasNull()){
                    row6.parent_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 4) {
								row6.relevance = null;
							} else {
										
			row6.relevance = routines.system.JDBCUtil.getDate(rs_tDBInput_11, 4);
		                    }
					


 



/**
 * [tDBInput_11 begin ] stop
 */
	
	/**
	 * [tDBInput_11 main ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 


	tos_count_tDBInput_11++;

/**
 * [tDBInput_11 main ] stop
 */
	
	/**
	 * [tDBInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.name = row6.name;
				
				row6_HashRow.id = row6.id;
				
				row6_HashRow.parent_id = row6.parent_id;
				
				row6_HashRow.relevance = row6.relevance;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_11 end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

	}
}finally{
	if (rs_tDBInput_11 != null) {
		rs_tDBInput_11.close();
	}
	if (stmt_tDBInput_11 != null) {
		stmt_tDBInput_11.close();
	}
}
globalMap.put("tDBInput_11_NB_LINE",nb_line_tDBInput_11);
 

ok_Hash.put("tDBInput_11", true);
end_Hash.put("tDBInput_11", System.currentTimeMillis());




/**
 * [tDBInput_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

tHash_Lookup_row6.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row31Struct implements routines.system.IPersistableComparableLookupRow<row31Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long id;

				public Long getId () {
					return this.id;
				}
				
			    public String source_code;

				public String getSource_code () {
					return this.source_code;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.source_code == null) ? 0 : this.source_code.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row31Struct other = (row31Struct) obj;
		
						if (this.source_code == null) {
							if (other.source_code != null)
								return false;
						
						} else if (!this.source_code.equals(other.source_code))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row31Struct other) {

		other.id = this.id;
	            other.source_code = this.source_code;
	            
	}

	public void copyKeysDataTo(row31Struct other) {

		other.source_code = this.source_code;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id = null;
           				} else {
           			    	this.id = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.id = null;
           				} else {
           			    	this.id = objectIn.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						if(this.id == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeLong(this.id);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",source_code="+source_code);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.source_code, other.source_code);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_31Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_31_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row31Struct row31 = new row31Struct();




	
	/**
	 * [tAdvancedHash_row31 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row31", false);
		start_Hash.put("tAdvancedHash_row31", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row31";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tAdvancedHash_row31 = 0;
		

			   		// connection name:row31
			   		// source node:tDBInput_31 - inputs:(after_tDBInput_30) outputs:(row31,row31) | target node:tAdvancedHash_row31 - inputs:(row31) outputs:()
			   		// linked node: tMap_18 - inputs:(row30,row31) outputs:(images)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row31 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct> tHash_Lookup_row31 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row31Struct>getLookup(matchingModeEnum_row31);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row31", tHash_Lookup_row31);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row31 begin ] stop
 */



	
	/**
	 * [tDBInput_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_31", false);
		start_Hash.put("tDBInput_31", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_31";

	
		int tos_count_tDBInput_31 = 0;
		
	
    
	
		    int nb_line_tDBInput_31 = 0;
		    java.sql.Connection conn_tDBInput_31 = null;
				conn_tDBInput_31 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_31 = conn_tDBInput_31.createStatement();

		    String dbquery_tDBInput_31 = "select\n	id, source_code\nfrom "+context.schema_out+".upack_products;";
		    

            	globalMap.put("tDBInput_31_QUERY",dbquery_tDBInput_31);
		    java.sql.ResultSet rs_tDBInput_31 = null;

		    try {
		    	rs_tDBInput_31 = stmt_tDBInput_31.executeQuery(dbquery_tDBInput_31);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_31 = rs_tDBInput_31.getMetaData();
		    	int colQtyInRs_tDBInput_31 = rsmd_tDBInput_31.getColumnCount();

		    String tmpContent_tDBInput_31 = null;
		    
		    
		    while (rs_tDBInput_31.next()) {
		        nb_line_tDBInput_31++;
		        
							if(colQtyInRs_tDBInput_31 < 1) {
								row31.id = null;
							} else {
		                          
            row31.id = rs_tDBInput_31.getLong(1);
            if(rs_tDBInput_31.wasNull()){
                    row31.id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_31 < 2) {
								row31.source_code = null;
							} else {
	                         		
        	row31.source_code = routines.system.JDBCUtil.getString(rs_tDBInput_31, 2, false);
		                    }
					


 



/**
 * [tDBInput_31 begin ] stop
 */
	
	/**
	 * [tDBInput_31 main ] start
	 */

	

	
	
	currentComponent="tDBInput_31";

	

 


	tos_count_tDBInput_31++;

/**
 * [tDBInput_31 main ] stop
 */
	
	/**
	 * [tDBInput_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_31";

	

 



/**
 * [tDBInput_31 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row31 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row31"
						
						);
					}
					


			   
			   

					row31Struct row31_HashRow = new row31Struct();
		   	   	   
				
				row31_HashRow.id = row31.id;
				
				row31_HashRow.source_code = row31.source_code;
				
			tHash_Lookup_row31.put(row31_HashRow);
			
            




 


	tos_count_tAdvancedHash_row31++;

/**
 * [tAdvancedHash_row31 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";

	

 



/**
 * [tAdvancedHash_row31 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row31 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";

	

 



/**
 * [tAdvancedHash_row31 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_31";

	

 



/**
 * [tDBInput_31 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_31 end ] start
	 */

	

	
	
	currentComponent="tDBInput_31";

	

	}
}finally{
	if (rs_tDBInput_31 != null) {
		rs_tDBInput_31.close();
	}
	if (stmt_tDBInput_31 != null) {
		stmt_tDBInput_31.close();
	}
}
globalMap.put("tDBInput_31_NB_LINE",nb_line_tDBInput_31);
 

ok_Hash.put("tDBInput_31", true);
end_Hash.put("tDBInput_31", System.currentTimeMillis());




/**
 * [tDBInput_31 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row31 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";

	

tHash_Lookup_row31.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row31", true);
end_Hash.put("tAdvancedHash_row31", System.currentTimeMillis());




/**
 * [tAdvancedHash_row31 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_31 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_31";

	

 



/**
 * [tDBInput_31 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row31 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";

	

 



/**
 * [tAdvancedHash_row31 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_31_SUBPROCESS_STATE", 1);
	}
	


public static class row32Struct implements routines.system.IPersistableComparableLookupRow<row32Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long product_id;

				public Long getProduct_id () {
					return this.product_id;
				}
				
			    public String file_path;

				public String getFile_path () {
					return this.file_path;
				}
				
			    public String image_url;

				public String getImage_url () {
					return this.image_url;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.file_path == null) ? 0 : this.file_path.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row32Struct other = (row32Struct) obj;
		
						if (this.file_path == null) {
							if (other.file_path != null)
								return false;
						
						} else if (!this.file_path.equals(other.file_path))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row32Struct other) {

		other.product_id = this.product_id;
	            other.file_path = this.file_path;
	            other.image_url = this.image_url;
	            
	}

	public void copyKeysDataTo(row32Struct other) {

		other.file_path = this.file_path;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.file_path = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.file_path = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.file_path,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.file_path,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.product_id = null;
           				} else {
           			    	this.product_id = dis.readLong();
           				}
					
						this.image_url = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.product_id = null;
           				} else {
           			    	this.product_id = objectIn.readLong();
           				}
					
						this.image_url = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.product_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.product_id);
		            	}
					
						writeString(this.image_url, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						if(this.product_id == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeLong(this.product_id);
		            	}
					
						writeString(this.image_url, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("product_id="+String.valueOf(product_id));
		sb.append(",file_path="+file_path);
		sb.append(",image_url="+image_url);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.file_path, other.file_path);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_32Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_32_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row32Struct row32 = new row32Struct();




	
	/**
	 * [tAdvancedHash_row32 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row32", false);
		start_Hash.put("tAdvancedHash_row32", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row32";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tAdvancedHash_row32 = 0;
		

			   		// connection name:row32
			   		// source node:tDBInput_32 - inputs:(after_tDBInput_30) outputs:(row32,row32) | target node:tAdvancedHash_row32 - inputs:(row32) outputs:()
			   		// linked node: tMap_19 - inputs:(images,row32) outputs:(insert_images,update_images)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row32 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct> tHash_Lookup_row32 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row32Struct>getLookup(matchingModeEnum_row32);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row32", tHash_Lookup_row32);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row32 begin ] stop
 */



	
	/**
	 * [tDBInput_32 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_32", false);
		start_Hash.put("tDBInput_32", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_32";

	
		int tos_count_tDBInput_32 = 0;
		
	
    
	
		    int nb_line_tDBInput_32 = 0;
		    java.sql.Connection conn_tDBInput_32 = null;
				conn_tDBInput_32 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_32 = conn_tDBInput_32.createStatement();

		    String dbquery_tDBInput_32 = "select \n	product_id,\n	file_path,\n	image_url\nfrom "+context.schema_out+".upack_images;";
		    

            	globalMap.put("tDBInput_32_QUERY",dbquery_tDBInput_32);
		    java.sql.ResultSet rs_tDBInput_32 = null;

		    try {
		    	rs_tDBInput_32 = stmt_tDBInput_32.executeQuery(dbquery_tDBInput_32);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_32 = rs_tDBInput_32.getMetaData();
		    	int colQtyInRs_tDBInput_32 = rsmd_tDBInput_32.getColumnCount();

		    String tmpContent_tDBInput_32 = null;
		    
		    
		    while (rs_tDBInput_32.next()) {
		        nb_line_tDBInput_32++;
		        
							if(colQtyInRs_tDBInput_32 < 1) {
								row32.product_id = null;
							} else {
		                          
            row32.product_id = rs_tDBInput_32.getLong(1);
            if(rs_tDBInput_32.wasNull()){
                    row32.product_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_32 < 2) {
								row32.file_path = null;
							} else {
	                         		
        	row32.file_path = routines.system.JDBCUtil.getString(rs_tDBInput_32, 2, false);
		                    }
							if(colQtyInRs_tDBInput_32 < 3) {
								row32.image_url = null;
							} else {
	                         		
        	row32.image_url = routines.system.JDBCUtil.getString(rs_tDBInput_32, 3, false);
		                    }
					


 



/**
 * [tDBInput_32 begin ] stop
 */
	
	/**
	 * [tDBInput_32 main ] start
	 */

	

	
	
	currentComponent="tDBInput_32";

	

 


	tos_count_tDBInput_32++;

/**
 * [tDBInput_32 main ] stop
 */
	
	/**
	 * [tDBInput_32 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_32";

	

 



/**
 * [tDBInput_32 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row32 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row32"
						
						);
					}
					


			   
			   

					row32Struct row32_HashRow = new row32Struct();
		   	   	   
				
				row32_HashRow.product_id = row32.product_id;
				
				row32_HashRow.file_path = row32.file_path;
				
				row32_HashRow.image_url = row32.image_url;
				
			tHash_Lookup_row32.put(row32_HashRow);
			
            




 


	tos_count_tAdvancedHash_row32++;

/**
 * [tAdvancedHash_row32 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row32 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";

	

 



/**
 * [tAdvancedHash_row32 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row32 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";

	

 



/**
 * [tAdvancedHash_row32 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_32 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_32";

	

 



/**
 * [tDBInput_32 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_32 end ] start
	 */

	

	
	
	currentComponent="tDBInput_32";

	

	}
}finally{
	if (rs_tDBInput_32 != null) {
		rs_tDBInput_32.close();
	}
	if (stmt_tDBInput_32 != null) {
		stmt_tDBInput_32.close();
	}
}
globalMap.put("tDBInput_32_NB_LINE",nb_line_tDBInput_32);
 

ok_Hash.put("tDBInput_32", true);
end_Hash.put("tDBInput_32", System.currentTimeMillis());




/**
 * [tDBInput_32 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row32 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";

	

tHash_Lookup_row32.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row32", true);
end_Hash.put("tAdvancedHash_row32", System.currentTimeMillis());




/**
 * [tAdvancedHash_row32 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_32 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_32";

	

 



/**
 * [tDBInput_32 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row32 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";

	

 



/**
 * [tAdvancedHash_row32 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_32_SUBPROCESS_STATE", 1);
	}
	


public static class row23Struct implements routines.system.IPersistableComparableLookupRow<row23Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String source_code;

				public String getSource_code () {
					return this.source_code;
				}
				
			    public java.util.Date relevance;

				public java.util.Date getRelevance () {
					return this.relevance;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.source_code == null) ? 0 : this.source_code.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row23Struct other = (row23Struct) obj;
		
						if (this.source_code == null) {
							if (other.source_code != null)
								return false;
						
						} else if (!this.source_code.equals(other.source_code))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row23Struct other) {

		other.source_code = this.source_code;
	            other.relevance = this.relevance;
	            
	}

	public void copyKeysDataTo(row23Struct other) {

		other.source_code = this.source_code;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_UPACK_upack_job.length) {
				if(length < 1024 && commonByteArray_UPACK_upack_job.length == 0) {
   					commonByteArray_UPACK_upack_job = new byte[1024];
				} else {
   					commonByteArray_UPACK_upack_job = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_UPACK_upack_job, 0, length);
			strReturn = new String(commonByteArray_UPACK_upack_job, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
					this.source_code = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.source_code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.relevance = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.relevance = readDate(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeDate(this.relevance, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeDate(this.relevance, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("source_code="+source_code);
		sb.append(",relevance="+String.valueOf(relevance));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.source_code, other.source_code);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_23_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row23Struct row23 = new row23Struct();




	
	/**
	 * [tAdvancedHash_row23 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row23", false);
		start_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row23";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tAdvancedHash_row23 = 0;
		

			   		// connection name:row23
			   		// source node:tDBInput_23 - inputs:(after_tDBInput_22) outputs:(row23,row23) | target node:tAdvancedHash_row23 - inputs:(row23) outputs:()
			   		// linked node: tMap_13 - inputs:(products,row23) outputs:(insert_products,update_products)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row23 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row23Struct>getLookup(matchingModeEnum_row23);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row23", tHash_Lookup_row23);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row23 begin ] stop
 */



	
	/**
	 * [tDBInput_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_23", false);
		start_Hash.put("tDBInput_23", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_23";

	
		int tos_count_tDBInput_23 = 0;
		
	
    
	
		    int nb_line_tDBInput_23 = 0;
		    java.sql.Connection conn_tDBInput_23 = null;
				conn_tDBInput_23 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_23 = conn_tDBInput_23.createStatement();

		    String dbquery_tDBInput_23 = "select\n	source_code,\n	now() as relevance\nfrom "+context.schema_out+".upack_products;";
		    

            	globalMap.put("tDBInput_23_QUERY",dbquery_tDBInput_23);
		    java.sql.ResultSet rs_tDBInput_23 = null;

		    try {
		    	rs_tDBInput_23 = stmt_tDBInput_23.executeQuery(dbquery_tDBInput_23);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_23 = rs_tDBInput_23.getMetaData();
		    	int colQtyInRs_tDBInput_23 = rsmd_tDBInput_23.getColumnCount();

		    String tmpContent_tDBInput_23 = null;
		    
		    
		    while (rs_tDBInput_23.next()) {
		        nb_line_tDBInput_23++;
		        
							if(colQtyInRs_tDBInput_23 < 1) {
								row23.source_code = null;
							} else {
	                         		
        	row23.source_code = routines.system.JDBCUtil.getString(rs_tDBInput_23, 1, false);
		                    }
							if(colQtyInRs_tDBInput_23 < 2) {
								row23.relevance = null;
							} else {
										
			row23.relevance = routines.system.JDBCUtil.getDate(rs_tDBInput_23, 2);
		                    }
					


 



/**
 * [tDBInput_23 begin ] stop
 */
	
	/**
	 * [tDBInput_23 main ] start
	 */

	

	
	
	currentComponent="tDBInput_23";

	

 


	tos_count_tDBInput_23++;

/**
 * [tDBInput_23 main ] stop
 */
	
	/**
	 * [tDBInput_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_23";

	

 



/**
 * [tDBInput_23 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row23"
						
						);
					}
					


			   
			   

					row23Struct row23_HashRow = new row23Struct();
		   	   	   
				
				row23_HashRow.source_code = row23.source_code;
				
				row23_HashRow.relevance = row23.relevance;
				
			tHash_Lookup_row23.put(row23_HashRow);
			
            




 


	tos_count_tAdvancedHash_row23++;

/**
 * [tAdvancedHash_row23 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

 



/**
 * [tAdvancedHash_row23 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row23 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

 



/**
 * [tAdvancedHash_row23 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_23";

	

 



/**
 * [tDBInput_23 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_23 end ] start
	 */

	

	
	
	currentComponent="tDBInput_23";

	

	}
}finally{
	if (rs_tDBInput_23 != null) {
		rs_tDBInput_23.close();
	}
	if (stmt_tDBInput_23 != null) {
		stmt_tDBInput_23.close();
	}
}
globalMap.put("tDBInput_23_NB_LINE",nb_line_tDBInput_23);
 

ok_Hash.put("tDBInput_23", true);
end_Hash.put("tDBInput_23", System.currentTimeMillis());




/**
 * [tDBInput_23 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

tHash_Lookup_row23.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row23", true);
end_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());




/**
 * [tAdvancedHash_row23 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_23 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_23";

	

 



/**
 * [tDBInput_23 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

 



/**
 * [tAdvancedHash_row23 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_23_SUBPROCESS_STATE", 1);
	}
	


public static class row26Struct implements routines.system.IPersistableComparableLookupRow<row26Struct> {
    final static byte[] commonByteArrayLock_UPACK_upack_job = new byte[0];
    static byte[] commonByteArray_UPACK_upack_job = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer category_id;

				public Integer getCategory_id () {
					return this.category_id;
				}
				
			    public Integer prod_id;

				public Integer getProd_id () {
					return this.prod_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.category_id == null) ? 0 : this.category_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row26Struct other = (row26Struct) obj;
		
						if (this.category_id == null) {
							if (other.category_id != null)
								return false;
						
						} else if (!this.category_id.equals(other.category_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row26Struct other) {

		other.category_id = this.category_id;
	            other.prod_id = this.prod_id;
	            
	}

	public void copyKeysDataTo(row26Struct other) {

		other.category_id = this.category_id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
						this.category_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_UPACK_upack_job) {

        	try {

        		int length = 0;
		
						this.category_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.category_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.category_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.prod_id = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.prod_id = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.prod_id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.prod_id, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("category_id="+String.valueOf(category_id));
		sb.append(",prod_id="+String.valueOf(prod_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.category_id, other.category_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_26Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_26_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row26Struct row26 = new row26Struct();




	
	/**
	 * [tAdvancedHash_row26 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row26", false);
		start_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row26";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tAdvancedHash_row26 = 0;
		

			   		// connection name:row26
			   		// source node:tDBInput_26 - inputs:(after_tDBInput_22) outputs:(row26,row26) | target node:tAdvancedHash_row26 - inputs:(row26) outputs:()
			   		// linked node: tMap_15 - inputs:(row22,row26) outputs:(products)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row26 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row26Struct>getLookup(matchingModeEnum_row26);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row26", tHash_Lookup_row26);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row26 begin ] stop
 */



	
	/**
	 * [tDBInput_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_26", false);
		start_Hash.put("tDBInput_26", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_26";

	
		int tos_count_tDBInput_26 = 0;
		
	
    
	
		    int nb_line_tDBInput_26 = 0;
		    java.sql.Connection conn_tDBInput_26 = null;
				conn_tDBInput_26 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_26 = conn_tDBInput_26.createStatement();

		    String dbquery_tDBInput_26 = "select\n	category_id, prod_id\nfrom "+context.schema_in+".upack_categories;";
		    

            	globalMap.put("tDBInput_26_QUERY",dbquery_tDBInput_26);
		    java.sql.ResultSet rs_tDBInput_26 = null;

		    try {
		    	rs_tDBInput_26 = stmt_tDBInput_26.executeQuery(dbquery_tDBInput_26);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_26 = rs_tDBInput_26.getMetaData();
		    	int colQtyInRs_tDBInput_26 = rsmd_tDBInput_26.getColumnCount();

		    String tmpContent_tDBInput_26 = null;
		    
		    
		    while (rs_tDBInput_26.next()) {
		        nb_line_tDBInput_26++;
		        
							if(colQtyInRs_tDBInput_26 < 1) {
								row26.category_id = null;
							} else {
		                          
            row26.category_id = rs_tDBInput_26.getInt(1);
            if(rs_tDBInput_26.wasNull()){
                    row26.category_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_26 < 2) {
								row26.prod_id = null;
							} else {
		                          
            row26.prod_id = rs_tDBInput_26.getInt(2);
            if(rs_tDBInput_26.wasNull()){
                    row26.prod_id = null;
            }
		                    }
					


 



/**
 * [tDBInput_26 begin ] stop
 */
	
	/**
	 * [tDBInput_26 main ] start
	 */

	

	
	
	currentComponent="tDBInput_26";

	

 


	tos_count_tDBInput_26++;

/**
 * [tDBInput_26 main ] stop
 */
	
	/**
	 * [tDBInput_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_26";

	

 



/**
 * [tDBInput_26 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row26 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row26"
						
						);
					}
					


			   
			   

					row26Struct row26_HashRow = new row26Struct();
		   	   	   
				
				row26_HashRow.category_id = row26.category_id;
				
				row26_HashRow.prod_id = row26.prod_id;
				
			tHash_Lookup_row26.put(row26_HashRow);
			
            




 


	tos_count_tAdvancedHash_row26++;

/**
 * [tAdvancedHash_row26 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";

	

 



/**
 * [tAdvancedHash_row26 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row26 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";

	

 



/**
 * [tAdvancedHash_row26 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_26";

	

 



/**
 * [tDBInput_26 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_26 end ] start
	 */

	

	
	
	currentComponent="tDBInput_26";

	

	}
}finally{
	if (rs_tDBInput_26 != null) {
		rs_tDBInput_26.close();
	}
	if (stmt_tDBInput_26 != null) {
		stmt_tDBInput_26.close();
	}
}
globalMap.put("tDBInput_26_NB_LINE",nb_line_tDBInput_26);
 

ok_Hash.put("tDBInput_26", true);
end_Hash.put("tDBInput_26", System.currentTimeMillis());




/**
 * [tDBInput_26 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row26 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";

	

tHash_Lookup_row26.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row26", true);
end_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());




/**
 * [tAdvancedHash_row26 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_26 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_26";

	

 



/**
 * [tDBInput_26 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row26 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";

	

 



/**
 * [tAdvancedHash_row26 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_26_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final upack_job upack_jobClass = new upack_job();

        int exitCode = upack_jobClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = upack_job.class.getClassLoader().getResourceAsStream("upack/upack_job_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = upack_job.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("address_in", "id_String");
                        if(context.getStringValue("address_in") == null) {
                            context.address_in = null;
                        } else {
                            context.address_in=(String) context.getProperty("address_in");
                        }
                        context.setContextType("address_mon", "id_String");
                        if(context.getStringValue("address_mon") == null) {
                            context.address_mon = null;
                        } else {
                            context.address_mon=(String) context.getProperty("address_mon");
                        }
                        context.setContextType("address_out", "id_String");
                        if(context.getStringValue("address_out") == null) {
                            context.address_out = null;
                        } else {
                            context.address_out=(String) context.getProperty("address_out");
                        }
                        context.setContextType("dbname_in", "id_String");
                        if(context.getStringValue("dbname_in") == null) {
                            context.dbname_in = null;
                        } else {
                            context.dbname_in=(String) context.getProperty("dbname_in");
                        }
                        context.setContextType("dbname_mon", "id_String");
                        if(context.getStringValue("dbname_mon") == null) {
                            context.dbname_mon = null;
                        } else {
                            context.dbname_mon=(String) context.getProperty("dbname_mon");
                        }
                        context.setContextType("dbname_out", "id_String");
                        if(context.getStringValue("dbname_out") == null) {
                            context.dbname_out = null;
                        } else {
                            context.dbname_out=(String) context.getProperty("dbname_out");
                        }
                        context.setContextType("password_in", "id_String");
                        if(context.getStringValue("password_in") == null) {
                            context.password_in = null;
                        } else {
                            context.password_in=(String) context.getProperty("password_in");
                        }
                        context.setContextType("password_mon", "id_String");
                        if(context.getStringValue("password_mon") == null) {
                            context.password_mon = null;
                        } else {
                            context.password_mon=(String) context.getProperty("password_mon");
                        }
                        context.setContextType("password_out", "id_String");
                        if(context.getStringValue("password_out") == null) {
                            context.password_out = null;
                        } else {
                            context.password_out=(String) context.getProperty("password_out");
                        }
                        context.setContextType("port_in", "id_String");
                        if(context.getStringValue("port_in") == null) {
                            context.port_in = null;
                        } else {
                            context.port_in=(String) context.getProperty("port_in");
                        }
                        context.setContextType("port_mon", "id_String");
                        if(context.getStringValue("port_mon") == null) {
                            context.port_mon = null;
                        } else {
                            context.port_mon=(String) context.getProperty("port_mon");
                        }
                        context.setContextType("port_out", "id_String");
                        if(context.getStringValue("port_out") == null) {
                            context.port_out = null;
                        } else {
                            context.port_out=(String) context.getProperty("port_out");
                        }
                        context.setContextType("schema_in", "id_String");
                        if(context.getStringValue("schema_in") == null) {
                            context.schema_in = null;
                        } else {
                            context.schema_in=(String) context.getProperty("schema_in");
                        }
                        context.setContextType("schema_mon", "id_String");
                        if(context.getStringValue("schema_mon") == null) {
                            context.schema_mon = null;
                        } else {
                            context.schema_mon=(String) context.getProperty("schema_mon");
                        }
                        context.setContextType("schema_out", "id_String");
                        if(context.getStringValue("schema_out") == null) {
                            context.schema_out = null;
                        } else {
                            context.schema_out=(String) context.getProperty("schema_out");
                        }
                        context.setContextType("user_in", "id_String");
                        if(context.getStringValue("user_in") == null) {
                            context.user_in = null;
                        } else {
                            context.user_in=(String) context.getProperty("user_in");
                        }
                        context.setContextType("user_mon", "id_String");
                        if(context.getStringValue("user_mon") == null) {
                            context.user_mon = null;
                        } else {
                            context.user_mon=(String) context.getProperty("user_mon");
                        }
                        context.setContextType("user_out", "id_String");
                        if(context.getStringValue("user_out") == null) {
                            context.user_out = null;
                        } else {
                            context.user_out=(String) context.getProperty("user_out");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("address_in")) {
                context.address_in = (String) parentContextMap.get("address_in");
            }if (parentContextMap.containsKey("address_mon")) {
                context.address_mon = (String) parentContextMap.get("address_mon");
            }if (parentContextMap.containsKey("address_out")) {
                context.address_out = (String) parentContextMap.get("address_out");
            }if (parentContextMap.containsKey("dbname_in")) {
                context.dbname_in = (String) parentContextMap.get("dbname_in");
            }if (parentContextMap.containsKey("dbname_mon")) {
                context.dbname_mon = (String) parentContextMap.get("dbname_mon");
            }if (parentContextMap.containsKey("dbname_out")) {
                context.dbname_out = (String) parentContextMap.get("dbname_out");
            }if (parentContextMap.containsKey("password_in")) {
                context.password_in = (String) parentContextMap.get("password_in");
            }if (parentContextMap.containsKey("password_mon")) {
                context.password_mon = (String) parentContextMap.get("password_mon");
            }if (parentContextMap.containsKey("password_out")) {
                context.password_out = (String) parentContextMap.get("password_out");
            }if (parentContextMap.containsKey("port_in")) {
                context.port_in = (String) parentContextMap.get("port_in");
            }if (parentContextMap.containsKey("port_mon")) {
                context.port_mon = (String) parentContextMap.get("port_mon");
            }if (parentContextMap.containsKey("port_out")) {
                context.port_out = (String) parentContextMap.get("port_out");
            }if (parentContextMap.containsKey("schema_in")) {
                context.schema_in = (String) parentContextMap.get("schema_in");
            }if (parentContextMap.containsKey("schema_mon")) {
                context.schema_mon = (String) parentContextMap.get("schema_mon");
            }if (parentContextMap.containsKey("schema_out")) {
                context.schema_out = (String) parentContextMap.get("schema_out");
            }if (parentContextMap.containsKey("user_in")) {
                context.user_in = (String) parentContextMap.get("user_in");
            }if (parentContextMap.containsKey("user_mon")) {
                context.user_mon = (String) parentContextMap.get("user_mon");
            }if (parentContextMap.containsKey("user_out")) {
                context.user_out = (String) parentContextMap.get("user_out");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tJava_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

e_tJava_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : upack_job");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_3");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));
            connections.put("conn_tDBConnection_3", globalMap.get("conn_tDBConnection_3"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     932496 characters generated by Talend Open Studio for Data Integration 
 *     on the 24 июля 2025 г., 16:30:12 QYZT
 ************************************************************************************************/